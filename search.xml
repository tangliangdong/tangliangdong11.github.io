<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>linux vimrc 配置</title>
    <url>/2020/03/09/2020-3-9-linux-vimrc/</url>
    <content><![CDATA[<blockquote>
<p>如果你希望你所做的配置是永久性的，那么需要在你的用户目录创建一个 Vim 的配置文件 .vimrc 。</p>
</blockquote>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">" vimrc.vim - Extension of vim-sensible plugin with less sensible defaults.</span></span><br><span class="line"><span class="string">"</span> Maintainer:   Adam Stankiewicz &lt;sheerun@sher.pl&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> exists(<span class="string">'g:loaded_vimrc'</span>) || &amp;compatible</span><br><span class="line">  finish</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">let</span> g:loaded_vimrc = <span class="string">'yes'</span></span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="string">""</span> Basics</span><br><span class="line"></span><br><span class="line"><span class="string">" Disable strange Vi defaults.</span></span><br><span class="line"><span class="string">set nocompatible</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Turn on filetype plugins (:<span class="built_in">help</span> filetype-plugin).</span><br><span class="line"><span class="keyword">if</span> has(<span class="string">'autocmd'</span>)</span><br><span class="line">  filetype plugin indent on</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="string">" Enable syntax highlighting.</span></span><br><span class="line"><span class="string">if has('syntax')</span></span><br><span class="line"><span class="string">  syntax enable</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Autoindent when starting new line, or using `o` or `O`.</span><br><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"></span><br><span class="line"><span class="string">" Allow backspace in insert mode.</span></span><br><span class="line"><span class="string">set backspace=indent,eol,start</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Don<span class="string">'t scan included files. The .tags file is more performant.</span></span><br><span class="line"><span class="string">set complete-=i</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Use '</span>shiftwidth<span class="string">' when using `&lt;Tab&gt;` in front of a line.</span></span><br><span class="line"><span class="string">" By default it'</span>s used only <span class="keyword">for</span> <span class="built_in">shift</span> commands (`&lt;`, `&gt;`).</span><br><span class="line"><span class="built_in">set</span> smarttab</span><br><span class="line"></span><br><span class="line"><span class="string">" Disable octal format for number processing.</span></span><br><span class="line"><span class="string">set nrformats-=octal</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Allow <span class="keyword">for</span> mappings including `Esc`, <span class="keyword">while</span> preserving</span><br><span class="line"><span class="string">" zero timeout after pressing it manually.</span></span><br><span class="line"><span class="string">"</span> (it only nvim needs fixing this)</span><br><span class="line"><span class="keyword">if</span> !has(<span class="string">'nvim'</span>) &amp;&amp; &amp;ttimeoutlen == -1</span><br><span class="line">  <span class="built_in">set</span> ttimeout</span><br><span class="line">  <span class="built_in">set</span> ttimeoutlen=100</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="string">" Enable highlighted case-insensitive incremential search.</span></span><br><span class="line"><span class="string">set incsearch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Indent using two spaces.</span><br><span class="line"><span class="built_in">set</span> tabstop=2</span><br><span class="line"><span class="built_in">set</span> shiftwidth=2</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="string">" Use `Ctrl-L` to clear the highlighting of :set hlsearch.</span></span><br><span class="line"><span class="string">if maparg('&lt;C-L&gt;', 'n') ==# ''</span></span><br><span class="line"><span class="string">  nnoremap &lt;silent&gt; &lt;C-L&gt; :nohlsearch&lt;C-R&gt;=has('diff')?'&lt;Bar&gt;diffupdate':''&lt;CR&gt;&lt;CR&gt;&lt;C-L&gt;</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Always show window statuses, even <span class="keyword">if</span> there<span class="string">'s only one.</span></span><br><span class="line"><span class="string">set laststatus=2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Show the line and column number of the cursor position.</span></span><br><span class="line"><span class="string">set ruler</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Autocomplete commands using nice menu in place of window status.</span></span><br><span class="line"><span class="string">" Enable `Ctrl-N` and `Ctrl-P` to scroll through matches.</span></span><br><span class="line"><span class="string">set wildmenu</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" When '</span>wrap<span class="string">' is on, display last line even if it doesn'</span>t fit.</span><br><span class="line"><span class="built_in">set</span> display+=lastline</span><br><span class="line"></span><br><span class="line"><span class="string">" Force utf-8 encoding</span></span><br><span class="line"><span class="string">set encoding=utf-8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Set default whitespace characters when using `:<span class="built_in">set</span> list`</span><br><span class="line"><span class="built_in">set</span> listchars=tab:&gt;\ ,trail:-,extends:&gt;,precedes:&lt;,nbsp:+</span><br><span class="line"></span><br><span class="line"><span class="string">" Delete comment character when joining commented lines</span></span><br><span class="line"><span class="string">if v:version &gt; 703 || v:version == 703 &amp;&amp; has("</span>patch541<span class="string">")</span></span><br><span class="line"><span class="string">  set formatoptions+=j</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Search upwards <span class="keyword">for</span> tags file instead only locally</span><br><span class="line"><span class="keyword">if</span> has(<span class="string">'path_extra'</span>)</span><br><span class="line">  setglobal tags-=./tags tags^=./tags;</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="string">" Reload unchanged files automatically.</span></span><br><span class="line"><span class="string">set autoread</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Increase <span class="built_in">history</span> size to 1000 items.</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">history</span>=1000</span><br><span class="line"></span><br><span class="line"><span class="string">" Allow for up to 50 opened tabs on Vim start.</span></span><br><span class="line"><span class="string">set tabpagemax=50</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Always save upper <span class="keyword">case</span> variables to viminfo file.</span><br><span class="line"><span class="built_in">set</span> viminfo^=!</span><br><span class="line"></span><br><span class="line"><span class="string">" Enable undofile and set undodir and backupdir</span></span><br><span class="line"><span class="string">let s:dir = has('win32') ? '<span class="variable">$APPDATA</span>/Vim' : isdirectory(<span class="variable">$HOME</span>.'/Library') ? '~/Library/Vim' : empty(<span class="variable">$XDG_DATA_HOME</span>) ? '~/.local/share/vim' : '<span class="variable">$XDG_DATA_HOME</span>/vim'</span></span><br><span class="line"><span class="string">let &amp;backupdir = expand(s:dir) . '/backup//'</span></span><br><span class="line"><span class="string">let &amp;undodir = expand(s:dir) . '/undo//'</span></span><br><span class="line"><span class="string">set undofile</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Allow color schemes to <span class="keyword">do</span> bright colors without forcing bold.</span><br><span class="line"><span class="keyword">if</span> &amp;t_Co == 8 &amp;&amp; <span class="variable">$TERM</span> !~<span class="comment"># '^linux\|^Eterm'</span></span><br><span class="line">  <span class="built_in">set</span> t_Co=16</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="string">" Load matchit.vim, but only if the user hasn't installed a newer version.</span></span><br><span class="line"><span class="string">if !exists('g:loaded_matchit') &amp;&amp; findfile('plugin/matchit.vim', &amp;rtp) ==# ''</span></span><br><span class="line"><span class="string">  runtime! macros/matchit.vim</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> `Ctrl-U` <span class="keyword">in</span> insert mode deletes a lot. Use `Ctrl-G` u to first <span class="built_in">break</span> undo,</span><br><span class="line"><span class="string">" so that you can undo `Ctrl-U` without undoing what you typed before it.</span></span><br><span class="line"><span class="string">inoremap &lt;C-U&gt; &lt;C-G&gt;u&lt;C-U&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Avoid problems with fish shell</span><br><span class="line"><span class="string">" ([issue](https://github.com/tpope/vim-sensible/issues/50)).</span></span><br><span class="line"><span class="string">if &amp;shell =~# 'fish$' &amp;&amp; (v:version &lt; 704 || v:version == 704 &amp;&amp; !has('patch276'))</span></span><br><span class="line"><span class="string">  set shell=/bin/bash</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span><span class="string">" Extras</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Set monako font <span class="keyword">if</span> using macvim</span><br><span class="line"><span class="keyword">if</span> has(<span class="string">"gui_macvim"</span>)</span><br><span class="line">  <span class="built_in">set</span> guifont=Monaco:h13</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="string">" Keep flags when repeating last substitute command.</span></span><br><span class="line"><span class="string">nnoremap &amp; :&amp;&amp;&lt;CR&gt;</span></span><br><span class="line"><span class="string">xnoremap &amp; :&amp;&amp;&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Y yanks from the cursor to the end of line as expected. See :<span class="built_in">help</span> Y.</span><br><span class="line">nnoremap Y y$</span><br><span class="line"></span><br><span class="line"><span class="string">" Automatically create directories for backup and undo files.</span></span><br><span class="line"><span class="string">if !isdirectory(expand(s:dir))</span></span><br><span class="line"><span class="string">  call system("</span>mkdir -p <span class="string">" . expand(s:dir) . "</span>/&#123;backup,undo&#125;<span class="string">")</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Highlight line under cursor. It helps with navigation.</span><br><span class="line"><span class="built_in">set</span> cursorline</span><br><span class="line"></span><br><span class="line"><span class="string">" Keep 8 lines above or below the cursor when scrolling.</span></span><br><span class="line"><span class="string">set scrolloff=8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Keep 15 columns next to the cursor when scrolling horizontally.</span><br><span class="line"><span class="built_in">set</span> sidescroll=1</span><br><span class="line"><span class="built_in">set</span> sidescrolloff=15</span><br><span class="line"></span><br><span class="line"><span class="string">" Set minimum window size to 79x5.</span></span><br><span class="line"><span class="string">set winwidth=79</span></span><br><span class="line"><span class="string">set winheight=5</span></span><br><span class="line"><span class="string">set winminheight=5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> If opening buffer, search first <span class="keyword">in</span> opened windows.</span><br><span class="line"><span class="built_in">set</span> switchbuf=usetab</span><br><span class="line"></span><br><span class="line"><span class="string">" Hide buffers instead of asking if to save them.</span></span><br><span class="line"><span class="string">set hidden</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Wrap lines by default</span><br><span class="line"><span class="built_in">set</span> wrap linebreak</span><br><span class="line"><span class="built_in">set</span> showbreak=<span class="string">" "</span></span><br><span class="line"></span><br><span class="line"><span class="string">" Allow easy navigation between wrapped lines.</span></span><br><span class="line"><span class="string">vmap j gj</span></span><br><span class="line"><span class="string">vmap k gk</span></span><br><span class="line"><span class="string">nmap j gj</span></span><br><span class="line"><span class="string">nmap k gk</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> For autocompletion, complete as much as you can.</span><br><span class="line"><span class="built_in">set</span> wildmode=longest,full</span><br><span class="line"></span><br><span class="line"><span class="string">" Show line numbers on the sidebar.</span></span><br><span class="line"><span class="string">set number</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Disable any annoying beeps on errors.</span><br><span class="line"><span class="built_in">set</span> noerrorbells</span><br><span class="line"><span class="built_in">set</span> visualbell</span><br><span class="line"></span><br><span class="line"><span class="string">" Don't parse modelines (google "</span>vim modeline vulnerability<span class="string">").</span></span><br><span class="line"><span class="string">set nomodeline</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Do not fold by default. But <span class="keyword">if</span>, <span class="keyword">do</span> it up to 3 levels.</span><br><span class="line"><span class="built_in">set</span> foldmethod=indent</span><br><span class="line"><span class="built_in">set</span> foldnestmax=3</span><br><span class="line"><span class="built_in">set</span> nofoldenable</span><br><span class="line"></span><br><span class="line"><span class="string">" Enable mouse for scrolling and window resizing.</span></span><br><span class="line"><span class="string">set mouse=a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Disable swap to prevent annoying messages.</span><br><span class="line"><span class="built_in">set</span> noswapfile</span><br><span class="line"></span><br><span class="line"><span class="string">" Save up to 100 marks, enable capital marks.</span></span><br><span class="line"><span class="string">set viminfo='100,f1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Enable search highlighting.</span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br><span class="line"></span><br><span class="line"><span class="string">" Ignore case when searching.</span></span><br><span class="line"><span class="string">set ignorecase</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Show mode <span class="keyword">in</span> statusbar, not separately.</span><br><span class="line"><span class="built_in">set</span> noshowmode</span><br><span class="line"></span><br><span class="line"><span class="string">" Don't ignore case when search has capital letter</span></span><br><span class="line"><span class="string">"</span> (although also don<span class="string">'t ignore case by default).</span></span><br><span class="line"><span class="string">set smartcase</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Use dash as word separator.</span></span><br><span class="line"><span class="string">set iskeyword+=-</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Add gems.tags to files searched for tags.</span></span><br><span class="line"><span class="string">set tags+=gems.tags</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Disable output, vcs, archive, rails, temp and backup files.</span></span><br><span class="line"><span class="string">set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem</span></span><br><span class="line"><span class="string">set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz</span></span><br><span class="line"><span class="string">set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*</span></span><br><span class="line"><span class="string">set wildignore+=*.swp,*~,._*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Auto center on matched string.</span></span><br><span class="line"><span class="string">noremap n nzz</span></span><br><span class="line"><span class="string">noremap N Nzz</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Visually select the text that was last edited/pasted (Vimcast#26).</span></span><br><span class="line"><span class="string">noremap gV `[v`]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Expand %% to path of current buffer in command mode.</span></span><br><span class="line"><span class="string">cnoremap &lt;expr&gt; %% getcmdtype() == '</span>:<span class="string">' ? expand('</span>%:h<span class="string">').'</span>/<span class="string">' : '</span>%%<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Enable saving by `Ctrl-s`</span></span><br><span class="line"><span class="string">nnoremap &lt;C-s&gt; :w&lt;CR&gt;</span></span><br><span class="line"><span class="string">inoremap &lt;C-s&gt; &lt;ESC&gt;:w&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Use Q to intelligently close a window</span></span><br><span class="line"><span class="string">" (if there are multiple windows into the same buffer)</span></span><br><span class="line"><span class="string">" or kill the buffer entirely if it'</span>s the last window looking into that buffer.</span><br><span class="line"><span class="keyword">function</span>! CloseWindowOrKillBuffer()</span><br><span class="line">  <span class="built_in">let</span> number_of_windows_to_this_buffer = len(filter(range(1, winnr(<span class="string">'$'</span>)), <span class="string">"winbufnr(v:val) == bufnr('%')"</span>))</span><br><span class="line">  <span class="keyword">if</span> matchstr(expand(<span class="string">"%"</span>), <span class="string">'NERD'</span>) == <span class="string">'NERD'</span></span><br><span class="line">    wincmd c</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  endif</span><br><span class="line">  <span class="keyword">if</span> number_of_windows_to_this_buffer &gt; 1</span><br><span class="line">    wincmd c</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    bdelete</span><br><span class="line">  endif</span><br><span class="line">endfunction</span><br><span class="line">nnoremap &lt;silent&gt; Q :call CloseWindowOrKillBuffer()&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">" Set window title by default.</span></span><br><span class="line"><span class="string">set title</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Always focus on splited window.</span><br><span class="line"><span class="built_in">set</span> splitright</span><br><span class="line"><span class="built_in">set</span> splitbelow</span><br><span class="line"></span><br><span class="line"><span class="string">" Don't display the intro message on starting Vim.</span></span><br><span class="line"><span class="string">set shortmess+=I</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Use Silver Searcher <span class="keyword">for</span> CtrlP plugin (<span class="keyword">if</span> available)</span><br><span class="line"><span class="string">" Fallback to git ls-files for fast listing.</span></span><br><span class="line"><span class="string">"</span> Because we use fast strategies, <span class="built_in">disable</span> caching.</span><br><span class="line"><span class="built_in">let</span> g:ctrlp_use_caching = 0</span><br><span class="line"><span class="keyword">if</span> executable(<span class="string">'ag'</span>)</span><br><span class="line">    <span class="built_in">set</span> grepprg=ag\ --nogroup\ --nocolor</span><br><span class="line">    <span class="built_in">let</span> g:ctrlp_user_command = <span class="string">'cd %s &amp;&amp; ag -l --nocolor -g ""'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">let</span> g:ctrlp_user_command = [<span class="string">'.git'</span>,</span><br><span class="line">    \ <span class="string">'cd %s &amp;&amp; git ls-files . -co --exclude-standard'</span>,</span><br><span class="line">    \ <span class="string">'find %s -type f'</span> ]</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="string">" Accept CtrlP selections also with &lt;Space&gt;</span></span><br><span class="line"><span class="string">let g:ctrlp_prompt_mappings = &#123;</span></span><br><span class="line"><span class="string">  \ 'AcceptSelection("</span>e<span class="string">")': ['&lt;Space&gt;', '&lt;CR&gt;', '&lt;2-LeftMouse&gt;'],</span></span><br><span class="line"><span class="string">  \ &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Make sure pasting <span class="keyword">in</span> visual mode doesn<span class="string">'t replace paste buffer</span></span><br><span class="line"><span class="string">function! RestoreRegister()</span></span><br><span class="line"><span class="string">  let @" = s:restore_reg</span></span><br><span class="line"><span class="string">  return '</span><span class="string">'</span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string">function! s:Repl()</span></span><br><span class="line"><span class="string">  let s:restore_reg = @"</span></span><br><span class="line"><span class="string">  return "p@=RestoreRegister()\&lt;cr&gt;"</span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string">vmap &lt;silent&gt; &lt;expr&gt; p &lt;sid&gt;Repl()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Prevent common mistake of pressing q: instead :q</span></span><br><span class="line"><span class="string">map q: :q</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Make a simple "search" text object.</span></span><br><span class="line"><span class="string">" http://vim.wikia.com/wiki/Copy_or_change_search_hit</span></span><br><span class="line"><span class="string">" It allows for replacing search matches with cs and then /././.</span></span><br><span class="line"><span class="string">vnoremap &lt;silent&gt; s //e&lt;C-r&gt;=&amp;selection=='</span>exclusive<span class="string">'?'</span>+1<span class="string">':'</span><span class="string">'&lt;CR&gt;&lt;CR&gt;</span></span><br><span class="line"><span class="string">    \:&lt;C-u&gt;call histdel('</span>search<span class="string">',-1)&lt;Bar&gt;let @/=histget('</span>search<span class="string">',-1)&lt;CR&gt;gv</span></span><br><span class="line"><span class="string">omap s :normal vs&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Disable writebackup because some tools have issues with it:</span></span><br><span class="line"><span class="string">" https://github.com/neoclide/coc.nvim/issues/649</span></span><br><span class="line"><span class="string">set nowritebackup</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Reduce updatetime from 4000 to 300 to avoid issues with coc.nvim</span></span><br><span class="line"><span class="string">set updatetime=300</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Auto reload if file was changed somewhere else (for autoread)</span></span><br><span class="line"><span class="string">au CursorHold * checktime</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Enable loading filetype plugins</span></span><br><span class="line"><span class="string">filetype plugin on</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Merge signcolumn with number line (if supported)</span></span><br><span class="line"><span class="string">if has("patch-8.1.1564")</span></span><br><span class="line"><span class="string">  set signcolumn=number</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"" Color Scheme</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Vim color file</span></span><br><span class="line"><span class="string">" Original Maintainer:  Lars H. Nielsen (dengmao@gmail.com)</span></span><br><span class="line"><span class="string">" Last Change:  2014-05-31</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">" Modified version of wombat for 256-color terminals by</span></span><br><span class="line"><span class="string">"   Adam Stankiewicz (sheerun@sher.pl)</span></span><br><span class="line"><span class="string">" Modified version of wombat for 256-color terminals by</span></span><br><span class="line"><span class="string">"   David Liang (bmdavll@gmail.com)</span></span><br><span class="line"><span class="string">" based on version by</span></span><br><span class="line"><span class="string">"   Danila Bespalov (danila.bespalov@gmail.com)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set background=dark</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if version &gt; 580</span></span><br><span class="line"><span class="string">  hi clear</span></span><br><span class="line"><span class="string">  if exists("syntax_on")</span></span><br><span class="line"><span class="string">    syntax reset</span></span><br><span class="line"><span class="string">  endif</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let colors_name = "wombat256mod"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" General colors</span></span><br><span class="line"><span class="string">hi  Normal        ctermfg=252  ctermbg=234    cterm=none     guifg=#e3e0d7  guibg=#242424  gui=none</span></span><br><span class="line"><span class="string">hi  Cursor        ctermfg=234  ctermbg=228    cterm=none     guifg=#242424  guibg=#eae788  gui=none</span></span><br><span class="line"><span class="string">hi  Visual        ctermfg=251  ctermbg=239    cterm=none     guifg=#c3c6ca  guibg=#554d4b  gui=none</span></span><br><span class="line"><span class="string">hi  VisualNOS     ctermfg=251  ctermbg=236    cterm=none     guifg=#c3c6ca  guibg=#303030  gui=none</span></span><br><span class="line"><span class="string">hi  Search        ctermfg=177  ctermbg=241    cterm=none     guifg=#d787ff  guibg=#636066  gui=none</span></span><br><span class="line"><span class="string">hi  Folded        ctermfg=103  ctermbg=237    cterm=none     guifg=#a0a8b0  guibg=#3a4046  gui=none</span></span><br><span class="line"><span class="string">hi  Title         ctermfg=230  cterm=bold     guifg=#ffffd7  gui=bold</span></span><br><span class="line"><span class="string">hi  StatusLine    ctermfg=230  ctermbg=238    cterm=none     guifg=#ffffd7  guibg=#444444  gui=italic</span></span><br><span class="line"><span class="string">hi  VertSplit     ctermfg=238  ctermbg=238    cterm=none     guifg=#444444  guibg=#444444  gui=none</span></span><br><span class="line"><span class="string">hi  StatusLineNC  ctermfg=241  ctermbg=238    cterm=none     guifg=#857b6f  guibg=#444444  gui=none</span></span><br><span class="line"><span class="string">hi  LineNr        ctermfg=241  ctermbg=232    cterm=none     guifg=#857b6f  guibg=#080808  gui=none term=none</span></span><br><span class="line"><span class="string">hi  SpecialKey    ctermfg=241  ctermbg=235    cterm=none     guifg=#626262  guibg=#2b2b2b  gui=none</span></span><br><span class="line"><span class="string">hi  WarningMsg    ctermfg=203  guifg=#ff5f55</span></span><br><span class="line"><span class="string">hi  ErrorMsg      ctermfg=196  ctermbg=234    cterm=bold     guifg=#e3e0d7  guibg=#3a3a3a  gui=bold</span></span><br><span class="line"><span class="string">hi  SpellBad      ctermfg=196  ctermbg=234    cterm=bold     guifg=#e3e0d7  guibg=#3a3a3a  gui=bold</span></span><br><span class="line"><span class="string">hi  SpellCap      ctermfg=196  ctermbg=234    cterm=bold     guifg=#e3e0d7  guibg=#3a3a3a  gui=bold</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Vim &gt;= 7.0 specific colors</span></span><br><span class="line"><span class="string">if version &gt;= 700</span></span><br><span class="line"><span class="string">hi  CursorLine    ctermbg=236  cterm=none   guibg=#32322f</span></span><br><span class="line"><span class="string">hi  CursorLineNr  ctermbg=234    cterm=none      guibg=#242424  gui=none</span></span><br><span class="line"><span class="string">hi  MatchParen    ctermfg=228  ctermbg=101  cterm=bold     guifg=#eae788  guibg=#857b6f  gui=bold</span></span><br><span class="line"><span class="string">hi  Pmenu         ctermfg=230  ctermbg=238  guifg=#ffffd7  guibg=#444444</span></span><br><span class="line"><span class="string">hi  PmenuSel      ctermfg=232  ctermbg=192  guifg=#080808  guibg=#cae982</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Diff highlighting</span></span><br><span class="line"><span class="string">hi  DiffAdd     ctermbg=17   guibg=#2a0d6a</span></span><br><span class="line"><span class="string">hi  DiffDelete  ctermfg=234  ctermbg=60     cterm=none     guifg=#242424  guibg=#3e3969  gui=none</span></span><br><span class="line"><span class="string">hi  DiffText    ctermbg=53   cterm=none     guibg=#73186e  gui=none</span></span><br><span class="line"><span class="string">hi  DiffChange  ctermbg=237  guibg=#382a37</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"hi CursorIM</span></span><br><span class="line"><span class="string">"hi Directory</span></span><br><span class="line"><span class="string">"hi IncSearch</span></span><br><span class="line"><span class="string">"hi Menu</span></span><br><span class="line"><span class="string">"hi ModeMsg</span></span><br><span class="line"><span class="string">"hi MoreMsg</span></span><br><span class="line"><span class="string">"hi PmenuSbar</span></span><br><span class="line"><span class="string">"hi PmenuThumb</span></span><br><span class="line"><span class="string">"hi Question</span></span><br><span class="line"><span class="string">"hi Scrollbar</span></span><br><span class="line"><span class="string">"hi SignColumn</span></span><br><span class="line"><span class="string">"hi SpellBad</span></span><br><span class="line"><span class="string">"hi SpellCap</span></span><br><span class="line"><span class="string">"hi SpellLocal</span></span><br><span class="line"><span class="string">"hi SpellRare</span></span><br><span class="line"><span class="string">"hi TabLine</span></span><br><span class="line"><span class="string">"hi TabLineFill</span></span><br><span class="line"><span class="string">"hi TabLineSel</span></span><br><span class="line"><span class="string">"hi Tooltip</span></span><br><span class="line"><span class="string">"hi User1</span></span><br><span class="line"><span class="string">"hi User9</span></span><br><span class="line"><span class="string">"hi WildMenu</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Syntax highlighting</span></span><br><span class="line"><span class="string">hi  Keyword     ctermfg=111  cterm=none  guifg=#88b8f6  gui=none</span></span><br><span class="line"><span class="string">hi  Statement   ctermfg=111  cterm=none  guifg=#88b8f6  gui=none</span></span><br><span class="line"><span class="string">hi  Constant    ctermfg=173  cterm=none  guifg=#e5786d  gui=none</span></span><br><span class="line"><span class="string">hi  Number      ctermfg=173  cterm=none  guifg=#e5786d  gui=none</span></span><br><span class="line"><span class="string">hi  PreProc     ctermfg=173  cterm=none  guifg=#e5786d  gui=none</span></span><br><span class="line"><span class="string">hi  Function    ctermfg=192  cterm=none  guifg=#cae982  gui=none</span></span><br><span class="line"><span class="string">hi  Identifier  ctermfg=192  cterm=none  guifg=#cae982  gui=none</span></span><br><span class="line"><span class="string">hi  Type        ctermfg=186  cterm=none  guifg=#d4d987  gui=none</span></span><br><span class="line"><span class="string">hi  Special     ctermfg=229  cterm=none  guifg=#eadead  gui=none</span></span><br><span class="line"><span class="string">hi  String      ctermfg=113  cterm=none  guifg=#95e454  gui=italic</span></span><br><span class="line"><span class="string">hi  Comment     ctermfg=246  cterm=none  guifg=#9c998e  gui=italic</span></span><br><span class="line"><span class="string">hi  Todo        ctermfg=101  cterm=none  guifg=#857b6f  gui=italic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" Links</span></span><br><span class="line"><span class="string">hi! link FoldColumn    Folded</span></span><br><span class="line"><span class="string">hi! link CursorColumn  CursorLine</span></span><br><span class="line"><span class="string">hi! link NonText LineNr</span></span><br><span class="line"><span class="string">hi! link SignColumn LineNr</span></span><br><span class="line"><span class="string">hi! link CocErrorHighlight ErrorMsg</span></span><br><span class="line"><span class="string">hi! link CocWarningHighlight WarningMsg</span></span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/sheerun/vimrc" target="_blank" rel="noopener">github链接</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot transaction事务</title>
    <url>/2020/03/09/2020-3-9-springboot-transaction/</url>
    <content><![CDATA[<blockquote>
<p>propagation 事务的传播行为，默认值为 Propagation.REQUIRED。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 事务</span></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ol>
<li><strong>REQUIRED</strong></li>
</ol>
<p>使用当前事务，如果当前没事务，则自己新建一个事务，子方法是必须运行在一个事务中的；</p>
<p>如果当前存在事务，则加入这个事务，成为一个整体。</p>
<ol start="2">
<li><strong>SUPPORTS</strong></li>
</ol>
<p>如果当前有事务，则使用事务；如果当前没事务，则不使用事务。</p>
<ol start="3">
<li><strong>MANDATORY</strong></li>
</ol>
<p>该传播属性强制必须存在一个事务，如果不存在，则抛出异常。</p>
<ol start="4">
<li><strong>REQUIRES_NEW</strong></li>
</ol>
<p>如果当前有事务，则挂起该事务，并且自己创建一个新的事务给自己使用（别的事务报错，不会影响到该事务）；</p>
<p>如果当前没有事务，则相当于 <em>REQUIRED</em>。</p>
<ol start="5">
<li><strong>NOT_SUPPORTED</strong></li>
</ol>
<p>如果当前有事务，则把事务挂起，自己不适用事务去运行数据库操作。</p>
<ol start="6">
<li><strong>NEVER</strong></li>
</ol>
<p>如果当前有事务存在，就直接抛出异常。</p>
<ol start="7">
<li><strong>NESTED</strong></li>
</ol>
<ul>
<li><p>如果当前有事务，则开启子事务（嵌套事务），嵌套事务是独立提交或者回滚；</p>
</li>
<li><p>如果当前没有事务，则同 REQUIRED。</p>
</li>
<li><p>但是如果主事务提交，则会携带子事务一起提交。</p>
</li>
<li><p>如果主事务回滚，则子事务会一起回滚。相反，子事务异常，则父事务可以回滚或者不回滚。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPropagations</span><span class="params">()</span></span>&#123;</span><br><span class="line">    saveParent();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// save point</span></span><br><span class="line">        <span class="comment">// 这里子事务报错不会影响到父事务</span></span><br><span class="line">        saveChildren();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveParent</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Stu stu = <span class="keyword">new</span> Stu();</span><br><span class="line">    stu.setName(<span class="string">"parent"</span>);</span><br><span class="line">    stu.setAge(<span class="number">44</span>);</span><br><span class="line">    stuMapper.insert(stu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NESTED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveChildren</span><span class="params">()</span></span>&#123;</span><br><span class="line">    saveChild1();</span><br><span class="line">    <span class="keyword">int</span> a= <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    saveChild2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot添加动态定时任务</title>
    <url>/2020/03/05/2020-3-5-springboot-dynamic-task/</url>
    <content><![CDATA[<ul>
<li><p>首先这里我们需要重新认识一个类ThreadPoolTaskScheduler：线程池任务调度类，能够开启线程池进行任务调度。</p>
</li>
<li><p>ThreadPoolTaskScheduler.schedule()方法会创建一个定时计划ScheduledFuture，在这个方法需要添加两个参数，Runnable（线程接口类） 和CronTrigger（定时任务触发器）</p>
</li>
<li><p>在ScheduledFuture中有一个cancel可以停止定时任务。</p>
</li>
</ul>
<a id="more"></a>

<p>因为项目中需要给每个用户添加一个专属的定时器，而且每个用户的定时器任务执行的时间间隔也不尽相同，因此不能采用静态的定时器，而是需要动态的从数据库中读取每个用户自定义的时间间隔设置。</p>
<h3 id="动态添加定时器"><a href="#动态添加定时器" class="headerlink" title="动态添加定时器"></a>动态添加定时器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用线程池实现任务调度</span></span><br><span class="line"><span class="comment"> * Task任务调度器可以实现任务的调度和删除</span></span><br><span class="line"><span class="comment"> * 原理:</span></span><br><span class="line"><span class="comment"> * 实现一个类：ThreadPoolTaskScheduler线程池任务调度器，能够开启线程池进行任务调度</span></span><br><span class="line"><span class="comment"> * ThreadPoolTaskScheduler.schedule（）方法会创建一个定时计划ScheduleFuture,</span></span><br><span class="line"><span class="comment"> * 在这个方法中添加两个参数一个是Runable:线程接口类，和CronTrigger(定时任务触发器)</span></span><br><span class="line"><span class="comment"> * 在ScheduleFuture中有一个cancel可以停止定时任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Admin</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Scheduled Task是一种轻量级的任务定时调度器，相比于Quartz,减少了很多的配置信息，但是Scheduled Task 不适用于服务器集群，引文在服务器集群下会出现任务被多次调度执行的情况，因为集群的节点之间是不会共享任务信息的</span></span><br><span class="line"><span class="comment"> * 每个节点的定时任务都会定时执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElevatorDynamicTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, ScheduledFuture&lt;?&gt;&gt; elevatorTaskMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElevatorBlackBoxSingleAlarmGroupService elevatorBlackBoxSingleAlarmGroupService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setThreadPoolTaskScheduler</span><span class="params">(ThreadPoolTaskScheduler threadPoolTaskScheduler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.threadPoolTaskScheduler = threadPoolTaskScheduler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建对应定时器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hxzId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCron</span><span class="params">(String hxzId, String minute)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( elevatorTaskMap.containsKey(hxzId) )&#123;</span><br><span class="line">            System.out.println(<span class="string">"该"</span> + hxzId + <span class="string">"已存在"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LogTemplate.LogForInfo(hxzId + <span class="string">"已添加定时器，时间间隔为"</span>+minute+<span class="string">"分钟"</span>);</span><br><span class="line">        elevatorTaskMap.put(hxzId,  threadPoolTaskScheduler.schedule(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 定时检测给用户推送预警信息</span></span><br><span class="line">            System.out.println(<span class="string">"定时器"</span>)</span><br><span class="line">        &#125;, <span class="keyword">new</span> CronTrigger(<span class="string">"30 0/"</span>+minute+<span class="string">" * * * *"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束对应定时器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hxzId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopCron</span><span class="params">(String hxzId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elevatorTaskMap.get(hxzId) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            elevatorTaskMap.get(hxzId).cancel(<span class="keyword">true</span>);</span><br><span class="line">            elevatorTaskMap.remove(hxzId);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"DynamicTask.stopCron()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elevatorTaskMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态定时器"><a href="#静态定时器" class="headerlink" title="静态定时器"></a>静态定时器</h3><ul>
<li>@Scheduled(fixedDelay = 5000)    两次任务的间隔是<strong>前次任务的结束与下次任务的开始</strong>。</li>
<li>@Scheduled(fixedRate = 5000)   两次任务执行时间间隔是 <strong>任务的开始点</strong></li>
<li>@Scheduled(cron = “0/5 * * * * *”)     当时间达到设置的时间会触发事件。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每次任务执行完5秒后再执行一次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: testFixDelay</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:表示上一次任务执行完成后多久再次执行，参数类型为long，单位ms;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">5000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchPicture</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"定时抓图"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每5秒执行一次任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: testFixDelay</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:表示上一次任务执行完成后多久再次执行，参数类型为long，单位ms;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"定时抓图"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每5秒执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"每5秒检测一次"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://blog.csdn.net/qq_34125349/article/details/77430956" target="_blank" rel="noopener">spring-boot 定时任务之Scheduled Task</a></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux查看文件目录大小</title>
    <url>/2020/03/05/2020-3-5-linux-show-file-directory/</url>
    <content><![CDATA[<p>项目上的 <code>rocketmq</code> 因为服务器硬盘满了，无法继续使用了，因此需要去清理服务器上一些没用的数据。</p>
<a id="more"></a>

<h3 id="df-h-显示磁盘空间信息"><a href="#df-h-显示磁盘空间信息" class="headerlink" title="df -h   显示磁盘空间信息"></a>df -h   显示磁盘空间信息</h3><p><img src="1.png" alt="df -h"></p>
<h3 id="du-sh-显示该路径下文件夹的大小"><a href="#du-sh-显示该路径下文件夹的大小" class="headerlink" title="du -sh *   显示该路径下文件夹的大小"></a>du -sh *   显示该路径下文件夹的大小</h3><p><img src="2.png" alt="du -sh *"></p>
<h3 id="du-s-sort-nr-根据文件夹大小排序显示文件夹"><a href="#du-s-sort-nr-根据文件夹大小排序显示文件夹" class="headerlink" title="du -s * | sort -nr   根据文件夹大小排序显示文件夹"></a>du -s * | sort -nr   根据文件夹大小排序显示文件夹</h3><p><img src="4.png" alt="du -s * | sort -nr"></p>
<blockquote>
<p>这里就不要使用 <code>du -sh *</code> 了，排序会乱</p>
</blockquote>
<h3 id="ls-lh"><a href="#ls-lh" class="headerlink" title="ls -lh"></a>ls -lh</h3><p><img src="3.png" alt="ls -lh"></p>
<p>该命令第5列的数字：<br>1、对于普通文件，显示的是文件的大小（字节数）<br>2、对于设备文件是指主设备号（第6列为次设备号）<br>3、对于目录，是指目录大小（目录内inode列表所占空间，而<strong>不是目录内文件所占的空间大小</strong>）<br>4、对于符号链接，是指链接文件的路径名的字节数</p>
<h3 id="ls和du统计机制"><a href="#ls和du统计机制" class="headerlink" title="ls和du统计机制"></a>ls和du统计机制</h3><ul>
<li><strong>ls</strong> 显示的是一个文件占用的磁盘空间</li>
<li><strong>du</strong> 显示的是一个文件的大小</li>
</ul>
<p>占用空间取决于文件系统的块（block）的大小，linux一般默认是4k(4096),因此，一个大小为1个字节的文件，最小也要占用4k，如果你创建文件系统的时候制定块大小是16K，那么即便一个文件只有1个字节，占用空间也是16K。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next主题添加note</title>
    <url>/2020/02/26/2020-2-26-hexo-next-note/</url>
    <content><![CDATA[<h3 id="hexo-next主题不一样的提示块"><a href="#hexo-next主题不一样的提示块" class="headerlink" title="hexo next主题不一样的提示块"></a>hexo next主题不一样的提示块</h3><a id="more"></a>

<div class="note default">
            <p>default 提示块标签</p>
          </div>

<div class="note primary">
            <p>primary 提示块标签</p>
          </div>

<div class="note success">
            <p>success 提示块标签</p>
          </div>

<div class="note info">
            <p>info 提示块标签</p>
          </div>

<div class="note warning">
            <p>warning 提示块标签</p>
          </div>

<div class="note danger">
            <p>danger 提示块标签</p>
          </div>



<p>使用方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选项卡功能"><a href="#选项卡功能" class="headerlink" title="选项卡功能"></a>选项卡功能</h3><hr>
<div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab"><a href="#tab-1">tab1</a></li><li class="tab active"><a href="#tab-2">tab2</a></li><li class="tab"><a href="#tab-3">A</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab-1"><p><strong>选项卡 1</strong> </p></div><div class="tab-pane active" id="tab-2"><p><strong>选项卡 2</strong></p></div><div class="tab-pane" id="tab-3"><p><strong>选项卡 3</strong> </p></div></div></div>

<hr>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">tabs</span> tab,2 %&#125;</span><span class="xml"> 名字为tab，默认在第1个选项卡，如果是-1则隐藏</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab tab1 --&gt;</span></span></span><br><span class="line"><span class="xml">**选项卡 1** </span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab tab2 --&gt;</span></span></span><br><span class="line"><span class="xml">**选项卡 2**</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab A --&gt;</span></span></span><br><span class="line"><span class="xml">**选项卡 3** 名字为A</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endtabs</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>

<h3 id="文本居中的引用"><a href="#文本居中的引用" class="headerlink" title="文本居中的引用"></a>文本居中的引用</h3><blockquote class="blockquote-center"><p>人的一切痛苦，本质上都是对自己无能的愤怒</p>
</blockquote>

<blockquote class="blockquote-center"><p>王小波 </p>
</blockquote>

<figure class="highlight markdown"><figcaption><span>标签调用方法</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 其中 class="blockquote-center" 是必须的 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span></span>blah blah blah<span class="xml"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span></span></span><br><span class="line">&#123;% centerquote %&#125;人的一切痛苦，本质上都是对自己无能的愤怒&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 标签别名 --&gt;</span></span></span><br><span class="line">&#123;% cq %&#125; 王小波 &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  参考自</p>
<ul>
<li><a href="https://jinnsjj.github.io/uncategorized/hexo-next-note/" target="_blank" rel="noopener">在hexo-NexT中插入note提示块</a></li>
<li><a href="https://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">内置标签</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>功能</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>linux find命令常用操作</title>
    <url>/2020/02/25/2020-02-25-linux-find/</url>
    <content><![CDATA[<h3 id="查找指定名称的档案"><a href="#查找指定名称的档案" class="headerlink" title="查找指定名称的档案"></a>查找指定名称的档案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name nginx</span><br></pre></td></tr></table></figure>

<p>之后会列出所有包含nginx的文件或文件夹的路径</p>
<blockquote>
<p>  查找不区分字母大小写</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -iname nginx</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="仅查找目录或文件"><a href="#仅查找目录或文件" class="headerlink" title="仅查找目录或文件"></a>仅查找目录或文件</h3><p><code>find</code>的<code>-type</code>参数可以指定所要查找的档案的类型，常用：</p>
<ul>
<li><code>-type d</code>：只查找目录类型。<strong>d</strong> 是directory的首字母，表示 “<strong>目录</strong>”。</li>
<li><code>-type f</code>：只查找文件类型。<strong>f</strong> 是file的首字母，表示 “<strong>文件</strong>”。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只查找名为nginx的文件夹</span></span><br><span class="line">find / -<span class="built_in">type</span> d -name nginx </span><br><span class="line"></span><br><span class="line"><span class="comment"># 只查找名为nginx的文件</span></span><br><span class="line">find / -<span class="built_in">type</span> f -name nginx</span><br></pre></td></tr></table></figure>

<h3 id="操作查找结果"><a href="#操作查找结果" class="headerlink" title="操作查找结果"></a>操作查找结果</h3><blockquote>
<p>  find 命令会默认显示每个查找到文件。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name <span class="string">"*.jpg"</span></span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name <span class="string">"*.jpg"</span> -<span class="built_in">print</span></span><br></pre></td></tr></table></figure>

<p>格式化打印结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name <span class="string">"*.jpg"</span> -<span class="built_in">printf</span> <span class="string">"%p - %u\n"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>%p：文件名</li>
<li>%u：文件的所有者</li>
</ul>
<h4 id="调用命令"><a href="#调用命令" class="headerlink" title="调用命令"></a>调用命令</h4><p><code>-exec</code>可以将搜索出来的结果，输入到其他命令中进行再处理。</p>
<p>比如在查找出来的文件中搜索字符串</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在所有的nginx.conf文件中搜索8888的字符串，并将包含的文件列出来。</span></span><br><span class="line">find ./ -name <span class="string">"nginx.conf"</span> -<span class="built_in">exec</span> grep -l <span class="string">"8888"</span> &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有的nginx.conf文件中搜索8888的字符串，并将包含的文件和所在行的内容 列出来。</span></span><br><span class="line">find ./ -name <span class="string">"nginx.conf"</span> -<span class="built_in">exec</span> grep -n <span class="string">"8888"</span> ./ &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<ul>
<li>这个操作不必用双引号括起来</li>
<li>*<em>{} *</em>会用查找到的每个文件来替换</li>
<li><strong>\ **用来转义</strong>; 字符**</li>
<li>*<em>; *</em>是必须的结尾</li>
</ul>
<div class="note info">
            <p>因为测试环境装了很多的nginx，find搜索出来的nginx太多，端口号为nginx的配置文件找不到，通过<code>ps</code>和<code>netstat</code>命令也无法确定该nginx的目录。因此就将 find 和 grep命令结合起来使用。</p>
          </div>



<h3 id="文件的修改与存取时间"><a href="#文件的修改与存取时间" class="headerlink" title="文件的修改与存取时间"></a>文件的修改与存取时间</h3><ul>
<li>-atime （access time）在过去n天内被读取过的文件</li>
<li>-ctime 在过去n天内被修改过的文件 </li>
<li>-amin 在过去 n 分钟内被读取过</li>
<li>-cmin 在过去 n 分钟内被修改过</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找7天内被修改过的文件</span></span><br><span class="line">find / -ctime 7</span><br></pre></td></tr></table></figure>

<h3 id="根据文件大小查找"><a href="#根据文件大小查找" class="headerlink" title="根据文件大小查找"></a>根据文件大小查找</h3><p>使用 <code>-size</code>参数可以指定文件的大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找大小刚好是50MB的文件</span></span><br><span class="line">find / -size 50M</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找大于50KB的文件</span></span><br><span class="line">find . -size +50K</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找小于1G的文件</span></span><br><span class="line">finmd . -size -1G</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>  参考自 <a href="https://blog.gtwang.org/linux/unix-linux-find-command-examples/" target="_blank" rel="noopener"><a href="https://blog.gtwang.org/linux/unix-linux-find-command-examples/" target="_blank" rel="noopener">Unix/Linux 的 find 指令使用教學、技巧與範例整理</a></a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>更新centos7安装mysql5.7</title>
    <url>/2020/02/23/2020-2-23-centos7-install-mysql/</url>
    <content><![CDATA[<h3 id="1-添加Mysql5-7仓库"><a href="#1-添加Mysql5-7仓库" class="headerlink" title="1.添加Mysql5.7仓库"></a>1.添加Mysql5.7仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rpm -ivh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-确认mysql仓库是否添加成功"><a href="#2-确认mysql仓库是否添加成功" class="headerlink" title="2. 确认mysql仓库是否添加成功"></a>2. 确认mysql仓库是否添加成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum repolist all | grep mysql | grep enabled</span><br></pre></td></tr></table></figure>

<p>如果展示像下面,则表示成功添加仓库:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql-connectors-community/x86_64  MySQL Connectors Community    enabled:     51</span><br><span class="line">mysql-tools-community/x86_64       MySQL Tools Community         enabled:     63</span><br><span class="line">mysql57-community/x86_64           MySQL 5.7 Community Server    enabled:    267</span><br></pre></td></tr></table></figure>

<h3 id="3-开始安装Mysql5-7"><a href="#3-开始安装Mysql5-7" class="headerlink" title="3. 开始安装Mysql5.7"></a>3. 开始安装Mysql5.7</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>

<h3 id="4-启动mysql"><a href="#4-启动mysql" class="headerlink" title="4. 启动mysql"></a>4. 启动mysql</h3><ul>
<li>启动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure>

<ul>
<li>设置系统启动时自动启动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure>

<ul>
<li>查看启动状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status mysqld</span><br></pre></td></tr></table></figure>

<h3 id="5-Mysql的安全设置"><a href="#5-Mysql的安全设置" class="headerlink" title="5. Mysql的安全设置"></a>5. Mysql的安全设置</h3><p>CentOS上的root默认密码可以在文件/var/log/mysqld.log找到，通过下面命令可以打印出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /var/<span class="built_in">log</span>/mysqld.log | grep -i <span class="string">'temporary password'</span></span><br></pre></td></tr></table></figure>

<p>登录后需要修改root密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> identified by <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  修改用户密码</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update mysql.user <span class="built_in">set</span> authentication_string=password(<span class="string">'123qwe'</span>) <span class="built_in">where</span> user=<span class="string">'root'</span> and Host = <span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure>

<hr>
<p>执行下面命令进行安全设置，这个命令会进行设置root密码设置，移除匿名用户，禁止root用户远程连接等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>

<h3 id="6-创建用户、赋予权限"><a href="#6-创建用户、赋予权限" class="headerlink" title="6. 创建用户、赋予权限"></a>6. 创建用户、赋予权限</h3><ul>
<li>创建远程登录用户</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE USER <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>赋予该用户所有的权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'localhost'</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<h3 id="7-设置数据库编码为utf8"><a href="#7-设置数据库编码为utf8" class="headerlink" title="7. 设置数据库编码为utf8"></a>7. 设置数据库编码为utf8</h3><ul>
<li>打开配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/my.cnf</span><br></pre></td></tr></table></figure>

<ul>
<li>在[mysqld]，[client]，[mysql]节点下添加编码设置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">collation-server = utf8_unicode_ci</span><br><span class="line">init-connect=<span class="string">'SET NAMES utf8'</span></span><br><span class="line">character-set-server = utf8</span><br></pre></td></tr></table></figure>

<ul>
<li>重启Mysql即可</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart mysqld</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux curl模拟 GET/POST 调试接口</title>
    <url>/2020/02/22/2020-2-22-linux-debug-interface/</url>
    <content><![CDATA[<h2 id="curl-GET请求"><a href="#curl-GET请求" class="headerlink" title="curl GET请求"></a>curl GET请求</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8088/project/getProjectList?pageNum=1&amp;pageSize=10</span><br></pre></td></tr></table></figure>

<p>若是想看更加详细的请求信息，我们可以再加上 -v 参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8088/project/getProjectList?pageNum=1&amp;pageSize=10 -v</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="curl-POST请求"><a href="#curl-POST请求" class="headerlink" title="curl POST请求"></a>curl POST请求</h2><blockquote>
<p>  我们可以用 <code>-X POST</code> 来申明我们的请求方法，默认是GET请求，用 <code>-d</code> 参数，来传送我们的参数。</p>
</blockquote>
<div class="note danger">
            <p>所以，我们可以用 <code>-X PUT</code> 和 <code>-X DELETE</code> 来指定另外的请求方法。</p>
          </div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">"mobile=18257146867&amp;authCode=123456&amp;CID=0&amp;platform=1"</span> http://localhost:8088/login/loginByAuthCode</span><br></pre></td></tr></table></figure>

<p>如果要传输json格式参数，则可以用 <code>-H</code> 参数来申明请求的 <code>header</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl localhost:9999/api/send -X POST -H <span class="string">"Content-Type:application/json"</span> -d <span class="string">'"username":"xiaotang","content":"hello world"'</span></span><br></pre></td></tr></table></figure>

<p>我们可以用 <code>-H</code> 来设置更多的 <code>header</code> 比如，用户的 <code>token</code> 之类的。</p>
<h2 id="curl-POST-上传文件"><a href="#curl-POST-上传文件" class="headerlink" title="curl POST 上传文件"></a>curl POST 上传文件</h2><p>可以用 <code>-F &quot;file=@__FILE_PATH__&quot;</code> 的格式，传输文件即可。命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl localhost:8088/upload/file -F <span class="string">"file=@/mnt/1463739554391.jpg"</span> -F <span class="string">"fileType=2"</span> -F <span class="string">"location=杭州"</span></span><br></pre></td></tr></table></figure>

<p>每个参数都要单独用 -F 命令单独写</p>
<hr>
<p>参考自 <a href="https://blog.csdn.net/FungLeo/article/details/80703365" target="_blank" rel="noopener">curl 模拟 GET\POST 请求，以及 curl post 上传文件</a> </p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 修改创建容器时的参数</title>
    <url>/2020/02/19/2020-2-19-docker-modify-config/</url>
    <content><![CDATA[<p>每次docker 创建容器的时候总是很快就建好了，但是之后会发现总是少写了参数，比如mysql的 <code>MYSQL_ROOT_PASSWORD</code>、tomcat和mysql的 <code>--link</code> 。但是删了容器重新来过也麻烦。但是直接进入到容器里吧，连 <code>vim</code>、<code>vi</code> 的编辑器都没有。但是我们还可以通过修改容器配置文件的方法来达到我们的目的。</p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<a id="more"></a>
<p>=======</p>
<!-- more -->
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>d3c8f929fa1bffaafb4080236a5259cdcff6f1a4</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul>
<li>停止容器 <code>docker stop &lt;container ID&gt;</code></li>
<li>停止docker服务 <code>systemctl stop docker</code></li>
<li>进入到 <code>/var/lib/docker/containers/&lt;container ID&gt;</code>，其下有两个文件<ul>
<li>hostconfig.json</li>
<li>config.v2.json</li>
</ul>
</li>
</ul>
<p>比如修改容器的端口映射：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/docker/containers/&lt;container ID&gt;`  <span class="comment">#容器id</span></span><br><span class="line"></span><br><span class="line">vim hostconfig.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 之前的端口映射</span></span><br><span class="line"><span class="string">"PortBindings"</span>:&#123;<span class="string">"8080/tcp"</span>:[&#123;<span class="string">"HostIp"</span>:<span class="string">""</span>,<span class="string">"HostPort"</span>:<span class="string">"9001"</span>&#125;]&#125;</span><br><span class="line"><span class="comment"># 前一个数字是容器端口, 后一个是宿主机端口。将宿主机的9001端口映射到容器的8080端口</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动docker服务(systemctl start docker)</li>
<li>启动容器(docker start <container id>)</container></li>
</ul>
<p><strong>hostconfig.json</strong></p>
<p><img src="1.png" alt="hostconfig.json"></p>
<p><strong>config.v2.json</strong></p>
<p><img src="2.png" alt="config.v2.json"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot使用ResponseBodyAdvice统一包装结果</title>
    <url>/2020/01/16/2020-1-16-springboot-return-data-pack/</url>
    <content><![CDATA[<p>在我们使用SpringBoot编写接口的时候，最好是返回一个统一格式的JSON，该格式包含错误码，附带信息，以及携带的数据。这样前端在解析的时候就能统一解析，同时携带错误码可以更加容易的排查错误。</p>
<a id="more"></a>

<h2 id="添加ResponseBodyAdvice"><a href="#添加ResponseBodyAdvice" class="headerlink" title="添加ResponseBodyAdvice"></a>添加ResponseBodyAdvice</h2><p><strong><code>ResponseBodyAdvice</code>接口里一共包含了两个方法</strong></p>
<ul>
<li><code>supports</code>:该组件是否支持给定的控制器方法返回类型和选择的{@code HttpMessageConverter}类型。<strong>用于判断是否需要做处理。</strong></li>
<li><code>beforeBodyWrite</code>:在选择{@code HttpMessageConverter}之后调用，在调用其写方法之前调用。<strong>用于做返回处理。</strong></li>
</ul>
<figure class="highlight java"><figcaption><span>com.xiaotang.springaccount.dto.ResponseBodyDTO</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回的结果类</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseBodyDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> Object result;</span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseBodyDTO</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">this</span>.success = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.msg = <span class="string">"操作成功"</span>;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseBodyDTO</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>com.xiaotang.springaccount.config.ResponseDataHandler</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDataHandler</span> <span class="keyword">implements</span> <span class="title">ResponseBodyAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter methodParameter, Class aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">beforeBodyWrite</span><span class="params">(Object body, MethodParameter returnType, MediaType mediaType, Class aClass, ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(! (body <span class="keyword">instanceof</span> ResponseBodyDTO))&#123;</span><br><span class="line">            ResponseBodyDTO responseBodyDTO = <span class="keyword">new</span> ResponseBodyDTO();</span><br><span class="line">            responseBodyDTO.setCode(<span class="number">200</span>);</span><br><span class="line">            responseBodyDTO.setMsg(<span class="string">"操作成功"</span>);</span><br><span class="line">            responseBodyDTO.setSuccess(<span class="keyword">true</span>);</span><br><span class="line">            responseBodyDTO.setResult(body);</span><br><span class="line">            body = responseBodyDTO;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> body;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"getMap"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"username"</span>, <span class="string">"xiaotang"</span>);</span><br><span class="line">    map.put(<span class="string">"age"</span>, <span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">"sex"</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="3.png" alt></p>
<p>返回结果已经成功包装了。</p>
<hr>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><figure class="highlight java"><figcaption><span>com.xiaotang.springaccount.controller.LoginController</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"login"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果如上所示，最后返回值是null，则会报错，因此需要再添加一个 <strong>HttpMessageConverter</strong></p>
<p><img src="2.png" alt></p>
<hr>
<h2 id="添加-HttpMessageConverter"><a href="#添加-HttpMessageConverter" class="headerlink" title="添加 HttpMessageConverter"></a>添加 HttpMessageConverter</h2><p>简单来说只要在添加 WebMvcConfigurer中添加 <code>MappingJackson2HttpMessageConverter</code></p>
<figure class="highlight java"><figcaption><span>com.xiaotang.springaccount.config.WebConfigurer</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">		converters.add(<span class="number">0</span>, <span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note danger">
            <p>converters 列表里的转换器位置越靠前，优先级越高，因此在后面的转换器可能会被覆盖，因此我们自己添加的converter 最好添加在前面，以免失效。</p>
          </div>

<h3 id="使用-FastJsonHttpMessageConverter"><a href="#使用-FastJsonHttpMessageConverter" class="headerlink" title="使用 FastJsonHttpMessageConverter"></a>使用 FastJsonHttpMessageConverter</h3><blockquote>
<p>如果你使用 Spring MVC 来构建 Web 应用并对性能有较高的要求的话，可以使用 Fastjson 提供的<code>FastJsonHttpMessageConverter</code> 来替换 Spring MVC 默认的 <code>HttpMessageConverter</code> 以提高 <code>@RestController @ResponseBody @RequestBody</code> 注解的 JSON序列化速度。而且可选择的配置也很多。</p>
</blockquote>
<div class="note info">
            <p>FastJsonHttpMessageConverter 可以将返回对象中的 <code>list: null</code> 转换成 []，还可以给 int 、 boolean、string 附上初始值 0、false、””。</p>
          </div>

<p>FastJsonHttpMessageConverter是基于fastjson的一种HttpMessageConverter，spring系统默认使用的是MappingJackson2HttpMessageConverter，因此添加的 fastJsonHttpMessageConverter 一定要放在MappingJackson2HttpMessageConverter 之前。</p>
<p><img src="1.png" alt="Converters"></p>
<figure class="highlight java"><figcaption><span>com.xiaotang.springaccount.config.WebConfigurer</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        converters.add(0, new MappingJackson2HttpMessageConverter());</span></span><br><span class="line">        FastJsonHttpMessageConverter fastConverter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、添加fastjson的配置信息</span></span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line"></span><br><span class="line">        SerializerFeature[] serializerFeatures = <span class="keyword">new</span> SerializerFeature[]&#123;</span><br><span class="line">                <span class="comment">//    输出key是包含双引号</span></span><br><span class="line"><span class="comment">//                SerializerFeature.QuoteFieldNames,</span></span><br><span class="line">                <span class="comment">//    是否输出为null的字段,若为null 则显示该字段</span></span><br><span class="line">                SerializerFeature.WriteMapNullValue,</span><br><span class="line">                <span class="comment">//    数值字段如果为null，则输出为0</span></span><br><span class="line">                SerializerFeature.WriteNullNumberAsZero,</span><br><span class="line">                <span class="comment">//     List字段如果为null,输出为[],而非null</span></span><br><span class="line"><span class="comment">//                SerializerFeature.WriteNullListAsEmpty,</span></span><br><span class="line">                <span class="comment">//    字符类型字段如果为null,输出为"",而非null</span></span><br><span class="line">                SerializerFeature.WriteNullStringAsEmpty,</span><br><span class="line">                <span class="comment">//    Boolean字段如果为null,输出为false,而非null</span></span><br><span class="line">                SerializerFeature.WriteNullBooleanAsFalse,</span><br><span class="line">                <span class="comment">//    Date的日期转换器</span></span><br><span class="line">                SerializerFeature.WriteDateUseDateFormat,</span><br><span class="line">                <span class="comment">//    循环引用</span></span><br><span class="line">                SerializerFeature.DisableCircularReferenceDetect,</span><br><span class="line">        &#125;;</span><br><span class="line">        fastJsonConfig.setSerializerFeatures(serializerFeatures);</span><br><span class="line">        fastJsonConfig.setCharset(Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、在convert中添加配置信息</span></span><br><span class="line">        fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">        converters.add(<span class="number">0</span>, fastConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><figure class="highlight java"><figcaption><span>com.xiaotang.springaccount.dto.UserInfo</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Boolean sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>com.xiaotang.springaccount.controller.LoginController</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"testobject"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserInfo <span class="title">testobject</span><span class="params">()</span></span>&#123;</span><br><span class="line">    UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">    userInfo.setUsername(<span class="string">"hello world"</span>);</span><br><span class="line">    <span class="keyword">return</span> userInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<p><img src="4.png" alt="返回值"></p>
<p>list, string, boolean 类型都是非null了。</p>
<h2 id="更多的配置接口-WebMvcConfigurer"><a href="#更多的配置接口-WebMvcConfigurer" class="headerlink" title="更多的配置接口 WebMvcConfigurer"></a>更多的配置接口 WebMvcConfigurer</h2><p>参考 <a href="https://blog.csdn.net/fmwind/article/details/81235401" target="_blank" rel="noopener">Spring Boot配置接口 WebMvcConfigurer</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://blog.csdn.net/BBsatan/article/details/98748229" target="_blank" rel="noopener">springboot 使用fastjson替代默认jackson（踩坑路）</a></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>近视眼将来不用戴老花眼镜吗？</title>
    <url>/2020/01/10/2020-1-10-myopia-presbyopia/</url>
    <content><![CDATA[<blockquote>
<p>近视眼可以和老花眼相互抵消吗，让眼睛的视力恢复如初吗？</p>
</blockquote>
<a id="more"></a>

<p>因为我家人的眼睛几乎都是不近视的，而我爷爷奶奶甚至是爸爸早早的就戴上了老花镜，手机的字也调的很大，成了名副其实的老花眼，因此我也将 老花眼和远视眼划上了等号，也让我产生了如上的误解。</p>
<p>曾经也有人提出说不会抵消，那不会抵消的话，那近视眼一旦患上远视眼<strong>岂不是近处看不清，远处也看不清…</strong>那不是成了名副其实盲人了。应该不会这样吧:anger:</p>
<p>甚至我也对近视眼产生羡慕，因为在不久的将来近视眼也能恢复正常。</p>
<div class="note danger">
            <p>但实际上，并没有那么简单，也没用我所想的那么美好。</p>
          </div>

<p><img src="3.png" alt></p>
<h3 id="老花眼是什么？"><a href="#老花眼是什么？" class="headerlink" title="老花眼是什么？"></a>老花眼是什么？</h3><p>老花眼是一种正常的生理退化状态，是当人们步入中老年后必然会出现的视力问题，一般来说，通常出现在40-45岁以后。</p>
<h3 id="老花眼的原因"><a href="#老花眼的原因" class="headerlink" title="老花眼的原因"></a>老花眼的原因</h3><p>晶状体作为眼球重要的组成部分之一，就像是相机中的镜头一样，对光线有着屈光和调节的作用。</p>
<p>而随着年龄的增长，晶状体的硬化、增厚、弹性减弱和调节能力逐渐减退，以及眼部肌肉的调节能力也随之减退。</p>
<p>当得了老花眼的人看近物时，由于影像投射在视网膜上时无法完全聚焦，就导致了看近距离的物体时会变得模糊不清。</p>
<h3 id="近视眼的老花"><a href="#近视眼的老花" class="headerlink" title="近视眼的老花"></a>近视眼的老花</h3><p>近视眼和远视眼的抵消只是表面佩戴眼镜度数上的体现，但近视眼和老花眼并不会消失，我们眼镜的度数并不会因此发生改变。</p>
<p>近视眼和老花眼的病理并不相同，老花作为眼球自然的老化现象，是无法改变本来的近视眼的眼球状态的。</p>
<p>因此当近视眼老花后，看远处需要降低部分的近视度数才能看清。</p>
<ul>
<li>如果近视度数较低的话，那么可能看远处并不需要佩戴眼镜，看近处则需要根据个人情况。</li>
<li>如果是高度近视者的话，由于本来就看不清远处，加上眼睛调节能力减弱，很可能出现近处远处都看不清的情况，这样可能需要使用度数不同的眼睛（一副近视眼镜，一副老花眼镜）。</li>
</ul>
<p><img src="1.jpg" alt></p>
<p>所以开头的答案以及很明显了，得近视眼的再患上老花眼，就真的可能<strong>近的看不见</strong>，<strong>远的也看不见</strong>了</p>
<p><img src="4.png" alt></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.zhihu.com/question/20003947" target="_blank" rel="noopener">近视眼将来不用戴老花眼镜吗？ - 知乎</a> </li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>文件描述符 与 /dev/null</title>
    <url>/2020/01/10/2020-1-10-file-descriptor/</url>
    <content><![CDATA[<blockquote>
<p>文件描述符是与文件输入、输出关联的整数。它们用来跟踪已打开的文件。最常见的文件描述符是stidin、stdout、和stderr。我们可以将某个文件描述符的内容重定向到另外一个文件描述符中。<br>                                                                                                    ——<em>《linux shell脚本攻略》</em></p>
</blockquote>
<a id="more"></a>

<h2 id="文件名描述符"><a href="#文件名描述符" class="headerlink" title="文件名描述符"></a>文件名描述符</h2><ul>
<li>0 —— stdin（标准输入）</li>
<li>1 —— stdout （标准输出）</li>
<li>2 —— stderr （标准错误输出）</li>
</ul>
<blockquote>
<p>重定向操作是shell命令对应的文件描述符输出的文本信息重新输入到另外一个文件中。</p>
</blockquote>
<p><strong>重定向标准输出stdout：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls 123.txt 1&gt;stdout.txt</span><br><span class="line">$ cat stdout.txt</span><br><span class="line">123.txt</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>标准输出的 <strong>1</strong> 可以省略，默认就是标准输出</p>
          </div>

<div class="note danger">
            <p>1&gt;stdout.txt，中间不能有任何的空格</p>
          </div>

<p><strong>重定向标准错误stderr</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls abc.txt 2&gt;stderr.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat stderr.txt</span></span><br><span class="line">ls: cannot access abc.txt: No such file or directory</span><br></pre></td></tr></table></figure>

<p>标准错误的重定向到了 stderr.txt 文件中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 你可以将stderr单独定向到一个文件，将stdout重定向到另一个文件：</span></span><br><span class="line">$ cmd 2&gt;stderr.txt 1&gt;stdout.txt</span><br><span class="line"><span class="comment"># stderr 和 stdout 都重定向到一个文件中</span></span><br><span class="line">$ cmd &gt; output.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h2 id="linux特殊文件"><a href="#linux特殊文件" class="headerlink" title="linux特殊文件"></a>linux特殊文件</h2><blockquote>
<p>/dev/null是一个特殊的设备文件，这个文件接收到的任何数据都会被丢弃。因此，null这个设备通常也被成为位桶（bit bucket）或黑洞。</p>
<p>​                                                            ——《linux shell脚本攻略》</p>
</blockquote>
<p>重定向操作给这个 /dev/null 文件的所有东西都会被丢弃。因此如果不想让输出结果打印到控制台，就可以将输出重定向到 <em>/dev/null</em> 文件中。（可以标准错误重定向到 /dev/null 文件中）</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.zhihu.com/question/53295083/answer/135258024" target="_blank" rel="noopener">shell程序中 2&gt; /dev/null 代表什么意思？ - 裕用ID的回答 - 知乎</a></li>
</ul>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloud+nacos+seata 实现分布式事务管理</title>
    <url>/2020/01/10/2020-1-10-springcloud-nacos-seata/</url>
    <content><![CDATA[<p><code>Seata</code> 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。<code>Seata</code> 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p>
<a id="more"></a>

<ul>
<li>Seata的整合样例 <a href="https://github.com/seata/seata-samples.git" target="_blank" rel="noopener">Seata Samples</a></li>
</ul>
<p>如果​有​疑惑​的​可以去​看​看官方样例是如何使用的​，​依样画葫芦总是会简单​很多:smile:</p>
<h2 id="下载启动seata"><a href="#下载启动seata" class="headerlink" title="下载启动seata"></a>下载启动seata</h2><p>在 <a href="https://github.com/seata/seata" target="_blank" rel="noopener">Seata</a> 克隆代码，然后用idea打开启动</p>
<p><img src="1.png" alt="Seata Samples"></p>
<h3 id="seata-server模块"><a href="#seata-server模块" class="headerlink" title="seata-server模块"></a>seata-server模块</h3><figure class="highlight bash"><figcaption><span>/server/src/main/resources/register.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  <span class="comment"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class="line">  <span class="built_in">type</span> = <span class="string">"nacos"</span></span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="string">"localhost"</span></span><br><span class="line">    namespace = <span class="string">"public"</span></span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line">  <span class="comment"># file、nacos、apollo、zk、consul、etcd3</span></span><br><span class="line">  <span class="comment"># 配置中心的选择</span></span><br><span class="line">  <span class="built_in">type</span> = <span class="string">"file"</span></span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="string">"localhost"</span></span><br><span class="line">    namespace = <span class="string">"public"</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  file &#123;</span><br><span class="line">    name = <span class="string">"file.conf"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>这里使用 nacos 作为注册中心，并采用 file.conf 配置的形式</p>
          </div>

<figure class="highlight bash"><figcaption><span>/server/src/main/resources/file.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">service &#123;</span><br><span class="line">  <span class="comment">#transaction service group mapping</span></span><br><span class="line">  vgroup_mapping.my_test_tx_group = <span class="string">"default"</span></span><br><span class="line">  <span class="comment"># 这里的是之后对每个微服务进行配置所需要用到的</span></span><br><span class="line">  service.vgroup_mapping.order-service-fescar-service-group=<span class="string">"default"</span></span><br><span class="line">  service.vgroup_mapping.account-service-fescar-service-group=<span class="string">"default"</span></span><br><span class="line">  <span class="comment"># only support when registry.type=file, please don't set multiple addresses</span></span><br><span class="line">  default.grouplist = <span class="string">"127.0.0.1:8091"</span></span><br><span class="line">  <span class="comment"># disable seata</span></span><br><span class="line">  disableGlobalTransaction = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## transaction log store, only used in seata-server</span></span><br><span class="line">store &#123;</span><br><span class="line">  <span class="comment">## store mode: file、db</span></span><br><span class="line">  mode = <span class="string">"db"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## file store property</span></span><br><span class="line">  file &#123;</span><br><span class="line">    <span class="comment">## store location dir</span></span><br><span class="line">    dir = <span class="string">"sessionStore"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">## database store property</span></span><br><span class="line">  db &#123;</span><br><span class="line">    <span class="comment">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</span></span><br><span class="line">    datasource = <span class="string">"dbcp"</span></span><br><span class="line">    <span class="comment">## mysql/oracle/h2/oceanbase etc.</span></span><br><span class="line">    db-type = <span class="string">"mysql"</span></span><br><span class="line">    driver-class-name = <span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">    url = <span class="string">"jdbc:mysql://116.62.14.208:3306/seata"</span></span><br><span class="line">    user = <span class="string">"root"</span></span><br><span class="line">    password = <span class="string">"123456"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建seata数据库"><a href="#创建seata数据库" class="headerlink" title="创建seata数据库"></a>创建seata数据库</h3><p>seata 选择 store.mode = “db”，则需要创建数据库。</p>
<p>seata 所需的三个数据库，对应的sql的文件在根目录下的 <code>/script/server/db/mysql.sql</code></p>
<p><img src="4.png" alt="seata mysql"></p>
<p><img src="2.png" alt="seata sql"></p>
<p>然后就可以启动 seata-server，当然在此之前已经将nacos启动了，地址为<code>localhost;8848</code></p>
<h2 id="配置微服务-Account-Server"><a href="#配置微服务-Account-Server" class="headerlink" title="配置微服务 Account-Server"></a>配置微服务 Account-Server</h2><p> <strong>account-server</strong>、<strong>order-server</strong> 和 <strong>storage-server</strong> 差不多，就只展示一个的配置，</p>
<figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaotang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-account<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-account<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud-alibaba-dependencies.version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-alibaba-dependencies.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">seata.version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">seata.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud-alibaba-seata.version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-alibaba-seata.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- seata --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;seata.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba-seata.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- feign --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba-dependencies.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改-application-yml-文件"><a href="#修改-application-yml-文件" class="headerlink" title="修改 application.yml 文件"></a>修改 application.yml 文件</h3><p>自定义事务组的名称 <code>tx-service-group: account-service-group</code></p>
<figure class="highlight yaml"><figcaption><span>application.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8021</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">account-server</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span> <span class="comment">#nacos注册地址</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="comment"># seata 服务分组，要与服务端file.conf中service.vgroup_mapping的后缀对应</span></span><br><span class="line"><span class="attr">    alibaba:</span></span><br><span class="line"><span class="attr">      seata:</span></span><br><span class="line"><span class="attr">        tx-service-group:</span> <span class="string">account-service-group</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/account?characterEncoding=utf8</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:/mapper/*.xml</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.xiaotang.springaccount</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line"><span class="attr">    org:</span></span><br><span class="line"><span class="attr">      springframework:</span></span><br><span class="line"><span class="attr">        boot:</span></span><br><span class="line"><span class="attr">          autoconfigure:</span> <span class="string">ERROR</span></span><br></pre></td></tr></table></figure>

<h3 id="添加并修改-registry-conf-配置文件"><a href="#添加并修改-registry-conf-配置文件" class="headerlink" title="添加并修改 registry.conf 配置文件"></a>添加并修改 registry.conf 配置文件</h3><p>主要是将注册中心改为 nacos</p>
<figure class="highlight bash"><figcaption><span>/src/main/resources/registry.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  <span class="comment"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class="line">  <span class="built_in">type</span> = <span class="string">"nacos"</span></span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="string">"localhost:8848"</span></span><br><span class="line">    namespace = <span class="string">"public"</span></span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line">  <span class="comment"># file、nacos 、apollo、zk、consul、etcd3</span></span><br><span class="line">  <span class="built_in">type</span> = <span class="string">"file"</span></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="string">"localhost:8848"</span></span><br><span class="line">    namespace = <span class="string">""</span></span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加并修改-file-conf-配置文件，"><a href="#添加并修改-file-conf-配置文件，" class="headerlink" title="添加并修改 file.conf 配置文件，"></a>添加并修改 file.conf 配置文件，</h3><p>主要是修改自定义事务组名称</p>
<figure class="highlight bash"><figcaption><span>/src/main/resources/file.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">service &#123;</span><br><span class="line">  <span class="comment">#transaction service group mapping</span></span><br><span class="line">  vgroup_mapping.account-service-group=<span class="string">"default"</span></span><br><span class="line">  <span class="comment"># only support when registry.type=file, please don't set multiple addresses</span></span><br><span class="line">  default.grouplist = <span class="string">"127.0.0.1:8091"</span></span><br><span class="line">  <span class="comment"># disable seata</span></span><br><span class="line">  disableGlobalTransaction = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note danger">
            <p>vgroup_mapping.account-service-group=”default” 必须配置，不然会一直查找这个配置，找不到控制台会报ERROR，同一个事务组的名称必须一致，在这里所有微服务的事务组名称必须都是 <code>account-service-group</code>。</p><p>其他配置可以不写，找不到会使用默认配置</p>
          </div>

<p><img src="3.png" alt="ERROR"></p>
<hr>
<h3 id="在启动类中取消数据源的自动创建"><a href="#在启动类中取消数据源的自动创建" class="headerlink" title="在启动类中取消数据源的自动创建"></a>在启动类中取消数据源的自动创建</h3><p><code>exclude = DataSourceAutoConfiguration.class</code>，不去除就会报错。</p>
<figure class="highlight java"><figcaption><span>com.xiaotang.springaccount.SpringAccountApplication;</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = DataSourceAutoConfiguration.class)</span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.xiaotang.springaccount.dao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringAccountApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringAccountApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置-DataSourceProxyConfig-使用-Seata-对数据源进行代理"><a href="#配置-DataSourceProxyConfig-使用-Seata-对数据源进行代理" class="headerlink" title="配置 DataSourceProxyConfig 使用 Seata 对数据源进行代理"></a>配置 DataSourceProxyConfig 使用 Seata 对数据源进行代理</h3><figure class="highlight java"><figcaption><span>com.xiaotang.springaccount.config.DataSourceProxyConfig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProxyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mapper.xml 映射文件坐标</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mybatis.mapper-locations&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mapperLocations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProxy <span class="title">dataSourceProxy</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProxy(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">(DataSourceProxy dataSourceProxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver()</span><br><span class="line">                .getResources(mapperLocations));</span><br><span class="line">        <span class="comment">// 添加数据库拦截器</span></span><br><span class="line">        sqlSessionFactoryBean.setPlugins(<span class="keyword">new</span> Interceptor[]&#123;<span class="keyword">new</span> InsertInterceptor()&#125;);</span><br><span class="line">        sqlSessionFactoryBean.setTransactionFactory(<span class="keyword">new</span> SpringManagedTransactionFactory());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-GlobalTransactional-注解开启全局分布式事务"><a href="#使用-GlobalTransactional-注解开启全局分布式事务" class="headerlink" title="使用 @GlobalTransactional 注解开启全局分布式事务"></a>使用 @GlobalTransactional 注解开启全局分布式事务</h3><figure class="highlight java"><figcaption><span>com.xiaotang.springaccount.service.AccountService</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrdersClient ordersClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">add</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.insert(account);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 全局事务</span></span><br><span class="line">    <span class="meta">@GlobalTransactional</span></span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">addTest</span><span class="params">(Account account, Integer status)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 通过Feign调用order-server、storage-server接口</span></span><br><span class="line">        ordersClient.add(<span class="string">"banana"</span>, <span class="number">2</span>, <span class="number">1</span>, account.getUsername());</span><br><span class="line">        storageClient.add(<span class="string">"apple"</span>, <span class="number">3</span>);</span><br><span class="line">        Integer index = add(account);</span><br><span class="line">        <span class="keyword">if</span>(status == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"hello world"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给每个库都创建创建 <span class="label default">undo_log 表（日志回滚表 ）</span> ，文件在 <strong>seata/script/client/at/db/mysql.sql</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`undo_log`</span>(</span><br><span class="line">    <span class="string">`id`</span>            <span class="built_in">BIGINT</span>(<span class="number">20</span>)   <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'increment id'</span>,</span><br><span class="line">    <span class="string">`branch_id`</span>     <span class="built_in">BIGINT</span>(<span class="number">20</span>)   <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'branch transaction id'</span>,</span><br><span class="line">    <span class="string">`xid`</span>           <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'global transaction id'</span>,</span><br><span class="line">    <span class="string">`context`</span>       <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'undo_log context,such as serialization'</span>,</span><br><span class="line">    <span class="string">`rollback_info`</span> LONGBLOB     <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'rollback info'</span>,</span><br><span class="line">    <span class="string">`log_status`</span>    <span class="built_in">INT</span>(<span class="number">11</span>)      <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'0:normal status,1:defense status'</span>,</span><br><span class="line">    <span class="string">`log_created`</span>   DATETIME     <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'create datetime'</span>,</span><br><span class="line">    <span class="string">`log_modified`</span>  DATETIME     <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'modify datetime'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`ux_undo_log`</span> (<span class="string">`xid`</span>, <span class="string">`branch_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line">  AUTO_INCREMENT = <span class="number">1</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8 <span class="keyword">COMMENT</span> =<span class="string">'AT transaction mode undo table'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="启动服务功能演示"><a href="#启动服务功能演示" class="headerlink" title="启动服务功能演示"></a>启动服务功能演示</h2><div class="tabs" id="选项卡-2"><ul class="nav-tabs"><li class="tab active"><a href="#选项卡-2-1">seata-server</a></li><li class="tab"><a href="#选项卡-2-2">account-server</a></li><li class="tab"><a href="#选项卡-2-3">order-server</a></li><li class="tab"><a href="#选项卡-2-4">storage-server</a></li></ul><div class="tab-content"><div class="tab-pane active" id="选项卡-2-1"><p><img src="5-0.png" alt="seata-server"></p></div><div class="tab-pane" id="选项卡-2-2"><p><img src="5-1.png" alt="account-server"></p></div><div class="tab-pane" id="选项卡-2-3"><p><img src="5-2.png" alt="order-server"></p></div><div class="tab-pane" id="选项卡-2-4"><p><img src="5-3.png" alt="storage-server"></p></div></div></div>

<p>成功注册到seata</p>
<hr>
<p>当我在添加完所有的数据后，最后抛出一个RuntimeException，就会看到order-server和storage-server 最后回滚了操作。</p>
<div class="tabs" id="选项卡-2"><ul class="nav-tabs"><li class="tab active"><a href="#选项卡-2-1">order-server</a></li><li class="tab"><a href="#选项卡-2-2">storage-server</a></li></ul><div class="tab-content"><div class="tab-pane active" id="选项卡-2-1"><p><img src="6-1.png" alt="order-server"></p></div><div class="tab-pane" id="选项卡-2-2"><p><img src="6-2.png" alt="storage-server"></p></div></div></div>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://juejin.im/post/5ddddd75e51d45330c6aec6f" target="_blank" rel="noopener">Spring Alibaba Cloud使用Seata实现分布式事务，Nacos作为配置中心(一)</a></li>
</ul>
]]></content>
      <categories>
        <category>springcloud</category>
      </categories>
      <tags>
        <tag>seata</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-buff-cache</title>
    <url>/2020/01/10/2020-1-10-linux-buff-cache/</url>
    <content><![CDATA[<p>linux 硬盘缓存对执行性能的影响，linux不只是把你的内存吃了，</p>
<a id="more"></a>

<h2 id="清理内存"><a href="#清理内存" class="headerlink" title="清理内存"></a>清理内存</h2><p>我们可以使用特殊的文件 <code>/proc/sys/vm/drop_caches</code>，将 3 写入，我们就能清除硬盘缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          1504       1471         33          0         36        801</span><br><span class="line">-/+ buffers/cache:        633        871</span><br><span class="line">Swap:         2047          6       2041</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> 3 | sudo tee /proc/sys/vm/drop_caches </span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">$ free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          1504        763        741          0          0        134</span><br><span class="line">-/+ buffers/cache:        629        875</span><br><span class="line">Swap:         2047          6       2041</span><br></pre></td></tr></table></figure>

<h2 id="硬盘缓存对程序加载的影响"><a href="#硬盘缓存对程序加载的影响" class="headerlink" title="硬盘缓存对程序加载的影响"></a>硬盘缓存对程序加载的影响</h2><p>让我们制作两个测试程序，一个用 Python，一个用 Java。 Python 和 Java都带有相当大的运行时，必须加载这些运行时才能运行该应用程序。 这是磁盘缓存发挥其魔力的完美方案。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat Hello.java</span><br><span class="line">class Hello &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World! Regards, Java"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ javac Hello.java</span><br><span class="line"></span><br><span class="line">$ java Hello</span><br><span class="line">Hello World! Regards, Java</span><br></pre></td></tr></table></figure>

<p>我们先清除缓存，然后观察运行这两个程序需要多久</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> 3 | sudo tee /proc/sys/vm/drop_caches</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">$ free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1.8G        1.1G        559M        768K        106M        538M</span><br><span class="line">Swap:            0B          0B          0B</span><br><span class="line"></span><br><span class="line">$ time java Hello</span><br><span class="line">Hello World! Regards, Java</span><br><span class="line"></span><br><span class="line">real	0m0.350s</span><br><span class="line">user	0m0.056s</span><br><span class="line">sys	0m0.021s</span><br><span class="line"></span><br><span class="line">$ free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1.8G        1.1G        549M        768K        115M        534M</span><br><span class="line">Swap:            0B          0B          0B</span><br><span class="line"></span><br><span class="line">$ time java Hello</span><br><span class="line">Hello World! Regards, Java</span><br><span class="line"></span><br><span class="line">real	0m0.202s</span><br><span class="line">user	0m0.047s</span><br><span class="line">sys	0m0.015s</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>明显，第二次执行该程序的时间明显缩短了，而且 buff/cache 也变大了</p>
          </div>



<h2 id="硬盘缓存对文件读取速度的影响"><a href="#硬盘缓存对文件读取速度的影响" class="headerlink" title="硬盘缓存对文件读取速度的影响"></a>硬盘缓存对文件读取速度的影响</h2><p>我们先创建一个大文件，看看磁盘缓存如何影响我们读取它的速度。我们创建了一个200MB的文件，文件的大小可以自己进行判断。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> 3 | sudo tee /proc/sys/vm/drop_caches</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">$ free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1.8G        1.1G        568M        768K        103M        546M</span><br><span class="line">Swap:            0B          0B          0B</span><br><span class="line"></span><br><span class="line">$ dd <span class="keyword">if</span>=/dev/zero of=bigfile bs=1M count=200</span><br><span class="line">200+0 records <span class="keyword">in</span></span><br><span class="line">200+0 records out</span><br><span class="line">209715200 bytes (210 MB) copied, 0.483083 s, 434 MB/s</span><br><span class="line"></span><br><span class="line">$ ls -lh bigfile</span><br><span class="line">-rw-r--r-- 1 root root 200M Jan 10 10:39 bigfile</span><br><span class="line"></span><br><span class="line">$ free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1.8G        1.1G        362M        768K        310M        529M</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>

<p>由于文件刚刚被写入，因此它将进入磁盘缓存。 200MB的文件在“缓存”中引起了200MB的增加。 让我们读它，清除缓存，然后再次读以查看它有多快：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ time cat bigfile &gt; /dev/null</span><br><span class="line"></span><br><span class="line">real	0m0.164s</span><br><span class="line">user	0m0.001s</span><br><span class="line">sys	0m0.053s</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> 3 | sudo tee /proc/sys/vm/drop_caches</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">$ time cat bigfile &gt; /dev/null</span><br><span class="line"></span><br><span class="line">real	0m1.831s</span><br><span class="line">user	0m0.002s</span><br><span class="line">sys	0m0.079s</span><br></pre></td></tr></table></figure>

<div class="note danger">
            <p>读取的速度快了也有11倍了。</p>
          </div>

<blockquote>
<p>Linux磁盘缓存非常简单。 它使用备用内存来大大提高磁盘访问速度，而不会占用应用程序任何内存。 在Linux上完全使用的ram存储是有效的硬件使用，而不是警告信号。</p>
</blockquote>
<a href="/2020/01/10/2020-1-10-file-descriptor/" title="对 > /dev/null 的延伸认识">对 > /dev/null 的延伸认识</a>

<hr>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>部分翻译自 <a href="https://www.linuxatemyram.com/play.html" target="_blank" rel="noopener">Experiments and fun with the Linux disk cache</a></li>
</ul>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>日志文件查看搜索</title>
    <url>/2020/01/09/2020-1-9-linux-search/</url>
    <content><![CDATA[<p>筛查日志这件事，根据情况不同，采用的方法也会有所不同。比如日志很小，至多几千行这样的情况，我们完全可以使用一般的文本编辑器打开，直接查找所需内容即可。而像一些“大型”日志，尤其是长时间稳定性测试所产生的日志，动辄可能会有几个g，几十g，再用编辑器打开显然不够现实。</p>
<a id="more"></a>

<h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><blockquote>
<p> grep命令是linux下最好用的命令之一。grep用来筛选内容的速度应该是最快的，这点没有之一，大到几个g的文件，几秒就可以完成对单一关键词的筛取，可谓是查找大文件的“神器”，而且grep命令格式十分简单，常用的搜索功能只需三个参数即可完成。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep [option] patten file</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>缩写</th>
<th>全称</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>–text</td>
<td>不要忽略二进制的数据。</td>
</tr>
<tr>
<td>-A &lt;显示行数&gt;</td>
<td>–after-context=&lt;显示行数&gt;</td>
<td>显示匹配行之<span class="label danger">后</span>的n行的内容</td>
</tr>
<tr>
<td>-b</td>
<td>–byte-offset</td>
<td>在匹配行之前，标示出该行第一个字符的编号。</td>
</tr>
<tr>
<td>-B &lt;显示行数&gt;</td>
<td>–before-context=&lt;显示行数&gt;</td>
<td>显示匹配行之<span class="label danger">前</span>的n行的内容</td>
</tr>
<tr>
<td>-c</td>
<td>–count</td>
<td>统计符合样式的列数</td>
</tr>
<tr>
<td>-C &lt;显示行数&gt;</td>
<td>–context=&lt;显示行数&gt;或 -&lt;显示行数&gt;</td>
<td>显示匹配行<span class="label danger">前后</span>前后的n行的内容</td>
</tr>
<tr>
<td>-i</td>
<td>–ignore-case</td>
<td>忽略字符大小写差异</td>
</tr>
<tr>
<td>-n</td>
<td>–line-number</td>
<td>显示符合样式的行号</td>
</tr>
<tr>
<td>-r</td>
<td>–recursive</td>
<td>遍历文件夹查找</td>
</tr>
<tr>
<td>-l</td>
<td>–file-with-matches</td>
<td>列出文件内容符合指定的样式的文件名称</td>
</tr>
<tr>
<td>-L</td>
<td>–files-without-match</td>
<td>列出文件内容<span class="label danger">不符合</span>指定的样式的文件名称。</td>
</tr>
<tr>
<td>-v</td>
<td>–revert-match</td>
<td>显示不包含匹配文本的所有行</td>
</tr>
</tbody></table>
<div class="note danger">
            <p>如果 grep 命令打印 Binary file catalina.out matches，则需要加上 -a 参数</p>
          </div>



<table>
<thead>
<tr>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td><em>快速，可批量筛选出含有关键词的全部文本行。</em></td>
<td><em>如果关键词在文本中出现较多，无法快速定位至某一次关键词出现的位置，依然会出现刷屏效果。</em></td>
</tr>
</tbody></table>
<h2 id="more-less-命令"><a href="#more-less-命令" class="headerlink" title="more / less 命令"></a>more / less 命令</h2><blockquote>
<p>more和less命令都是用分页查看文本的方式，每次只显示一定行的文本，避免像cat那样被大量的文字快速刷屏，同时支持搜索，可以在文件中搜索某个关键词并实现定位。</p>
</blockquote>
<ul>
<li><strong>less</strong> 似乎更适合对于日志的筛查，可以进行向前或向后<strong>双方向的搜索</strong>，并且可以按方向键<strong>逐行前后滚动</strong></li>
<li><strong>more</strong> 只支持向后查找和向后翻页或滚动。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">more/less file</span><br></pre></td></tr></table></figure>

<p><strong>搜索关键字：</strong>输入命令后按”/“，输入关键词后回车即可定位至关键词第一次出现的位置，此时按 <strong>n键</strong> 可切换至下一次出现的位置，使用less时，按 <strong>N键</strong> 返回上一次出现的位置。</p>
<table>
<thead>
<tr>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td><em>可以自动定位关键词出现的位置，并显示关键词前后的文本内容，使用起来比较方便。</em></td>
<td><em>搜索速度较慢，文件特别大的话要等很久才能搜索到。</em></td>
</tr>
</tbody></table>
<h2 id="head-tail-命令"><a href="#head-tail-命令" class="headerlink" title="head / tail 命令"></a><strong>head / tail 命令</strong></h2><blockquote>
<p>head和tail命令是功能近似而作用位置相反的两个命令，head命令用来从开头读取文本，tail命令则是从尾部读取文本。当我们不关注日志中间的一大坨内容，只关注开头或结尾的部分内容时，head和tail命令可以说是最好的解决方案。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示开头到第n行</span></span><br><span class="line">head -n file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从倒数第n行开始显示到末尾</span></span><br><span class="line">tail -n file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件开头第n行开始显示到末尾</span></span><br><span class="line">tail +n file</span><br></pre></td></tr></table></figure>

<p><strong>使用方法：</strong>设置需要从文件开头 / 结尾查找的行数（n），即可显示对应结果。</p>
<table>
<thead>
<tr>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td><em>方便实用，尤其是tail，可以从尾部读取文件。</em></td>
<td><em>单独使用不能查找关键词，需用管道结合 grep进行查找</em></td>
</tr>
</tbody></table>
<div class="note info">
            <p><strong>head / tail和 grep 结合使用</strong></p>
          </div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">head/tail -n file | grep pattern</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://cloud.tencent.com/developer/article/1484955" target="_blank" rel="noopener">大日志，看我如何对付你</a></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 配置</title>
    <url>/2020/01/08/2020-1-8-vim-config/</url>
    <content><![CDATA[<p>在阿里云服务器用 vim 修改配置文件时，发现没有显示行号，缩进还不是4个，而且鼠标也不能用，还有些别的问题，用起来不太方便，于是就对 vim 编辑器进行些基础的配置。</p>
<a id="more"></a>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置所有用户的vim配置文件</span></span><br><span class="line">vim /etc/vimrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动加载配置</span></span><br><span class="line"><span class="built_in">source</span> .vimrc</span><br></pre></td></tr></table></figure>

<h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示行号</span></span><br><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="comment"># 鼠标可用</span></span><br><span class="line"><span class="built_in">set</span> mouse=a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动时隐去援助提示</span></span><br><span class="line"><span class="built_in">set</span> shortmess=atI</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法高亮</span></span><br><span class="line">syntax on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用vim的键盘模式</span></span><br><span class="line"><span class="built_in">set</span> nocompatible</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不需要备份</span></span><br><span class="line"><span class="built_in">set</span> nobackup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有保存或文件只读时弹出确认</span></span><br><span class="line"><span class="built_in">set</span> confirm</span><br><span class="line"></span><br><span class="line"><span class="comment"># tab缩进</span></span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="built_in">set</span> smarttab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件自动检测外部更改</span></span><br><span class="line"><span class="built_in">set</span> autoread</span><br><span class="line"></span><br><span class="line"><span class="comment"># c文件自动缩进</span></span><br><span class="line"><span class="built_in">set</span> cindent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动对齐</span></span><br><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 智能缩进</span></span><br><span class="line"><span class="built_in">set</span> smartindent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高亮查找匹配</span></span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 背景色</span></span><br><span class="line"><span class="built_in">set</span> background=dark</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示匹配</span></span><br><span class="line"><span class="built_in">set</span> showmatch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示标尺，就是在右下角显示光标位置</span></span><br><span class="line"><span class="built_in">set</span> ruler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除vi的一致性</span></span><br><span class="line"><span class="built_in">set</span> nocompatible</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许折叠</span></span><br><span class="line"><span class="built_in">set</span> foldenable</span><br><span class="line"></span><br><span class="line"><span class="comment">#####################设置折叠#####################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据语法折叠</span></span><br><span class="line"><span class="built_in">set</span> fdm=syntax</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动折叠</span></span><br><span class="line"><span class="built_in">set</span> fdm=manual</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置键盘映射，通过空格设置折叠</span></span><br><span class="line">nnoremap &lt;space&gt; @=((foldclosed(line(<span class="string">'.'</span>)&lt;0)?<span class="string">'zc'</span>:<span class="string">'zo'</span>))&lt;CR&gt;</span><br><span class="line"><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></span><br><span class="line"><span class="comment"># 不要闪烁</span></span><br><span class="line"><span class="built_in">set</span> novisualbell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动显示状态行</span></span><br><span class="line"><span class="built_in">set</span> laststatus=2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浅色显示当前行</span></span><br><span class="line">autocmd InsertLeave * se nocul</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用浅色高亮当前行</span></span><br><span class="line">autocmd InsertEnter * se cul</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示输入的命令</span></span><br><span class="line"><span class="built_in">set</span> showcmd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被分割窗口之间显示空白</span></span><br><span class="line"><span class="built_in">set</span> fillchars=vert:/</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> fillchars=stl:/</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> fillchars=stlnc:/</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ul>
<li><a href="https://www.zhihu.com/question/19989337/answer/168444287" target="_blank" rel="noopener">有哪些编程必备的 Vim 配置？ - 地球的外星人君的回答 - 知乎</a></li>
</ul>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx反向代理(Reverse Proxy)</title>
    <url>/2020/01/08/2020-1-8-nginx-reverse-Proxy/</url>
    <content><![CDATA[<p>反向代理（Reverse Proxy）方式是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p>
<a id="more"></a>

<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>正向代理</strong>：一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。</p>
<p><strong>反向代理</strong>：以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p>
<p><img src="1.png" alt="正向代理"></p>
<p><img src="2.png" alt="反向代理"></p>
<p>简单来说，</p>
<ul>
<li><p>正向代理就是<strong>代理服务器</strong>代理的是多个客户端</p>
</li>
<li><p>反向代理就是代理服务器代理的是多个服务端</p>
</li>
</ul>
<h2 id="反向代理的好处"><a href="#反向代理的好处" class="headerlink" title="反向代理的好处"></a>反向代理的好处</h2><ul>
<li>可以起到保护网站安全的作用，因为任何来自Internet的请求都必须先经过代理服务器。</li>
<li>通过缓存静态资源，加速Web请求。</li>
<li>实现负载均衡。顺便说下，目前市面上，主流的负载均衡方案，硬件设备有F5，软件方案有四层负载均衡的LVS，七层负载均衡的Nginx、Haproxy等。</li>
</ul>
<h2 id="nginx反向代理实战"><a href="#nginx反向代理实战" class="headerlink" title="nginx反向代理实战"></a>nginx反向代理实战</h2><p>在 http 节点下，添加 <code>upstream</code> 节点，添加 tomcat 集群</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	</span><br><span class="line">	upstream tomcats &#123;</span><br><span class="line">       <span class="built_in"> server </span>127.0.0.1:9001;</span><br><span class="line">       <span class="built_in"> server </span>127.0.0.1:9002;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>upstream 还可以为每个设备设置状态值，这些状态值的含义分别如下：</p>
<ul>
<li>down：表示单前的server暂时不参与负载.</li>
<li>weight：默认为1.weight越大，负载的权重就越大。</li>
<li>max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误.</li>
<li>fail_timeout: max_fails次失败后，暂停的时间。</li>
<li>backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</li>
</ul>
<p><strong>例子：</strong></p>
<pre><code>upstream tomcats{
    server 127.0.0.1:9001 down;
    server 127.0.0.1:9002 backup;
    server 127.0.0.1:9003 weight=2;
    server 127.0.0.1:9004 max_fails=2 fail_timeout=60s;   
}</code></pre><div class="note danger">
            <p>注意 “=” 前后不能有空格</p>
          </div>

<p>负载均衡分配策略：</p>
<ul>
<li><p>nano（轮询）：upstream按照轮询（默认）方式进行负载，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。虽然这种方式简便、成本低廉。但缺点是：可靠性低和负载分配不均衡。</p>
</li>
<li><p>weight（权重）：指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。总和为10</p>
</li>
<li><p>ip_hash（访问ip）：每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p>
<p>配置只需要在upstream中加入 ip_hash; 即可。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">      ip_hash;</span><br><span class="line">     <span class="built_in"> server </span>127.0.0.1:9001;</span><br><span class="line">     <span class="built_in"> server </span>127.0.0.1:9002;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>fair（第三方）：按后端服务器的响应时间来分配请求，响应时间短的优先分配。与weight分配策略类似。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">     <span class="built_in"> server </span>127.0.0.1:9001;</span><br><span class="line">     <span class="built_in"> server </span>127.0.0.1:9002;</span><br><span class="line">      fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p>在http server 节点下配置location为Tomcat集群</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">	<span class="section">server</span> &#123;</span><br><span class="line">		<span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass_header</span> Server;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Scheme <span class="variable">$scheme</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动nginx并访问"><a href="#启动nginx并访问" class="headerlink" title="启动nginx并访问"></a>启动nginx并访问</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./sbin/nginx</span><br></pre></td></tr></table></figure>

<div class="tabs" id="选项卡-2"><ul class="nav-tabs"><li class="tab active"><a href="#选项卡-2-1">server-01</a></li><li class="tab"><a href="#选项卡-2-2">server-02</a></li><li class="tab"><a href="#选项卡-2-3">server-03</a></li></ul><div class="tab-content"><div class="tab-pane active" id="选项卡-2-1"><p><img src="3.png" alt="server-01"></p></div><div class="tab-pane" id="选项卡-2-2"><p><img src="4.png" alt="server-02"></p></div><div class="tab-pane" id="选项卡-2-3"><p><img src="5.png" alt="server-03"></p></div></div></div>





<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://juejin.im/entry/57fb07b0816dfa0056c0ada8" target="_blank" rel="noopener">Nginx 反向代理详解</a></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot mybatis拦截器interceptor配置</title>
    <url>/2020/01/07/2020-1-7-mybatis-interceptor/</url>
    <content><![CDATA[<p>在往数据库中插入数据时，如果 <em>uuid<em>、</em>createTime<em>、</em>updateTime</em> 没有赋值，则程序自动添加一个值，更新数据时则自动更新 <em>updateTime</em></p>
<a id="more"></a>

<h2 id="数据库连接配置"><a href="#数据库连接配置" class="headerlink" title="数据库连接配置"></a>数据库连接配置</h2><figure class="highlight yaml"><figcaption><span>/resources/application.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8020</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">order-server</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/order?useUnicode=true&amp;amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:/mapper/*.xml</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.xiaotang.springorder</span></span><br><span class="line"><span class="comment">#  configuration:</span></span><br><span class="line"><span class="comment">#    interceptors:</span></span><br><span class="line"><span class="comment">#      - com.xiaotang.springorder.interceptor.InsertInterceptor</span></span><br></pre></td></tr></table></figure>

<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>Executor 提供的方法中，update 包含了 新增，修改和删除类型，无法直接区分，需要借助 <code>MappedStatement</code> 类的属性 <code>SqlCommandType</code> 来进行判断，该类包含了所有的操作类型</p>
<figure class="highlight java"><figcaption><span>SqlCommandType.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SqlCommandType &#123;</span><br><span class="line">    UNKNOWN, INSERT, UPDATE, DELETE, SELECT, FLUSH;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>毕竟新增和修改的场景，有些参数是有区别的，比如<strong>创建时间</strong>和<strong>更新时间</strong>，<code>update</code> 时是无需兼顾创建时间字段的。</p>
<figure class="highlight java"><figcaption><span>拦截器中获取sql命令类型和参数</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取MappedStatement实例, 并获取当前SQL命令类型</span></span><br><span class="line">MappedStatement ms = (MappedStatement) invocation.getArgs()[<span class="number">0</span>];</span><br><span class="line">SqlCommandType commandType = ms.getSqlCommandType();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取当前正在被操作的类, 有可能是Java Bean, 也可能是普通的操作对象, 比如普通的参数传递</span></span><br><span class="line"><span class="comment">// 普通参数, 即是 @Param 包装或者原始 Map 对象, 普通参数会被 Mybatis 包装成 Map 对象</span></span><br><span class="line"><span class="comment">// 即是 org.apache.ibatis.binding.MapperMethod$ParamMap</span></span><br><span class="line">Object parameter = invocation.getArgs()[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 获取拦截器指定的方法类型, 通常需要拦截 update</span></span><br><span class="line">String methodName = invocation.getMethod().getName();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>/src/main/java/com.xiaotang.springorder.interceptor</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Intercepts</span>(&#123;</span><br><span class="line">        <span class="meta">@Signature</span>(type = Executor.class, method = <span class="string">"update"</span>, args = &#123;MappedStatement.class, Object.class &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object[] objects = invocation.getArgs();</span><br><span class="line">        MappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[<span class="number">0</span>];</span><br><span class="line">        String commandType =  mappedStatement.getSqlCommandType().name();</span><br><span class="line">        Object object = objects[<span class="number">1</span>];</span><br><span class="line">        BeanWrapper beanWrapper = <span class="keyword">new</span> BeanWrapperImpl(object);</span><br><span class="line">        PropertyDescriptor[] descriptors = beanWrapper.getPropertyDescriptors();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"INSERT"</span>.equals(commandType)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (PropertyDescriptor descriptor : descriptors) &#123;</span><br><span class="line">                String filedName = descriptor.getName();</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">"class"</span>.equals(filedName) &amp;&amp; !<span class="string">"empty"</span>.equals(filedName)) &#123;</span><br><span class="line">                    Field field = FieldUtils.getField(object.getClass(), filedName, <span class="keyword">true</span>);</span><br><span class="line">                    UUID uuid = field.getAnnotation(UUID.class);</span><br><span class="line">                    CreateTime createTime = field.getAnnotation(CreateTime.class);</span><br><span class="line">                    UpdateTime updateTime = field.getAnnotation(UpdateTime.class);</span><br><span class="line">                    <span class="keyword">if</span> (uuid != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(beanWrapper.getPropertyValue(filedName)==<span class="keyword">null</span> || <span class="string">""</span>.equals(beanWrapper.getPropertyValue(filedName))) &#123;</span><br><span class="line">                            beanWrapper.setPropertyValue(filedName, java.util.UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (createTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        beanWrapper.setPropertyValue(filedName, Calendar.getInstance().getTime());</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (updateTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        beanWrapper.setPropertyValue(filedName, Calendar.getInstance().getTime());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"UPDATE"</span>.equals(commandType))&#123;</span><br><span class="line">            <span class="keyword">for</span> (PropertyDescriptor descriptor : descriptors) &#123;</span><br><span class="line">                String filedName = descriptor.getName();</span><br><span class="line">                <span class="keyword">if</span>(!<span class="string">"class"</span>.equals(filedName)&amp;&amp;!<span class="string">"empty"</span>.equals(filedName))&#123;</span><br><span class="line">                    Field field=  FieldUtils.getField(object.getClass(), filedName, <span class="keyword">true</span>);</span><br><span class="line">                    UpdateTime updateTime = field.getAnnotation(UpdateTime.class);</span><br><span class="line">                    <span class="keyword">if</span>(updateTime!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        beanWrapper.setPropertyValue(filedName, Calendar.getInstance().getTime());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        objects[<span class="number">1</span>] = beanWrapper.getWrappedInstance();</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Executor) &#123;</span><br><span class="line">            <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>这样配置好拦截器并不会被springboot读取，还需要加一个配置类，将拦截器以bean的形式写入</p>
<figure class="highlight java"><figcaption><span>/src/main/java/com.xiaotang.springorder.interceptor</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">InsertInterceptor <span class="title">insertInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InsertInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p><a href="https://segmentfault.com/a/1190000017393523" target="_blank" rel="noopener">Mybatis Interceptor 拦截器</a></p>
</li>
<li><p><a href="https://unclecatmyself.github.io/2019/01/19/propertyDescriptor/" target="_blank" rel="noopener">关于属性描述符PropertyDescriptor</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>interceptor</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Gateway和Nacos实现动态路由</title>
    <url>/2019/12/26/2019-12-27-springcloud-nacos-gateway-dynamic-config/</url>
    <content><![CDATA[<p>网关中有两个重要的概念，那就是路由配置和路由规则，路由配置是指配置某请求路径路由到指定的目的地址。而路由规则是指匹配到路由配置之后，再根据路由规则进行转发处理。<br>Spring Cloud Gateway作为所有请求流量的入口，在实际生产环境中为了保证高可靠和高可用，尽量避免重启,需要实现Spring Cloud Gateway动态路由配置。</p>
<a id="more"></a>

<p>Spring Cloud Gateway的官方文档并没有讲如何动态配置，查看 Spring Cloud Gateway的源码，发现<code>在org.springframework.cloud.gateway.actuate.GatewayControllerEndpoint</code>类中提供了动态配置的Rest接口，但是<code>需要开启Gateway的端点</code>，而且提供的功能不是很强大。通过参考和 <code>GatewayControllerEndpoint</code> 相关的代码，可以自己编码实际动态路由配置。</p>
<h2 id="用IDE新建Maven工程"><a href="#用IDE新建Maven工程" class="headerlink" title="用IDE新建Maven工程"></a>用IDE新建Maven工程</h2><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaotang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springcloud-gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot Gateway<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud-alibaba-dependencies.version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-alibaba-dependencies.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba-dependencies.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>Gateway</tag>
        <tag>Spring Cloud</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloud 配置gateway网关</title>
    <url>/2019/12/26/2019-12-26-springcloud-gateway/</url>
    <content><![CDATA[<p>概述：Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p>
<p>Spring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Netflix Zuul，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全、监控、埋点和限流等。</p>
<a id="more"></a>



<p>Spring Cloud Gateway 的特征：</p>
<ul>
<li>基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0</li>
<li>动态路由</li>
<li>Predicates 和 Filters 作用于特定路由</li>
<li>集成 Hystrix 断路器</li>
<li>集成 Spring Cloud DiscoveryClient</li>
<li>易于编写的 Predicates 和 Filters</li>
<li>限流</li>
<li>路径重写</li>
</ul>
<h2 id="vs-Netflix-Zuul"><a href="#vs-Netflix-Zuul" class="headerlink" title="vs Netflix Zuul"></a>vs Netflix Zuul</h2><p>Zuul 基于 Servlet 2.5（使用 3.x），使用阻塞 API，它不支持任何长连接，如 WebSockets。而 Spring Cloud Gateway 建立在 Spring Framework 5，Project Reactor 和 Spring Boot 2 之上，使用非阻塞 API，支持 WebSockets，并且由于它与 Spring 紧密集成，所以将会是一个更好的开发体验。</p>
<p>要说缺点，其实 Spring Cloud Gateway 还是有的。目前它的文档还不是很完善，官方文档有许多还处于 TODO 状态，网络上关于它的文章也还比较少。如果你决定要使用它，那么你必须得有耐心通过自己阅读源码来解决可能遇到的问题。</p>
<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul>
<li><strong>Route（路由）</strong>：这是网关的基本构建块。它由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配。</li>
<li><strong>Predicate（断言）</strong>：这是一个 <a href="http://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html" target="_blank" rel="noopener">Java 8 的 Predicate</a>。输入类型是一个 <a href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html" target="_blank" rel="noopener"><code>ServerWebExchange</code></a>。我们可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。</li>
<li><strong>Filter（过滤器）</strong>：这是 <code>org.springframework.cloud.gateway.filter.GatewayFilter</code> 的实例，我们可以使用它修改请求和响应。</li>
</ul>
<p><img src="1.png" alt="Gateway 流程"></p>
<p>客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。<br>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>新建一个标准的 Spring Boot 工程，命名为 gateway，然后在 pom.xml 中引入以下依赖坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml 配置文件内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9010</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-gateway</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        locator:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line">      <span class="comment">#在注册中心中进行注册</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8001/eureka/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>spring.cloud.gateway.discovery.locator.enabled</code>：是否与服务注册于发现组件进行结合，通过 serviceId 转发到具体的服务实例。默认为 <code>false</code>，设为 <code>true</code> 便开启通过服务中心的自动根据 serviceId 创建路由的功能。</li>
<li>访问这个<code>localhost:9010/SERVER-01/open/index</code>就相当于访问SERVER-01上的 <code>/open/index</code> 路径</li>
</ul>
<p><img src="2.png" alt="Eureka Server"></p>
<hr>
<p>也可以为每个服务单独进行配置，只需修改下 <code>application.yml</code> 即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9010</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-gateway</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">        - id:</span> <span class="string">server-01-route</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">lb://SERVER-01</span></span><br><span class="line"><span class="attr">          predicates:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Path=/server-01/**</span></span><br><span class="line">          <span class="comment"># 前缀过滤，默认配置下，我们的请求路径是 http://localhost:9010/service-01/** 这时会路由到指定的服务</span></span><br><span class="line">          <span class="comment"># 此处配置去掉1个路径前缀，再配置上面的 Path=/server-01/**，就能按照 http://localhost:9000/server-01/** 的方式访问了</span></span><br><span class="line"><span class="attr">          filters:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">StripPrefix=1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line">      <span class="comment">#在注册中心中进行注册</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8001/eureka/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>重点</strong>是需要设置 filters 的 StripPrefix=1，此处配置去掉1个路径前缀。这样访问这个<code>localhost:9010/SERVER-01/open/index</code>就相当于访问SERVER-01上的 <code>/open/index</code> 路径</li>
</ul>
<hr>
<p>参考自 </p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/90116218" target="_blank" rel="noopener">Spring Cloud gateway 网关服务 一</a></li>
<li><a href="https://windmt.com/2018/05/07/spring-cloud-13-spring-cloud-gateway-router/" target="_blank" rel="noopener">Spring Cloud（十三）：Spring Cloud Gateway（路由）</a></li>
</ul>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
        <tag>Gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>Github的Contributions没有增加的问题</title>
    <url>/2019/12/18/2019-12-18-github-contributions/</url>
    <content><![CDATA[<p>向Github提交代码的时候，发现自己的Contributions 并没有增加，原来是commit的邮件地址必须与github相一致，这也是为什么我的Commit没有被记入Contributions 和不显示头像的原因。</p>
<a id="more"></a>

<p>我们进入到git仓库中，使用 <code>git log</code> 查看每次提交的日志，就会发现用户名和邮箱并没有和Github上保持一致。我们先将commit 时的用户名和邮箱地址改为与Github注册时的一致，防止以后再出现这样的问题，我们可以通过如下的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name &lt;your username <span class="keyword">for</span> Github&gt;</span><br><span class="line">git config --global user.email &lt;your email address <span class="keyword">for</span> Github&gt;</span><br></pre></td></tr></table></figure>

<p>修改后，你再向Github提交代码时，就会看到该commit被记入Contributions了。</p>
<p>对于已经提交过的代码，也还能修改提交的用户名和邮箱地址。</p>
<ul>
<li>进入仓库地址（如果本地没有，就从Github clone下来）</li>
<li>在git仓库根目录新建一个脚本文件 <code>script.sh</code>，并将下面的内容复制进去，修改掉 <strong>&lt;&gt;</strong> 里面的内容，</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git filter-branch --env-filter <span class="string">'</span></span><br><span class="line"><span class="string">OLD_EMAIL=&lt;旧邮箱地址&gt;</span></span><br><span class="line"><span class="string">CORRECT_NAME=&lt;正确用户名&gt;</span></span><br><span class="line"><span class="string">CORRECT_EMAIL=&lt;正确邮箱地址&gt;</span></span><br><span class="line"><span class="string">if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">export GIT_COMMITTER_NAME="$CORRECT_NAME"</span></span><br><span class="line"><span class="string">export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">export GIT_AUTHOR_NAME="$CORRECT_NAME"</span></span><br><span class="line"><span class="string">export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"</span></span><br><span class="line"><span class="string">fi'</span> --tag-name-filter cat -- --branches --tags</span><br></pre></td></tr></table></figure>

<p>然后执行script.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh script.sh</span><br></pre></td></tr></table></figure>

<p>会有一条条commit修改的进度，等待修改完就行了。 </p>
<p>再输入 <code>git log</code> 查看commit的用户名和邮箱地址是否已经变更了，</p>
<p><img src="1.png" alt="sh script.sh"></p>
<p>若是已经成功变更，则再提交到Github上，以前尘封的commit便会重新出现了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --force --tags origin master</span><br></pre></td></tr></table></figure>

<p>参考自 <a href="https://blog.csdn.net/Liven_Zhu/article/details/80800162" target="_blank" rel="noopener">解决Github的Contribution没有增加的问题</a>，感谢！！！</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>服务消费者Feign访问springcloud服务提供者</title>
    <url>/2019/12/17/2019-12-17-springcloud-feignclient/</url>
    <content><![CDATA[<p><code>Feign</code>是一个声明式的伪<code>Http</code>客户端，它使得写<code>Http</code>客户端变得更简单。</p>
<p>使用<code>Feign</code>，只需要创建一个接口并注解，它具有可插拔的注解特性，可使用<code>Feign</code> 注解和<code>JAX-RS</code>注解，<code>Feign</code>支持可插拔的编码器和解码器，<code>Feign</code>默认集成了<code>Ribbon</code>，并和<code>Eureka</code>结合，默认实现了负载均衡的效果。</p>
<a id="more"></a>

<h3 id="Feign-简介"><a href="#Feign-简介" class="headerlink" title="Feign 简介"></a>Feign 简介</h3><p><strong><code>Feign</code> 具有如下特性：</strong></p>
<ul>
<li>可插拔的注解支持，包括<code>Feign</code>注解和<code>JAX-RS</code>注解</li>
<li>支持可插拔的<code>HTTP</code>编码器和解码器</li>
<li>支持<code>Hystrix</code>和它的<code>Fallback</code></li>
<li>支持<code>Ribbon</code>的负载均衡</li>
<li>支持<code>HTTP</code>请求和响应的压缩<code>Feign</code>是一个声明式的<code>Web Service</code>客户端，它的目的就是让<code>Web Service</code>调用更加简单。它整合了<code>Ribbon</code>和<code>Hystrix</code>，从而不再需要显式地使用这两个组件。<code>Feign</code>还提供了<code>HTTP</code>请求的模板，通过编写简单的接口和注解，就可以定义好<code>HTTP</code>请求的参数、格式、地址等信息。接下来，<code>Feign</code>会完全代理<code>HTTP</code>的请求，我们只需要像调用方法一样调用它就可以完成服务请求。</li>
</ul>
<p>简而言之：<code>Feign</code>能干<code>Ribbon</code>和<code>Hystrix</code>的事情，但是要用<code>Ribbon</code>和<code>Hystrix</code>自带的注解必须要引入相应的<code>jar</code>包才可以。</p>
<p>结构：</p>
<p><img src="1.png" alt></p>
<ul>
<li>springcloud  服务注册中心</li>
<li>springserver  服务提供者 （服务名：SERVER-01）</li>
<li>springclient  服务消费者</li>
</ul>
<blockquote>
<p>前一篇文章写过如何配置使用服务器注册中心，这一次主要是讲如何用 <em>Feign</em> 代替 <em>RestTemplate</em> 实现消费者访问提供者的接口</p>
<p><strong>服务提供者不需要修改任何代码，主要是对服务消费者进行改造。</strong></p>
</blockquote>
<h1 id="配置Feign消费者"><a href="#配置Feign消费者" class="headerlink" title="配置Feign消费者"></a>配置Feign消费者</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="开启Feign"><a href="#开启Feign" class="headerlink" title="开启Feign"></a>开启Feign</h2><p>在工程的启动类中,通过<code>@EnableFeignClients</code> 注解开启Feign的功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringclientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringclientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h2><p>通过<code>@FeignClient（&quot;服务名&quot;）</code>，来指定调用哪个服务。<br>比如在代码中调用了<code>SERVER-01</code>服务的 <code>/</code> 接口，<code>/</code> 就是调用：服务提供者项目：<code>springserver</code> 的 <code>index()</code> 方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springclient.consumers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"SERVER-01"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OpenClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"open/index"</span>)</span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getIndex</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> String age)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消费方法"><a href="#消费方法" class="headerlink" title="消费方法"></a>消费方法</h2><p>在Controller中调用提供者提供的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springclient.controllers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springclient.consumers.OpenClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"open"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpenController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OpenClient openClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getIndex</span><span class="params">(String name, String age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> openClient.getIndex(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8011</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">client-01</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line">    <span class="comment">#eureka主机名，会在控制页面中显示</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment">#eureka服务器页面中status的请求路径</span></span><br><span class="line"><span class="attr">    status-page-url:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/index</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line">      <span class="comment">#在注册中心中进行注册</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8001/eureka/</span></span><br></pre></td></tr></table></figure>

<h3 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h3><p><img src="2.png" alt="服务注册中心"></p>
<hr>
<p>参考自 <a href="https://segmentfault.com/a/1190000012312123" target="_blank" rel="noopener"><a href="https://segmentfault.com/a/1190000012312123" target="_blank" rel="noopener">Spring Cloud（四） 服务提供者 Eureka + 服务消费者 Feign</a></a></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
        <tag>feign</tag>
      </tags>
  </entry>
  <entry>
    <title>spring restTemplate调用提供者方法</title>
    <url>/2019/12/17/2019-12-17-springcloud-restTemplate/</url>
    <content><![CDATA[<blockquote>
<p> RestTemplate 简化了发起HTTP请求以及处理响应的过程，并且支持REST</p>
</blockquote>
<a id="more"></a>

<p>只需要引入spring-web包即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>先配置 <code>RestTemplate</code> 的 configuration 文件，</p>
<p>还要进行中文乱码的配置。</p>
<p><code>@LoadBalanced</code> 声明 该 restTemplate 开启负载均衡</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springclient.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.client.RestTemplateBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.StringHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplateBuilder()</span><br><span class="line">                .setConnectTimeout(Duration.ofSeconds(<span class="number">1</span>))</span><br><span class="line">                .setReadTimeout(Duration.ofSeconds(<span class="number">1</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 防止RestTemplate获取的中文乱码</span></span><br><span class="line">        restTemplate.getMessageConverters().add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span><br><span class="line"></span><br><span class="line">        StringHttpMessageConverter stringHttpMessageConverter = <span class="keyword">new</span> StringHttpMessageConverter(StandardCharsets.UTF_8);</span><br><span class="line">        stringHttpMessageConverter.setWriteAcceptCharset(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;MediaType&gt; mediaTypeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        mediaTypeList.add(MediaType.ALL);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; restTemplate.getMessageConverters().size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (restTemplate.getMessageConverters().get(i) <span class="keyword">instanceof</span> StringHttpMessageConverter) &#123;</span><br><span class="line">                restTemplate.getMessageConverters().remove(i);</span><br><span class="line">                restTemplate.getMessageConverters().add(i, stringHttpMessageConverter);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(restTemplate.getMessageConverters().get(i) <span class="keyword">instanceof</span> MappingJackson2HttpMessageConverter)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    ((MappingJackson2HttpMessageConverter) restTemplate.getMessageConverters().get(i)).setSupportedMediaTypes(mediaTypeList);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Controller</code>控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springclient.controllers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springclient.consumers.OpenClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.LinkedMultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/12/12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 15:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"open"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpenController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String name, String age)</span></span>&#123;</span><br><span class="line">        MultiValueMap&lt;String, Object&gt; map = <span class="keyword">new</span> LinkedMultiValueMap();</span><br><span class="line">        map.add(<span class="string">"name"</span>, name);</span><br><span class="line">        map.add(<span class="string">"age"</span>, age);</span><br><span class="line">        String response = restTemplate.postForObject(<span class="string">"http://SERVER-01/open/index"</span>, map, String.class);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>RestTemplate的post参数不能使用MultiValueMap而不能使用HashMap</li>
<li>SERVER-01 是服务提供者的服务名</li>
<li>还实现了<strong>简单轮询负载均衡（RoundRobin）</strong></li>
</ul>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
        <tag>restTemplate</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot 2.x springcloud Eureka 注册</title>
    <url>/2019/12/12/2019-12-12-springcloud-config/</url>
    <content><![CDATA[<p>基于SpringBoot 2.x的Spring Cloud服务注册与发现</p>
<p><a href="https://github.com/tangliangdong/springboot-integration" target="_blank" rel="noopener">github项目地址</a></p>
<a id="more"></a>

<h1 id="创建服务注册中心"><a href="#创建服务注册中心" class="headerlink" title="创建服务注册中心"></a>创建服务注册中心</h1><h2 id="创建springboot工程"><a href="#创建springboot工程" class="headerlink" title="创建springboot工程"></a>创建springboot工程</h2><p>1、在<strong><a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io</a></strong>中创建</p>
<p>2、选择Maven Project、Java、2.2.2，添加 <em>Eureka server</em> 依赖</p>
<p><img src="1.png" alt></p>
<p>3、点击Generate Project，解压下载的zip压缩包，再用Ideal打开。</p>
<h2 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h2><p>启动类添加 <code>@EnableEurekaServer</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcloudApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>1、修改pom.xml如下，基本上不需要修改什么，主要是引入<code>spring-cloud-starter-netflix-eureka-server</code>包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-integration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Eureka Server包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、在 <code>application.yml</code> 中添加以下配置 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8001</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line">    <span class="comment">#服务名</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">service-01</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line">    <span class="comment"># eureka主机名，会在控制页面中显示</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line">    <span class="comment"># 是否将自己注册到Eureka Server，默认为true</span></span><br><span class="line">    <span class="comment"># 由于当前这个应用就是Eureka Server，故而设为false</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 表示是否从Eureka Server获取注册信息，默认为true。因为这是一个单点的Eureka Server，</span></span><br><span class="line">    <span class="comment"># 不需要同步其他的Eureka Server节点的数据，故而设为false</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line">      <span class="comment"># eureka注册中心服务器地址</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>启动Spring Boot项目，在浏览器中输入<a href="http://localhost:8001" target="_blank" rel="noopener">http://localhost:8001</a> 即可进入Eureka主页面。</p>
<p><img src="3.png" alt="spring Eureka"></p>
<h1 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h1><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>提供者项目创建方式与注册中心服务器基本相同，只需做以下修改：</p>
<p>1、修改启动类注解@EnableEurekaServer为@EnableEurekaClient</p>
<p>2、将pom.xml文件中的  <code>spring-cloud-starter-netflix-eureka-server</code>换成 <code>spring-cloud-starter-netflix-eureka-client</code>，并加入如下的 <em>web</em> 包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-integration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springclient<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring cloud client<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不加入这个web包，该客户端启动会直接关闭 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Eureka Client 服务提供方的包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、修改application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">server-01</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line">    <span class="comment">#eureka主机名，会在控制页面中显示</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment">#eureka服务器页面中status的请求路径</span></span><br><span class="line"><span class="attr">    status-page-url:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/index</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line">      <span class="comment">#在注册中心中进行注册</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8001/eureka/</span></span><br></pre></td></tr></table></figure>

<h2 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h2><p>启动项目成功后，即可在服务中心 <strong>DS Replicas -&gt; Instances currently registered with Eureka</strong> 下发现此服务提供者了。</p>
<p><img src="4.png" alt="启动服务后"></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot分布式事务atomikos</title>
    <url>/2019/12/09/2019-12-9-springboot-atomikos/</url>
    <content><![CDATA[<p>场景：现有两个不同的数据库，一个叫db_user，一个叫db_account。一个操作，要同时更新db_user的user表和db_account的account表。失败，则两个表一起回滚。</p>
<a id="more"></a>

<h3 id="项目目录："><a href="#项目目录：" class="headerlink" title="项目目录："></a>项目目录：</h3><p><img src="1.png" alt="项目目录结构"></p>
<ul>
<li><em>com.example.atomikos.config</em>  数据源配置信息</li>
<li><em>com.example.atomikos.db1</em>  数据库db_user的业务和对象</li>
<li><em>com.example.atomikos.db2</em>  数据库db_account的业务和对象</li>
<li><em>resources/mapper/user</em>  db_user数据库的映射文件</li>
<li><em>resources/mapper/account</em>  db_account数据库的映射文件</li>
</ul>
<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atomikos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>atomikos<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mysql数据库连接包，需指定版本，不然会使用8.0的jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- alibaba的druid数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- jta-atomikos 分布式事务管理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jta-atomikos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.persistence-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!--在application.yml文件中使用@占位符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delimiters</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">delimiter</span>&gt;</span>@<span class="tag">&lt;/<span class="name">delimiter</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">delimiters</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">useDefaultDelimiters</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useDefaultDelimiters</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--防止ico二进制文件损坏--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">nonFilteredFileExtensions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nonFilteredFileExtension</span>&gt;</span>ico<span class="tag">&lt;/<span class="name">nonFilteredFileExtension</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">nonFilteredFileExtensions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开发环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 测试环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>test<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>连接的mysql数据库是5.7的，因此使用 <code>mysql-connector-java</code>的是5.1的版本，而mysql 6以上的数据库则需要使用 <code>mysql-connector-java</code>6.0以上，对应的驱动为 <code>com.mysql.cj.jdbc.Driver</code></p>
</blockquote>
<h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8091</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">@env@</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 该配置节点为独立的节点，不是在在spring的节点下</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapping/*/*.xml</span>  <span class="comment">#注意：一定要对应mapper映射xml文件的所在路径</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.example.atomikos.model</span>  <span class="comment"># 注意：对应实体类的路径</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line"><span class="attr">    log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#控制台打印sql</span></span><br></pre></td></tr></table></figure>

<h3 id="application-dev-yml"><a href="#application-dev-yml" class="headerlink" title="application-dev.yml"></a>application-dev.yml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 开发环境配置</span></span><br><span class="line"><span class="attr">  profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      one:</span>  <span class="comment">#数据源1</span></span><br><span class="line"><span class="attr">        driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">jdbc:mysql://116.62.14.208:3306/db_user?useUnicode=true&amp;amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">        username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">        password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="comment">#初始化时建立物理连接的个数</span></span><br><span class="line"><span class="attr">        initialSize:</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#池中最大连接数</span></span><br><span class="line"><span class="attr">        maxActive:</span> <span class="number">20</span></span><br><span class="line">        <span class="comment">#最小空闲连接</span></span><br><span class="line"><span class="attr">        minIdle:</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#获取连接时最大等待时间，单位毫秒</span></span><br><span class="line"><span class="attr">        maxWait:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment">#有两个含义：</span></span><br><span class="line">        <span class="comment">#1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span></span><br><span class="line">        <span class="comment">#2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</span></span><br><span class="line"><span class="attr">        timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment">#连接保持空闲而不被驱逐的最小时间，单位是毫秒</span></span><br><span class="line"><span class="attr">        minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">        <span class="comment">#使用该SQL语句检查链接是否可用。如果validationQuery=null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。</span></span><br><span class="line"><span class="attr">        validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">        <span class="comment">#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line"><span class="attr">        testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span></span><br><span class="line"><span class="attr">        testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment">#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span></span><br><span class="line"><span class="attr">        testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line"><span class="attr">        filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">        <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">        <span class="comment">#connectionProperties.druid.stat.mergeSql: true</span></span><br><span class="line">        <span class="comment">#connectionProperties.druid.stat.slowSqlMillis: 5000</span></span><br><span class="line">        <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br><span class="line">        <span class="comment">#useGlobalDataSourceStat: true</span></span><br><span class="line">        <span class="comment">#default-auto-commit: true 默认</span></span><br><span class="line">        <span class="comment">#default-auto-commit: false</span></span><br><span class="line"><span class="attr">      two:</span> <span class="comment">#数据源2</span></span><br><span class="line"><span class="attr">        driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">jdbc:mysql://116.62.14.208:3306/db_account?useUnicode=true&amp;amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">        username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">        password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="comment">#初始化时建立物理连接的个数</span></span><br><span class="line"><span class="attr">        initialSize:</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#池中最大连接数</span></span><br><span class="line"><span class="attr">        maxActive:</span> <span class="number">20</span></span><br><span class="line">        <span class="comment">#最小空闲连接</span></span><br><span class="line"><span class="attr">        minIdle:</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#获取连接时最大等待时间，单位毫秒</span></span><br><span class="line"><span class="attr">        maxWait:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment">#有两个含义：</span></span><br><span class="line">        <span class="comment">#1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span></span><br><span class="line">        <span class="comment">#2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</span></span><br><span class="line"><span class="attr">        timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment">#连接保持空闲而不被驱逐的最小时间，单位是毫秒</span></span><br><span class="line"><span class="attr">        minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">        <span class="comment">#使用该SQL语句检查链接是否可用。如果validationQuery=null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。</span></span><br><span class="line"><span class="attr">        validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">        <span class="comment">#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line"><span class="attr">        testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span></span><br><span class="line"><span class="attr">        testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment">#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span></span><br><span class="line"><span class="attr">        testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line"><span class="attr">        filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">        <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">        <span class="comment">#connectionProperties.druid.stat.mergeSql: true</span></span><br><span class="line">        <span class="comment">#connectionProperties.druid.stat.slowSqlMillis: 5000</span></span><br><span class="line">        <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br><span class="line">        <span class="comment">#useGlobalDataSourceStat: true</span></span><br><span class="line">        <span class="comment">#default-auto-commit: true 默认</span></span><br><span class="line">        <span class="comment">#default-auto-commit: false</span></span><br></pre></td></tr></table></figure>

<h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(&#123;<span class="string">"com.example.atomikos.db1.dao"</span>,<span class="string">"com.example.atomikos.db2.dao"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomikosApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AtomikosApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第一个数据源配置Properties"><a href="#第一个数据源配置Properties" class="headerlink" title="第一个数据源配置Properties"></a>第一个数据源配置Properties</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Data注解 提供类所有属性的 get 和 set 方法，此外还提供了equals、canEqual、hashCode、toString 方法。</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.druid.one"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneDataSourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer initialSize;</span><br><span class="line">    <span class="keyword">private</span> Integer maxActive;</span><br><span class="line">    <span class="keyword">private</span> Integer minIdle;</span><br><span class="line">    <span class="keyword">private</span> Integer maxWait;</span><br><span class="line">    <span class="keyword">private</span> Integer timeBetweenEvictionRunsMillis;</span><br><span class="line">    <span class="keyword">private</span> Integer minEvictableIdleTimeMillis;</span><br><span class="line">    <span class="keyword">private</span> String validationQuery;</span><br><span class="line">    <span class="keyword">private</span> Boolean testWhileIdle;</span><br><span class="line">    <span class="keyword">private</span> Boolean testOnBorrow;</span><br><span class="line">    <span class="keyword">private</span> Boolean testOnReturn;</span><br><span class="line">    <span class="keyword">private</span> String filters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二个数据源配置Properties"><a href="#第二个数据源配置Properties" class="headerlink" title="第二个数据源配置Properties"></a>第二个数据源配置Properties</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.druid.two"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoDataSourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer initialSize;</span><br><span class="line">    <span class="keyword">private</span> Integer maxActive;</span><br><span class="line">    <span class="keyword">private</span> Integer minIdle;</span><br><span class="line">    <span class="keyword">private</span> Integer maxWait;</span><br><span class="line">    <span class="keyword">private</span> Integer timeBetweenEvictionRunsMillis;</span><br><span class="line">    <span class="keyword">private</span> Integer minEvictableIdleTimeMillis;</span><br><span class="line">    <span class="keyword">private</span> String validationQuery;</span><br><span class="line">    <span class="keyword">private</span> Boolean testWhileIdle;</span><br><span class="line">    <span class="keyword">private</span> Boolean testOnBorrow;</span><br><span class="line">    <span class="keyword">private</span> Boolean testOnReturn;</span><br><span class="line">    <span class="keyword">private</span> String filters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第一个数据源配置"><a href="#第一个数据源配置" class="headerlink" title="第一个数据源配置"></a>第一个数据源配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.xa.DruidXADataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jta.atomikos.AtomikosDataSourceBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//这里要指明这个数据适用于哪些mapper，和这个数据源的sqlsessionFactory</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.atomikos.db1.dao"</span>, sqlSessionFactoryRef = <span class="string">"oneSqlSessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneDataSourceConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> OneDataSourceProperties oneDataSourceProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置第一个数据源</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"oneDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">oneDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里datasource要使用阿里的支持XA的DruidXADataSource</span></span><br><span class="line">        DruidXADataSource datasource = <span class="keyword">new</span> DruidXADataSource();</span><br><span class="line">        BeanUtils.copyProperties(oneDataSourceProperties,datasource);</span><br><span class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">        xaDataSource.setXaDataSource(datasource);</span><br><span class="line">        xaDataSource.setUniqueResourceName(<span class="string">"oneDataSource"</span>);</span><br><span class="line">        <span class="keyword">return</span> xaDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置第一个sqlsessionFactory</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"oneSqlSessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">oneSqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"oneDataSource"</span>)</span> DataSource oneDataSource)</span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(oneDataSource);</span><br><span class="line">        ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">	bean.setMapperLocations(resolver.getResources(<span class="string">"classpath:mapper/user/*.xml"</span>));</span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二个数据源配置"><a href="#第二个数据源配置" class="headerlink" title="第二个数据源配置"></a>第二个数据源配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.xa.DruidXADataSource;</span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.config.TwoDataSourceProperties;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jta.atomikos.AtomikosDataSourceBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.atomikos.db2.dao"</span>, sqlSessionFactoryRef = <span class="string">"twoSqlSessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoDataSourceConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> TwoDataSourceProperties twoDataSourceProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"twoDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">twoDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidXADataSource datasource = <span class="keyword">new</span> DruidXADataSource();</span><br><span class="line">        BeanUtils.copyProperties(twoDataSourceProperties,datasource);</span><br><span class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">        xaDataSource.setXaDataSource(datasource);</span><br><span class="line">        xaDataSource.setUniqueResourceName(<span class="string">"twoDataSource"</span>);</span><br><span class="line">        <span class="keyword">return</span> xaDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"twoSqlSessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">twoSqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"twoDataSource"</span>)</span> DataSource twoDataSource)</span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(twoDataSource);</span><br><span class="line">        ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        bean.setMapperLocations(resolver.getResources(<span class="string">"classpath:mapper/account/*.xml"</span>));</span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="service层使用事务回滚演示"><a href="#service层使用事务回滚演示" class="headerlink" title="service层使用事务回滚演示"></a>service层使用事务回滚演示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.db1.service.user;</span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.db1.dao.user.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.db1.model.user.User;</span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.db2.model.account.Account;</span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.db2.service.account.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> javax.transaction.Transactional;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@ClassName</span>: UserService</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2019-12-6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---------增删改查基础部分S--------</span></span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">save</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testAtomikos</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(name);</span><br><span class="line">        accountService.save(account);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(name);</span><br><span class="line">        save(user);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"done"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意@Transactional 引入的包是<code>javax.transaction.Transactional</code></p>
</blockquote>
<p>源码地址 <a href="https://github.com/tangliangdong/springboot-atomikos" target="_blank" rel="noopener">springboot-atomikos</a></p>
<p>参考自：<a href="https://blog.csdn.net/jy02268879/article/details/84398657" target="_blank" rel="noopener">【十九】Spring Boot之分布式事务(JTA、Atomikos、Druid、Mybatis)</a></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>atomikos</tag>
      </tags>
  </entry>
  <entry>
    <title>java8 stream流</title>
    <url>/2019/11/21/2019-11-21-java8-features/</url>
    <content><![CDATA[<p>java8新增了很多新的特性，值得去学习下。</p>
<p>新增加的Stream API (<strong>java.util.stream</strong>)引入了在Java里可以工作的函数式编程。这是目前为止对java库最大的一次功能添加，希望程序员通过编写有效、整洁和简明的代码，能够大大提高生产率。虽然效率没有简单for循环那么快，但是依旧值得我们去学习。 </p>
<a id="more"></a>

<blockquote>
<p>回顾编程的发展历史，我们不难发现一个规律，那就是先是从最初的C/C++演变到Java/.net，这是编程界的一大进步，因为我们不再关注于指针操作，比如在java中JVM虚拟机已经帮我们完成了相应的操作，由于这一进步，这付出的代价是执行效率会降低，但是带来的好处就在于加快了编程开发的速度。</p>
<p>当编程由Java/.net演变到JavaScript/PHP/Kotlin，这又是编程界的另一大进步，这意味着我们在编写程序时没有必要再关注于数据类型，而该数据类型是由相应的语言在运行时确定，这样，这又一次降低了程序的运行速度，但是相应的又提升了代码编写的效率，因而通过回顾历史我们不难得出如下结论：</p>
<p>在编写代码时，<em>一定要以最简洁为原则</em>，毕竟运行程序的硬件成本会随着时间的推移在不断降低，而<strong>程序员的薪资则不会</strong>。</p>
</blockquote>
<p>参考自 <a href="https://blog.csdn.net/zzy1078689276/article/details/79430772" target="_blank" rel="noopener">for-forEach-stream三种遍历方法执行效率比较与选用思考</a></p>
<p><img src="1.png" alt="java.util.stream"></p>
<p> 从上图中可以看见stream包中的接口比较多，类和枚举比较少。我们先来看接口： </p>
<p><img src="2.png" alt="Stream"></p>
<p>DoubleStream，IntStream,LongStream，Stream都继承于BaseStream接口。并且它们都有各自的Builder接口：DoubleStream.Builder，IntStream.Builder，LongStream.Builder，Stream.Builder。剩下就只有Collector接口，Collectors，StreamSupport类，Collector,Characteristics枚举。</p>
<h1 id="Stream接口"><a href="#Stream接口" class="headerlink" title="Stream接口"></a>Stream接口</h1><p>Stream接口是一个泛型接口，而DoubleStream,IntStream,LongStream只不过是对double,int,long的包装而已，所以我们弄懂Stream，其他的接口也都大同小异。 </p>
<p>范例类：<strong>学生成绩类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grade</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String student;</span><br><span class="line">    <span class="keyword">public</span> String course;</span><br><span class="line">    <span class="keyword">public</span> Integer score;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Grade</span><span class="params">(String student, String course, Integer score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.student = student;</span><br><span class="line">        <span class="keyword">this</span>.course = course;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="forEach-Consumer-lt-super-T-gt-action"><a href="#forEach-Consumer-lt-super-T-gt-action" class="headerlink" title="forEach(Consumer&lt;? super T&gt; action)"></a>forEach(Consumer&lt;? super T&gt; action)</h2><p>forEach接收一个Consumer接口，该接口只接收一个参数，没有返回值。</p>
<p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"Hello"</span>, <span class="string">"World"</span>, <span class="string">"!!!"</span>);</span><br><span class="line">stream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>System.out.println方法我们都很熟悉了，它接收一个参数，并且在控制台打印出来。这正好符合Consumer接口，所以这里输出的结果是 ： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">!!!</span><br></pre></td></tr></table></figure>

<h2 id="forEachOrdered-Consumer-lt-super-T-gt-action"><a href="#forEachOrdered-Consumer-lt-super-T-gt-action" class="headerlink" title="forEachOrdered(Consumer&lt;? super T&gt; action)"></a>forEachOrdered(Consumer&lt;? super T&gt; action)</h2><p>forEachOrdered 表示严格按照顺序取数据 ，并且主要用于 parallelStream 流并行处理（并行处理可能会导致结果无序）</p>
<h2 id="peek-Consumer-lt-super-T-gt-action"><a href="#peek-Consumer-lt-super-T-gt-action" class="headerlink" title="peek(Consumer&lt;? super T&gt; action)"></a>peek(Consumer&lt;? super T&gt; action)</h2><p>peek方法也是接收一个Consumer功能型接口，它与forEach的区别就是它会返回Stream接口，也就是说forEach是一个Terminal操作，而peek是一个Intermediate操作，forEach完了以后Stream就消费完了，不能继续再使用，而peek还可以继续使用。</p>
<p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"Hello"</span>, <span class="string">"World"</span>, <span class="string">"!!!"</span>);</span><br><span class="line">stream.peek(System.out::println).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p> 输出结果: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">I</span><br><span class="line">I</span><br><span class="line">love</span><br><span class="line">love</span><br><span class="line">you</span><br><span class="line">you</span><br></pre></td></tr></table></figure>

<p>因为peek是一个Intermediate操作，它并不会马上执行，当forEach的时候才会把peek和forEach一起执行，来提高效率，所以等于是每个stream元素执行两次打印操作，再执行下一个元素。</p>
<h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h2><p>将此流中的元素根据自然顺序排序，</p>
<p><code>sorted(Comparator&lt;? super T&gt; comparator)</code></p>
<p>sorted方法还有一个重载方法，可以传入一个Comparator，这样就可以根据Comparator来排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Grade grade1 = <span class="keyword">new</span> Grade(<span class="string">"张三"</span>, <span class="string">"英语"</span>, <span class="number">99</span>);</span><br><span class="line">Grade grade2 = <span class="keyword">new</span> Grade(<span class="string">"张三"</span>, <span class="string">"数学"</span>, <span class="number">59</span>);</span><br><span class="line">Grade grade3 = <span class="keyword">new</span> Grade(<span class="string">"张三"</span>, <span class="string">"计算机"</span>, <span class="number">67</span>);</span><br><span class="line">Grade grade4 = <span class="keyword">new</span> Grade(<span class="string">"李四"</span>, <span class="string">"英语"</span>, <span class="number">20</span>);</span><br><span class="line">Grade grade5 = <span class="keyword">new</span> Grade(<span class="string">"李四"</span>, <span class="string">"英语"</span>, <span class="number">80</span>);</span><br><span class="line">Grade grade6 = <span class="keyword">new</span> Grade(<span class="string">"王五"</span>, <span class="string">"英语"</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Grade&gt; list = Arrays.asList(grade1, grade2, grade3, grade4, grade5, grade6);</span><br><span class="line"><span class="comment">// 根据成绩从高到低进行排序</span></span><br><span class="line">list.stream().sorted(Comparator.comparing(</span><br><span class="line">    Grade::getScore, Integer::compareTo).reversed())</span><br><span class="line">    .forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p> 自然序逆序元素，使用<code>Comparator</code> 提供的<code>reverseOrder()</code> 方法  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">list</span><span class="selector-class">.stream</span>()<span class="selector-class">.sorted</span>(<span class="selector-tag">Comparator</span><span class="selector-class">.reverseOrder</span>())</span><br></pre></td></tr></table></figure>

<h2 id="map-Function-lt-super-T-extends-R-gt-mapper"><a href="#map-Function-lt-super-T-extends-R-gt-mapper" class="headerlink" title="map(Function&lt;? super T, ? extends R&gt; mapper)"></a>map(Function&lt;? super T, ? extends R&gt; mapper)</h2><p>map方法接收一个功能型接口，功能型接口接收一个参数，返回一个值。map用途是将旧数据转换后变为新数据，是一种1：1的映射，每个输入元素按照规则转换成另一个元素。该方法是Intermediate操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>);</span><br><span class="line">stream.map(String::toUpperCase).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="flatMap-Function-lt-super-T-extends-Stream-lt-extends-R-gt-gt-mapper"><a href="#flatMap-Function-lt-super-T-extends-Stream-lt-extends-R-gt-gt-mapper" class="headerlink" title="flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper)"></a>flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper)</h2><p> flatMap从结构上来看跟map差不多，主要是可以用来将stream层级扁平化。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.of(</span><br><span class="line">    Arrays.asList(<span class="number">1</span>),</span><br><span class="line">    Arrays.asList(<span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">    Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">);</span><br><span class="line">inputStream.flatMap((n)-&gt;n.stream()).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="collect-Collector-lt-super-T-A-R-gt-collector"><a href="#collect-Collector-lt-super-T-A-R-gt-collector" class="headerlink" title="collect(Collector&lt;? super T,A,R&gt; collector)"></a>collect(Collector&lt;? super T,A,R&gt; collector)</h2><p>collect方法跟reduce方法功能很类似，都是聚合方法。不同的是，reduce方法在操作每一个元素时总创建一个新，而collect方法只是修改现存的值，而不是创建一个新值。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">collect(Collector&lt;? <span class="keyword">super</span> T,A,R&gt; collector)</span><br><span class="line">collect(Supplier&lt;R&gt; supplier, BiConsumer&lt;R,? <span class="keyword">super</span> T&gt; accumulator, BiConsumer&lt;R,R&gt; combiner)</span><br></pre></td></tr></table></figure>

<p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据科目，将学生的成绩分类</span></span><br><span class="line">Map&lt;String, List&lt;Grade&gt;&gt; list = list.stream().collect(Collectors.groupingBy(Grade::getCourse));</span><br></pre></td></tr></table></figure>

<h2 id="reduce-BinaryOperator-accumulator"><a href="#reduce-BinaryOperator-accumulator" class="headerlink" title="reduce(BinaryOperator accumulator)"></a>reduce(BinaryOperator<t> accumulator)</t></h2><p>reduce提供了三种重载方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Optional&lt;T&gt; <span class="title">reduce</span><span class="params">(BinaryOperator&lt;T&gt; accumulator)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//BinaryOperator 二元操作符，有类型相同的两个参数和一个返回值</span></span></span><br><span class="line"><span class="function">T <span class="title">reduce</span><span class="params">(T identity, BinaryOperator&lt;T&gt; accumulator)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// BiFunction 接收两个参数，有一个返回值</span></span></span><br><span class="line"><span class="function">&lt;U&gt; U <span class="title">reduce</span><span class="params">(U identity, BiFunction&lt;U,? <span class="keyword">super</span> T,U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</span></span></span><br></pre></td></tr></table></figure>

<p>若是集合中元素类型是对象，那reduce操作可能会影响集合中对象的值。</p>
<h2 id="concat-Stream-lt-extends-T-gt-a-Stream-lt-extends-T-gt-b"><a href="#concat-Stream-lt-extends-T-gt-a-Stream-lt-extends-T-gt-b" class="headerlink" title="concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)"></a>concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</h2><p>该方法是Stream的静态方法，用于组合两个Stream生成新的Stream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.concat(Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), Stream.of(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="of-T-t"><a href="#of-T-t" class="headerlink" title="of(T t)"></a>of(T t)</h2><p>用于构造Stream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Stream&lt;T&gt; <span class="title">of</span><span class="params">(T t)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T&gt; Stream&lt;T&gt; <span class="title">of</span><span class="params">(T... values)</span></span></span><br></pre></td></tr></table></figure>

<p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h2 id="generate-Supplier-s"><a href="#generate-Supplier-s" class="headerlink" title="generate(Supplier s)"></a>generate(Supplier<t> s)</t></h2><p>用于生成一个无限长度的Stream，接收只有一个参数，没有返回值的Supplier函数</p>
<blockquote>
<p>这个无限长度 Stream是懒加载，一般这种无限长度的Stream都会配合Stream的limit()方法来用。</p>
</blockquote>
<p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取10个随机数的Stream流</span></span><br><span class="line">Stream.generate(() -&gt; Math.random()).limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="builder"><a href="#builder" class="headerlink" title="builder()"></a>builder()</h2><p> 当使用builder()的时候,要声明希望存放的元素类型,此方法就会创建一个流对象 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.&lt;String&gt;builder().add(<span class="string">"a"</span>).add(<span class="string">"b"</span>).add(<span class="string">"c"</span>).build();</span><br></pre></td></tr></table></figure>

<h2 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h2><p>empty()方法用来创建一个空的流</p>
<blockquote>
<p>这个方法经常被用在创建一个不含元素的空的流进行返回,避免返回null </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Stream&lt;String&gt; <span class="title">streamOf</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> list == <span class="keyword">null</span> || list.isEmpty() ? Stream.empty() : list.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="filter-Predicate-lt-super-T-gt-predicate"><a href="#filter-Predicate-lt-super-T-gt-predicate" class="headerlink" title="filter(Predicate&lt;? super T&gt; predicate )"></a>filter(Predicate&lt;? super T&gt; predicate )</h2><p>filter方法接收一个断言型的接口，断言型接口接收一个参数，返回一个<strong>Boolean</strong>类型。filter 方法根据某个条件对stream元素进行过滤，通过过滤的元素将生成一个新的stream。 </p>
<p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 过滤掉小于等于2的数字</span></span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>).filter((x) -&gt; x &gt; <span class="number">2</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<h2 id="min-max-Comparator-lt-super-T-gt-comparator"><a href="#min-max-Comparator-lt-super-T-gt-comparator" class="headerlink" title="min/max(Comparator&lt;? super T&gt; comparator)"></a>min/max(Comparator&lt;? super T&gt; comparator)</h2><p>Stream接口中的这两个方法接收一个Comparator参数，通过Comparator返回此流最小或者最大的元素。IntStream,DoubleStream.LongStream则不需要传入Comparator。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取成绩最高的学生对象</span></span><br><span class="line">list.stream().max(Comparator.comparing(Grade::getScore));</span><br><span class="line"><span class="comment">// 获取最高的数字</span></span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>).max(Integer::compareTo);</span><br></pre></td></tr></table></figure>

<h2 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h2><p> 返回此流元素的数量。 </p>
<h2 id="distinct"><a href="#distinct" class="headerlink" title="distinct()"></a>distinct()</h2><p> 消除重复元素后返回一个新Stream。 </p>
<h2 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch()"></a>allMatch()</h2><p> Stream中的所有元素满足传入的断言型接口，就返回true。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>).allMatch( x -&gt; x == <span class="number">1</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch()"></a>anyMatch()</h2><p> Stream中的只要有一个元素满足传入的断言型接口，就返回true。 </p>
<h2 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h2><p> Stream中没有元素满足传入的断言型接口，就返回true。 </p>
<h2 id="findAny-findFirst"><a href="#findAny-findFirst" class="headerlink" title="findAny()  / findFirst()"></a>findAny()  / findFirst()</h2><ul>
<li><p>findAny() 在Stream流中查找到任何一个就返回 Optional </p>
</li>
<li><p>findFirst() 在Stream流中查找到任何一个就返回 Optional </p>
</li>
</ul>
<blockquote>
<p>findAny() 在串行情况下会返回第一个，和findFirst() 结果一致，而在并行的情况下就不能保证是第一个</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">list.parallelStream().findAny(); <span class="comment">// Optional[6]</span></span><br><span class="line">list.parallelStream().findFirst(); <span class="comment">// Optional[1]</span></span><br></pre></td></tr></table></figure>

<h2 id="skip-long-n"><a href="#skip-long-n" class="headerlink" title="skip(long n)"></a>skip(long n)</h2><p> 接收一个long类型的参数，表示跳过几个元素。 </p>
<h2 id="limit-long-maxSize"><a href="#limit-long-maxSize" class="headerlink" title="limit(long maxSize)"></a>limit(long maxSize)</h2><p> 该方法接收一个long型参数，表示一共返回几个元素。 </p>
<h2 id="toArray"><a href="#toArray" class="headerlink" title="toArray()"></a>toArray()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">toArray()</span><br><span class="line"><span class="comment">// 接收一个int类型的参数，和一个泛型返回值</span></span><br><span class="line">toArray(IntFunction&lt;A[]&gt; generator)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考自 <a href="https://www.jianshu.com/p/b1b7e334ff79" target="_blank" rel="noopener">JAVA8你只需要知道这些（3）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>备忘录</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins持续集成docker部署</title>
    <url>/2019/11/20/2019-11-20-jenkins-docker-deploy/</url>
    <content><![CDATA[<p>每次都手动打包springboot项目，部署war包到docker中，显然效率太低了，因此可以使用jenkins实现持续集成部署。</p>
<a id="more"></a>

<p>创建一个maven项目，使用git进行源码管理，可以配置<code>webhook</code>，也可以手动构建项目</p>
<h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><p>构建中使用Maven进行项目的打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clean package -pl corp -P dev</span><br></pre></td></tr></table></figure>

<ul>
<li>-pl：指定打包的子模块</li>
<li>-P：指定打包的测试环境（<font color="red">必须是大写</font>）</li>
</ul>
<p><img src="1.png" alt="jenkins 项目配置"></p>
<h3 id="Post-Steps"><a href="#Post-Steps" class="headerlink" title="Post Steps"></a><strong>Post Steps</strong></h3><p>选择执行shell命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建挂载的目录</span></span><br><span class="line">mkdir -p /mnt/service/intelligentization/corp/</span><br><span class="line"><span class="comment"># 清空挂载目录</span></span><br><span class="line">rm -rf /mnt/service/intelligentization/corp/*</span><br><span class="line"><span class="comment"># 将jenkins项目打包的项目war包拷贝到docker的挂载目录</span></span><br><span class="line">cp ./corp/target/ROOT.war /mnt/service/intelligentization/corp/</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment"># 防止因为代码出错，导致命令执行中断。停止容器</span></span><br><span class="line">	<span class="comment"># try</span></span><br><span class="line">	docker stop intelligentization-corp</span><br><span class="line">	docker rm intelligentization-corp</span><br><span class="line">&#125; || &#123;</span><br><span class="line">	<span class="comment"># catch</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"失败"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 docker 容器，并指定挂载目录和映射端口</span></span><br><span class="line">docker run -itd --privileged=<span class="literal">true</span> -v /mnt/service/intelligentization/corp/:/usr/<span class="built_in">local</span>/tomcat/webapps/ -p 9998:8080 --name intelligentization-corp tomcat:8</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --privileged=<span class="literal">true</span> -v /mnt/service/intelligentization/corp/:/usr/<span class="built_in">local</span>/tomcat/webapps/ -p 9998:8080 --name intelligentization-corp tomcat:8</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-v /mnt/service/intelligentization/corp/:/usr/local/tomcat/webapps/</code> 前一个是挂载的本机的目录，后一个是docker容器的目录，docker会将挂载目录的内容拷贝到docker对应的目录，而且tomcat会热部署，一旦挂载的war包发生变动，tomcat就会自动重新部署</li>
<li><code>-p 9998:8080</code> 前一个9998是映射的本机端口，一个8080是docker容器的端口</li>
</ul>
<h3 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h3><p>​    因为要部署的war包并不在docker容器中，而是通过挂载的形式，那每次构建之后新建的docker容器其实是一样的，所以在第一次新建容器之后，其实并不需要每次都去重新构建一次容器，只需要更新docker挂载目录的内容即可。</p>
<p>​    因此，之前执行的shell命令可以简化一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建挂载的目录</span></span><br><span class="line">mkdir -p /mnt/service/intelligentization/corp/</span><br><span class="line"><span class="comment"># 清空挂载目录</span></span><br><span class="line">rm -rf /mnt/service/intelligentization/corp/*</span><br><span class="line"><span class="comment"># 将jenkins项目打包的项目war包拷贝到docker的挂载目录</span></span><br><span class="line">cp ./corp/target/ROOT.war /mnt/service/intelligentization/corp/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins执行脚本权限不足</title>
    <url>/2019/11/19/2019-11-19-jenkins-user-permissions/</url>
    <content><![CDATA[<blockquote>
<p> jenkins默认用户为jenkins , 普通用户执行shell脚本,会缺失某些权限 </p>
</blockquote>
<a id="more"></a>

<h3 id="打开Jenkins的配置文件"><a href="#打开Jenkins的配置文件" class="headerlink" title="打开Jenkins的配置文件"></a>打开Jenkins的配置文件</h3><p>将Jenkins的执行用户修改为 <code>root</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure>

<h3 id="修改jenkins用户为root，"><a href="#修改jenkins用户为root，" class="headerlink" title="修改jenkins用户为root，"></a>修改jenkins用户为<code>root</code>，</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JENKINS_USER=<span class="string">"root"</span></span><br></pre></td></tr></table></figure>

<h3 id="修改Jenkins相关文件夹用户权限"><a href="#修改Jenkins相关文件夹用户权限" class="headerlink" title="修改Jenkins相关文件夹用户权限"></a>修改Jenkins相关文件夹用户权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R root:root /var/lib/jenkins</span><br><span class="line">chown -R root:root /var/cache/jenkins</span><br><span class="line">chown -R root:root /var/<span class="built_in">log</span>/jenkins</span><br></pre></td></tr></table></figure>

<h3 id="重启Jenkins"><a href="#重启Jenkins" class="headerlink" title="重启Jenkins"></a>重启Jenkins</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service jenkins restart</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure>

<h3 id="查看Jenkins进程所属用户"><a href="#查看Jenkins进程所属用户" class="headerlink" title="查看Jenkins进程所属用户"></a>查看Jenkins进程所属用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep jenkins</span><br></pre></td></tr></table></figure>

<p>若是显示进程的用户是root，则表示修改成功。</p>
<p><img src="1.png" alt="ps -ef | grep jenkins"></p>
<p>转载自 <a href="https://www.blog.lijinghua.club/article/jenkins_权限不足" target="_blank" rel="noopener">Jenkins执行脚本报权限不足错误</a></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat8登陆用户配置</title>
    <url>/2019/11/18/2019-11-18-tomcat8-login-configuration/</url>
    <content><![CDATA[<a id="more"></a>

<h3 id="tomcat-users-xml"><a href="#tomcat-users-xml" class="headerlink" title="tomcat-users.xml"></a>tomcat-users.xml</h3><p> 在<strong>Tomcat</strong>根目录下找到 <code>conf/tomcat-users.xml</code>文件，在<code>&lt;tomcat-users&gt;&lt;/tomcat-user&gt;</code>标签中添加如下内容 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-jmx"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-status"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">roles</span>=<span class="string">"manager-gui,manager-script,manager-jmx,manager-status"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="context-xml"><a href="#context-xml" class="headerlink" title="context.xml"></a>context.xml</h3><p>还需要修改<strong>Tomcat</strong> 根目录下的 <code>webapps/manager/META_INF/context.xml</code>文件</p>
<p>将其中的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.RemoteAddrValve"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">allow</span>=<span class="string">"127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>注释掉就行了。 因为默认tomcat不可以通过外部ip访问管理界面。一定要启动Tomcat，不然等构建等时候会报拒绝连接 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment">  contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment">  this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment">  The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment">  (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment">  the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">antiResourceLocking</span>=<span class="string">"false"</span> <span class="attr">privileged</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- &lt;Valve className="org.apache.catalina.valves.RemoteAddrValve"</span></span><br><span class="line"><span class="comment">         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" /&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">sessionAttributeValueClassNameFilter</span>=<span class="string">"java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>tomcat8</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins配置构建失败邮件通知</title>
    <url>/2019/11/14/2019-11-14-jenkins-email-notification/</url>
    <content><![CDATA[<p>jenkins自动化构建邮件通知开发者功能配置</p>
<a id="more"></a>

<h2 id="jenkins系统配置"><a href="#jenkins系统配置" class="headerlink" title="jenkins系统配置"></a>jenkins系统配置</h2><p>先进入 <code>Manage Jenkins --&gt; Configure System</code></p>
<p><img src="1.png" alt="Configure System"></p>
<h3 id="Jenkins-Location-gt-系统管理员邮件地址"><a href="#Jenkins-Location-gt-系统管理员邮件地址" class="headerlink" title="Jenkins Location  -&gt;  系统管理员邮件地址"></a>Jenkins Location  -&gt;  系统管理员邮件地址</h3><p>输入你的邮箱地址</p>
<p><img src="2.png" alt="系统管理员邮件地址"></p>
<hr>
<h3 id="Extended-E-mail-Notification-gt-Default-user-E-mail-suffix"><a href="#Extended-E-mail-Notification-gt-Default-user-E-mail-suffix" class="headerlink" title="Extended E-mail Notification -&gt;  Default user E-mail suffix"></a>Extended E-mail Notification -&gt;  Default user E-mail suffix</h3><p><img src="3.png" alt></p>
<hr>
<h3 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h3><p><img src="4.png" alt></p>
<ol>
<li>SMTP服务器地址需要去对应的邮箱中查看，并需同时开启邮箱的SMTP功能。见下方汇总</li>
<li>需开启SMTP认证，用户名就是邮箱号，密码需要去邮箱设置。</li>
<li>SMTP默认是465，也可以在邮箱设置SMTP服务的地方查看。</li>
<li>最后，可以通过发送测试邮件测试配置，如果出现如图中 <code>Email was successfully sent</code> 信息，则说明邮件通知功能配置成功。</li>
</ol>
<p>1、例如网易邮箱配置： <code>设置 -&gt; POP3/SMTP/IMAP</code></p>
<p><img src="5.png" alt="网易邮箱SMTP服务"></p>
<p>腾讯企业邮开启<strong>SMTP服务</strong>并查看SMTP服务器地址：<code>设置 -&gt; 收发信设置</code></p>
<p><img src="6.png" alt="腾讯企业邮SMTP服务"></p>
<p>可以看到邮箱SMTP服务的端口为465</p>
<p>2、网易邮箱设置客户端授权密码</p>
<p><img src="7.png" alt="网易邮箱客户端授权码"></p>
<p>开启客户端授权码并进行设置就行了，如果之前已经设置过，直接输入到jenkins中就行了。</p>
<p><strong>腾讯企业邮客户端授权密码</strong></p>
<p><img src="11.png" alt="腾讯企业邮客户端授权码"></p>
<p>开启安全登陆 -&gt; 生成客户端专用密码（需保存下来，只显示一次）</p>
<hr>
<h2 id="针对项目中进行邮件通知配置"><a href="#针对项目中进行邮件通知配置" class="headerlink" title="针对项目中进行邮件通知配置"></a>针对项目中进行邮件通知配置</h2><p>先新建一个项目</p>
<p><img src="8.png" alt></p>
<p>在配置项目信息的地方，其他都不用管，拉到页面的最底下，找到 <strong>构建后操作</strong>，点击 <strong>增加构建后的操作步骤</strong>，选择 <code>E-mail Notification</code></p>
<p><img src="9.png" alt></p>
<p>输入需要接受通知的邮箱账号</p>
<p><img src="10.png" alt></p>
<h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><p>点击 <code>Build now</code>，构建项目</p>
<p><img src="12.png" alt></p>
<p>当项目构建失败时，就会发送邮件到项目配置的邮箱地址。</p>
<p><img src="13.png" alt></p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>email</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins配置webhook自动拉取github打包</title>
    <url>/2019/11/14/2019-11-14-jenkins-webhook/</url>
    <content><![CDATA[<p>当 <em>github</em> 上传代码后，主动通知 <strong>jenkins</strong> 去拉取代码，自动化构建项目。</p>
<a id="more"></a>

<h2 id="Github获取-Personal-access-tokens"><a href="#Github获取-Personal-access-tokens" class="headerlink" title="Github获取 Personal access tokens"></a>Github获取 Personal access tokens</h2><p><code>登陆github -&gt; settings -&gt; Developer settings -&gt; Personal access tokens</code></p>
<p>![获取Personal access tokens`](20.png)</p>
<p>需要选上图中的两个复选框，这样Jenkins才能配置<code>github服务器</code></p>
<p><img src="21.png" alt></p>
<p>确认后生成的 token要保存起来，这个只会显示一次。</p>
<p>然后我们就可以去配置Jenkins的<code>github服务器</code>。</p>
<h2 id="jenkins-配置-Configure-System"><a href="#jenkins-配置-Configure-System" class="headerlink" title="jenkins 配置 Configure System"></a>jenkins 配置 Configure System</h2><p><img src="22.png" alt="Github服务器配置"></p>
<p>添加凭据</p>
<p><img src="23.png" alt></p>
<p>类型需要选择<code>Secret Text</code>，这里出现的 <strong>Secret</strong> 就是我们之前去github生成的 <code>Personal access tokens</code>，再写个描述，确认就ok了。</p>
<p>点击连接测试后，如果下方显示的是<code>Credentials verified for user tangliangdong, rate limit: 4994</code>表明连接成功了。</p>
<h2 id="配置Maven项目"><a href="#配置Maven项目" class="headerlink" title="配置Maven项目"></a>配置Maven项目</h2><p>因为项目使用<code>pom.xml</code>文件构建的，我们就直接创建一个maven项目，选择 <code>构建一个maven项目</code> </p>
<p><img src="1.png" alt="my_second_github_job"></p>
<p>如果没有这个选项，则需要去<code>jenkins插件管理</code>中去安装一个 <code>Maven Integration插件</code>，然后重启jenkins就能使用了。</p>
<p><img src="2.png" alt=" 安装Maven Integration插件 "></p>
<p>接下来就要带着我们的 <strong>github仓库地址</strong> 到处粘贴了，</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/tangliangdong/u</span>ser-dev.git</span><br></pre></td></tr></table></figure>

<p><img src="3.png" alt="GitHub项目Url"></p>
<p><img src="4.png" alt="源码管理"></p>
<p> Credentials 需要github登陆的凭据。</p>
<p>源码库浏览器必须指定，输入的url还是github仓库地址，不带 <code>.git</code></p>
<p><img src="5.png" alt="添加凭据"></p>
<p><img src="6.png" alt="构建触发器 webhook"></p>
<p>当我们向<code>user-dev</code> 仓库提交代码后，github会主动通知我们的jenkins去拉取代码，进行一次构建。</p>
<p>在 <strong>构建环境</strong> 中 <code>Use secret text(s) or file(s)</code>，选择的就是之前添加过的 <code>Github access token</code></p>
<p><img src="7.png" alt=" Use secret text(s) or file(s) "></p>
<p>构建前执行 maven的命令 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clean package -P <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img src="8.png" alt=" Pre Steps "></p>
<p>构建失败后邮件通知。</p>
<p><img src="9.png" alt=" E-mail Notification "></p>
<h2 id="配置-Github-Webhook"><a href="#配置-Github-Webhook" class="headerlink" title="配置 Github Webhook"></a>配置 Github Webhook</h2><p><code>进入 Github项目Settings -&gt; Webhook</code>，添加项目的 Webhook</p>
<p><img src="10.png" alt></p>
<p>添加Jenkins的Webhook地址，因为这个是Github接收到提交的请求后，去通知Jenkins网站来拉取代码，因此这里的配置Jenkins代码肯定是要在公网能访问到的，但我当时是在我的树莓派上配置的，因此需要用诸如<strong>花生壳</strong>这类的内网映射工具来将本地的IP端口映射到公网上，才能让github访问到。webhook地址如下，直接在访问jenkins访问地址后面加上<code>/github-webhook</code>就行了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://2m7t216256.wicp.vip:12006/github-webhook/</span><br></pre></td></tr></table></figure>

<p><img src="11.png" alt></p>
<p>绿色表示可以使用了，</p>
<p><img src="12.png" alt></p>
<p>我们向 <code>user-dev</code> 提交代码，就能看到Jenkins在自动拉取代码进行构建了。</p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>webhook</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派外接2560x1440 2k屏设置</title>
    <url>/2019/11/14/2019-11-14-Raspbian-2k-resolution/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.raspberrypi.org/documentation/configuration/config-txt/" target="_blank" rel="noopener">官网的Raspbian系统 config.txt 配置详解</a></p>
</blockquote>
<p>烧录完系统，将tf卡插入到树莓派中，再启动设备。接入2k屏幕，显示的一直是黑屏，需要将系统的配置文件修改下。</p>
<h3 id="外接2k显示器设置"><a href="#外接2k显示器设置" class="headerlink" title="外接2k显示器设置"></a>外接2k显示器设置</h3><a id="more"></a>

<p><a href="https://www.raspberrypi.org/documentation/configuration/config-txt/video.md" target="_blank" rel="noopener">Raspbian 显示模式设置</a></p>
<p><img src="2.png" alt="video config"></p>
<p>在 <code>/boot/config.txt</code> 中添加2k分辨率的配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start_x=0</span><br><span class="line">hdmi_drive=1</span><br><span class="line">hdmi_group=2</span><br><span class="line">hdmi_mode=87</span><br><span class="line">hdmi_cvt=2560 1440 48</span><br><span class="line"></span><br><span class="line">// 下面可加不加</span><br><span class="line">framebuffer_width=2560</span><br><span class="line">framebuffer_height=1440</span><br><span class="line">max_framebuffer_width=2560</span><br><span class="line">max_framebuffer_height=1440</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 最重要的就是hdmi_cvt的设置，其中48代表刷新频率，1440×2560的屏幕只支持48hz的如果设置其他的就不行 </p>
</blockquote>
<p><img src="1.png" alt="hdmi_cvt配置"></p>
<p>将卡插回到树莓派中，然后再启动树莓派，就可以显示在2k屏幕上了。</p>
<h3 id="树莓派开启ssh"><a href="#树莓派开启ssh" class="headerlink" title="树莓派开启ssh"></a>树莓派开启ssh</h3><p>在电脑上读取装有 <em>Raspbian</em> 系统的 <strong>tf</strong>卡后，在root盘目录下新建 <code>ssh</code>文件（<strong>不带后缀名</strong>）。</p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>Raspbian</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>java8函数式编程</title>
    <url>/2019/11/06/2019-11-6-jdk8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p> JDK中已有的一些接口本身就是函数式接口，如<code>Runnable</code>。 JDK 8中又增加了<code>java.util.function</code>包， 提供了常用的函数式接口。 </p>
</blockquote>
<a id="more"></a>



<h2 id="JDK-8之前已有的函数式接口"><a href="#JDK-8之前已有的函数式接口" class="headerlink" title="JDK 8之前已有的函数式接口"></a>JDK 8之前已有的函数式接口</h2><ul>
<li>java.lang.Runnable</li>
<li>java.util.concurrent.Callable</li>
<li>java.security.PrivilegedAction</li>
<li>java.util.Comparator</li>
<li>java.io.FileFilter</li>
<li>java.nio.file.PathMatcher</li>
<li>java.lang.reflect.InvocationHandler</li>
<li>java.beans.PropertyChangeListener</li>
<li>java.awt.event.ActionListener</li>
<li>javax.swing.event.ChangeListener</li>
</ul>
<h2 id="新定义的函数式接口"><a href="#新定义的函数式接口" class="headerlink" title="新定义的函数式接口"></a>新定义的函数式接口</h2><p> <code>java.util.function</code>中定义了几组类型的函数式接口以及针对基本数据类型的子接口。 </p>
<ul>
<li>Predicate – 传入一个参数，返回一个bool结果， 方法为<code>boolean test(T t)</code></li>
<li>Consumer – 传入一个参数，无返回值，纯消费。 方法为<code>void accept(T t)</code></li>
<li>Function – 传入一个参数，返回一个结果，方法为<code>R apply(T t)</code></li>
<li>Supplier – 无参数传入，返回一个结果，方法为<code>T get()</code></li>
<li>UnaryOperator – 一元操作符， 继承Function,传入参数的类型和返回类型相同。</li>
<li>BinaryOperator – 二元操作符， 传入的两个参数的类型和返回类型相同， 继承BiFunction</li>
</ul>
<hr>
<h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只需注明传入参数的类型，返回值为Bool</span></span><br><span class="line">Predicate&lt;Integer&gt; fun1 = (x) -&gt; x &gt; <span class="number">1</span>; </span><br><span class="line">Boolean bool = fun1.test(<span class="number">2</span>);  <span class="comment">// bool = true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用大括号来包住一个代码块，不过需要使用return来确定最后的返回值</span></span><br><span class="line">Predicate&lt;Integer&gt; fun11 = (x) -&gt; &#123;</span><br><span class="line">    Integer sum = x * <span class="number">1000</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> sum &gt; <span class="number">2000</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Boolean bool1 = fun11.test(<span class="number">2</span>); <span class="comment">// bool1 = true</span></span><br></pre></td></tr></table></figure>

<p>Predicate 扩展的函数列表</p>
<table>
<thead>
<tr>
<th align="left">interface</th>
<th align="left">functional method</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Predicate<t></t></td>
<td align="left">boolean test(T t)</td>
<td align="left">接收一个泛型参数</td>
</tr>
<tr>
<td align="left">IntPredicate</td>
<td align="left">boolean test(int value)</td>
<td align="left">以下三个接口，接收指定类型的参数</td>
</tr>
<tr>
<td align="left">LongPredicate</td>
<td align="left">boolean test(long value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">DoublePredicate</td>
<td align="left">boolean test(double value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">BiPredicate&lt;T,U&gt;</td>
<td align="left">boolean test(T t, U u)</td>
<td align="left">接收两个泛型参数，分别为T，U</td>
</tr>
</tbody></table>
<hr>
<h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需注明传入参数的类型，无返回值</span></span><br><span class="line">Consumer&lt;String&gt; fun2 = (x) -&gt; System.out.println(x);</span><br><span class="line">fun2.accept(<span class="string">"hello world"</span>); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>

<p>Consumer 扩展的函数列表</p>
<h4 id="接收一个参数"><a href="#接收一个参数" class="headerlink" title="接收一个参数"></a>接收一个参数</h4><table>
<thead>
<tr>
<th align="left"><strong>interface</strong></th>
<th align="left"><strong>functional method</strong></th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Consumer<t></t></td>
<td align="left">void accept(T t)</td>
<td align="left">接收一个泛型参数，无返回值</td>
</tr>
<tr>
<td align="left">IntConsumer</td>
<td align="left">void accept(int value)</td>
<td align="left">以下三个类，接收一个指定类型的参数</td>
</tr>
<tr>
<td align="left">LongConsumer</td>
<td align="left">void accept(long value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">DoubleConsumer</td>
<td align="left">void accept(double value)</td>
<td align="left"></td>
</tr>
</tbody></table>
<h4 id="接收两个参数"><a href="#接收两个参数" class="headerlink" title="接收两个参数"></a>接收两个参数</h4><table>
<thead>
<tr>
<th align="left">interface</th>
<th align="left">functional method</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BiConsumer&lt;T, U&gt;</td>
<td align="left">void accept(T t, U u)</td>
<td align="left">接收两个泛型参数</td>
</tr>
<tr>
<td align="left">ObjIntConsumer<t></t></td>
<td align="left">void accept(T t, int value)</td>
<td align="left">以下三个类，接收一个泛型参数，一个指定类型的参数</td>
</tr>
<tr>
<td align="left">ObjLongConsumer<t></t></td>
<td align="left">void accept(T t, long value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ObjDoubleConsumer<t></t></td>
<td align="left">void accept(T t, double value)</td>
<td align="left"></td>
</tr>
</tbody></table>
<hr>
<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; fun3 = (x) -&gt; Integer.valueOf(x);</span><br><span class="line">Integer num = fun3.apply(<span class="string">"1024"</span>); <span class="comment">// num = 1024</span></span><br></pre></td></tr></table></figure>

<h4 id="接收单个参数"><a href="#接收单个参数" class="headerlink" title="接收单个参数"></a>接收单个参数</h4><table>
<thead>
<tr>
<th align="left">Interface</th>
<th align="left">functional method</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Function&lt;T,R&gt;</td>
<td align="left">R apply(T t)</td>
<td align="left">接收参数类型为T，返回参数类型为R</td>
</tr>
<tr>
<td align="left">IntFunction<r></r></td>
<td align="left">R apply(int value)</td>
<td align="left">以下三个接口，指定了接收参数类型，返回参数类型为泛型R</td>
</tr>
<tr>
<td align="left">LongFunction<r></r></td>
<td align="left">R apply(long value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Double<r></r></td>
<td align="left">R apply(double value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ToIntFunction<t></t></td>
<td align="left">int applyAsInt(T value)</td>
<td align="left">以下三个接口，指定了返回参数类型，接收参数类型为泛型T</td>
</tr>
<tr>
<td align="left">ToLongFunction<t></t></td>
<td align="left">long applyAsLong(T value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ToDoubleFunction<t></t></td>
<td align="left">double applyAsDouble(T value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">IntToLongFunction</td>
<td align="left">long applyAsLong(int value)</td>
<td align="left">以下六个接口，既指定了接收参数类型，也指定了返回参数类型</td>
</tr>
<tr>
<td align="left">IntToDoubleFunction</td>
<td align="left">double applyAsLong(int value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">LongToIntFunction</td>
<td align="left">int applyAsLong(long value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">LongToDoubleFunction</td>
<td align="left">double applyAsLong(long value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">DoubleToIntFunction</td>
<td align="left">int applyAsLong(double value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">DoubleToLongFunction</td>
<td align="left">long applyAsLong(double value)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">UnaryOperator<t></t></td>
<td align="left">T apply(T t)</td>
<td align="left">特殊的Function，接收参数类型和返回参数类型一样</td>
</tr>
<tr>
<td align="left">IntUnaryOperator</td>
<td align="left">int applyAsInt(int left, int right)</td>
<td align="left">以下三个接口，制定了接收参数和返回参数类型，并且都一样</td>
</tr>
<tr>
<td align="left">LongUnaryOperator</td>
<td align="left">long applyAsInt(long left, long right)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">DoubleUnaryOperator</td>
<td align="left">double applyAsInt(double left, double right)</td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="接收两个参数-1"><a href="#接收两个参数-1" class="headerlink" title="接收两个参数"></a>接收两个参数</h3><table>
<thead>
<tr>
<th align="left">interface</th>
<th align="left">functional method</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BiFunction&lt;T, U, R&gt;</td>
<td align="left">R apply(T t, U u)</td>
<td align="left">接收两个参数的Function</td>
</tr>
<tr>
<td align="left">ToIntBiFunction&lt;T, U&gt;</td>
<td align="left">int applyAsInt(T t, U u)</td>
<td align="left">以下三个接口，指定了返回参数类型，接收参数类型分别为泛型T, U</td>
</tr>
<tr>
<td align="left">ToLongBiFunction&lt;T, U&gt;</td>
<td align="left">long applyAsLong(T t, U u)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ToDoubleBiFunction&lt;T,U&gt;</td>
<td align="left">double appleyAsDouble(T t, U u)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">BinaryOperator<t></t></td>
<td align="left">T apply(T t, T u)</td>
<td align="left">特殊的BiFunction, 接收参数和返回参数类型一样</td>
</tr>
<tr>
<td align="left">IntBinaryOperator</td>
<td align="left">int applyAsInt(int left, int right)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">LongBinaryOperator</td>
<td align="left">long applyAsInt(long left, long right)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">DoubleBinaryOperator</td>
<td align="left">double applyAsInt(double left, double right)</td>
<td align="left"></td>
</tr>
</tbody></table>
<hr>
<h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参数传入，需注明返回的参数类型</span></span><br><span class="line">Supplier&lt;String&gt; fun4 = () -&gt; <span class="string">"hello world"</span>;</span><br><span class="line">String word = fun4.get(); <span class="comment">// word = "hello world"</span></span><br></pre></td></tr></table></figure>

<p>Supplier  扩展函数列表</p>
<table>
<thead>
<tr>
<th align="left">interface</th>
<th align="left">functional method</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Supplier<t></t></td>
<td align="left">T get()</td>
<td align="left">返回类型为泛型T</td>
</tr>
<tr>
<td align="left">BooleanSupplier</td>
<td align="left">boolean getAsBoolean()</td>
<td align="left">以下三个接口，返回指定类型</td>
</tr>
<tr>
<td align="left">IntSupplier</td>
<td align="left">int getAsInt()</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">LongSupplier</td>
<td align="left">long getAsLong()</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">DoubleSupplier</td>
<td align="left">double getAsDouble()</td>
<td align="left"></td>
</tr>
</tbody></table>
<hr>
<h3 id="UnaryOperator"><a href="#UnaryOperator" class="headerlink" title="UnaryOperator"></a>UnaryOperator</h3><p>一元操作符， 继承Function,传入参数的类型和返回类型相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注明参数的类型</span></span><br><span class="line">UnaryOperator&lt;String&gt; fun5 = (x) -&gt; <span class="string">"你好，欢迎"</span> + x;</span><br><span class="line">String word = fun5.apply(<span class="string">"张三"</span>); <span class="comment">// word = "你好，欢迎张三"</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="BinaryOperator"><a href="#BinaryOperator" class="headerlink" title="BinaryOperator"></a>BinaryOperator</h3><p> 二元操作符， 传入的两个参数的类型和返回类型相同， 继承 BiFunction </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为传入的两个参数和返回类型均一致，则只需注明一个类型就行了</span></span><br><span class="line">BinaryOperator&lt;String&gt; fun6 = (x, y) -&gt; x + y;</span><br><span class="line">String word = fun6.apply(<span class="string">"hello "</span>, <span class="string">"java"</span>); <span class="comment">// word = "hello java"</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>jdk8</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA的查询引用、调用关系图的功能</title>
    <url>/2019/10/30/2019-10-30-IDEA%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%BC%95%E7%94%A8%E3%80%81%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB%E5%9B%BE%E7%9A%84%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="查看Java方法的调用树"><a href="#查看Java方法的调用树" class="headerlink" title="查看Java方法的调用树"></a>查看Java方法的调用树</h2><p> IntelliJ IDEA中可以在主菜单中选择Navigate | Call Hierarchy命令查看一个Java方法调用树（caller和callee两个方向） </p>
<p><img src="1.png" alt></p>
<p><img src="2.png" alt></p>
<p>上图中左上角的两个按钮是<strong>调用</strong>和<strong>被调用</strong>关系的显示。 </p>
<h2 id="查看表达式、变量和方法参数的传递关系树"><a href="#查看表达式、变量和方法参数的传递关系树" class="headerlink" title="查看表达式、变量和方法参数的传递关系树"></a>查看表达式、变量和方法参数的传递关系树</h2><p>IntelliJ IDEA中可以在主菜单中选择 <strong>Analyze | Data flow from / to Here</strong> 两个命令查看表达式、变量和方法参数的传递关系树。</p>
<h3 id="Analyze-Data-Flow-from-Here"><a href="#Analyze-Data-Flow-from-Here" class="headerlink" title="Analyze | Data Flow from Here"></a>Analyze | Data Flow from Here</h3><p><img src="3.png" alt></p>
<p><img src="4.png" alt></p>
<h3 id="Analyze-Data-Flow-to-Here"><a href="#Analyze-Data-Flow-to-Here" class="headerlink" title="Analyze | Data Flow to Here"></a>Analyze | Data Flow to Here</h3><p><img src="5.png" alt></p>
<p>查询调用目标方法的地方可以用 <em>Analyze Data flow from Here</em></p>
<h2 id="查看Java类、方法或变量的直接使用情况"><a href="#查看Java类、方法或变量的直接使用情况" class="headerlink" title="查看Java类、方法或变量的直接使用情况"></a>查看Java类、方法或变量的直接使用情况</h2><p>IntelliJ IDEA的 <em>Find Usage</em> 可以查看一个Java类、方法或变量的直接使用情况。 </p>
<p>或者直接点击目标对象，使用键盘快捷键：<em>Ctrl+G</em></p>
<p><img src="6.png" alt></p>
<h2 id="查看类关系图"><a href="#查看类关系图" class="headerlink" title="查看类关系图"></a>查看类关系图</h2><p> 在包或类上右键点击Diagram或者用快捷键Ctrl+Alt+U。 </p>
<p><img src="7.png" alt></p>
<p><img src="8.png" alt></p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>python3 使用xpath</title>
    <url>/2019/10/30/2019-10-30-python-xpath/</url>
    <content><![CDATA[<p>python爬网页数据可以用xpath 进行标签定位</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://book.douban.com/'</span> <span class="comment">#需要爬数据的网址</span></span><br><span class="line">page = requests.Session().get(url)</span><br><span class="line">tree = html.fromstring(page.text)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 lxml 中的 xpath 高效提取文本与标签属性值</p>
</blockquote>
<p>先安装 lxml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure>

<h2 id="定位html元素"><a href="#定位html元素" class="headerlink" title="定位html元素"></a>定位html元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">divs1 = tree.xpath(<span class="string">'//div'</span>) <span class="comment">#查找所有div标签</span></span><br><span class="line"></span><br><span class="line">divs2 = tree.xpath(<span class="string">'//div[@id="header"]'</span>) <span class="comment"># 查找id为header的标签</span></span><br><span class="line"></span><br><span class="line">divs3 = tree.xpath(<span class="string">'//div[@class="foot"]'</span>) <span class="comment"># 获取class为foot的div标签</span></span><br><span class="line"></span><br><span class="line">divs4 = tree.xpath(<span class="string">'//div[@class="foot"]//a'</span>) <span class="comment"># 获取class为foot下的a标签</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>属性名称后面的一定要加引号 <code>@class=&quot;foot&quot;</code></p>
</blockquote>
<h3 id="定位多属性标签"><a href="#定位多属性标签" class="headerlink" title="定位多属性标签"></a>定位多属性标签</h3><p>原贴链接：<a href="http://stackoverflow.com/questions/1604471/how-can-i-find-an-element-by-css-class-with-xpath" target="_blank" rel="noopener"><a href="https://stackoverflow.com/questions/1604471/how-can-i-find-an-element-by-css-class-with-xpath" target="_blank" rel="noopener">How can I find an element by CSS class with XPath?</a></a></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//*[contains(@class, 'Test')]</span><br></pre></td></tr></table></figure>

<p> 但是这个表达式会把类似 class=”Testvalue” 或者 class=”newTest”也匹配出来。 可以使用如下版本</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//*[contains(concat(' ', @class, ' '), ' Test ')]</span><br></pre></td></tr></table></figure>

<p> 如果你希望匹配的结果尽量精确，你还可以使用 normalize-space 功能来清除class名称周围的空格 </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//*[contains(concat(' ', normalize-space(@class), ' '), ' Test ')]</span><br></pre></td></tr></table></figure>

<p>需要定位具有 <em>menu</em> 属性的<code>ul</code>标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"banner menu"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">div5 = tree.xpath(<span class="string">'//div[@class="header"]//ul[contains(@class, "menu")]'</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>建议把class换成更好识别的标识执行效率会更高 </p>
</blockquote>
<h2 id="取元素属性或文本"><a href="#取元素属性或文本" class="headerlink" title="取元素属性或文本"></a>取元素属性或文本</h2><p>获取 <em>div</em> 标签下的 <em>span</em> 标签中的文本信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = tree.xpath(<span class="string">'//div//span/text()'</span>)</span><br></pre></td></tr></table></figure>

<p>获取标签中的属性信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">href = tree.xpath(<span class="string">'//div//a/@href'</span>) <span class="comment">#获取a标签的href图片地址</span></span><br><span class="line"></span><br><span class="line">src = tree.xpath(<span class="string">'//div//a/@alt'</span>) <span class="comment">#获取a标签的alt值</span></span><br></pre></td></tr></table></figure>

<p>如果获取的是标签，则返回的对象可以继续使用xpath方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = tree.xpath(<span class="string">'//ul[contains(@class, "pic-list2")]//li//a'</span>)  <span class="comment"># 获取需要的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">    src = item.xpath(<span class="string">'@src'</span>)[<span class="number">0</span>] <span class="comment"># 获取的是list</span></span><br><span class="line">    alt = item.xpath(<span class="string">'@alt'</span>)[<span class="number">0</span>] <span class="comment"># 获取的是list</span></span><br><span class="line">    print(src, alt)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="爬取豆瓣读书的图片"><a href="#爬取豆瓣读书的图片" class="headerlink" title="爬取豆瓣读书的图片"></a>爬取豆瓣读书的图片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 豆瓣读书</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">captureDouBan</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://book.douban.com/'</span> <span class="comment">#需要爬数据的网址</span></span><br><span class="line">    page = requests.Session().get(url)</span><br><span class="line">    tree = html.fromstring(page.text)</span><br><span class="line">    result = tree.xpath(<span class="string">'//div[@class="cover"]//a//img'</span>) <span class="comment">#获取需要的数据</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">        src = item.xpath(<span class="string">'@src'</span>)[<span class="number">0</span>]</span><br><span class="line">        alt = item.xpath(<span class="string">'@alt'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(src, alt)</span><br><span class="line">        request.urlretrieve(src, <span class="string">"E://xiaotang//python3//img//"</span>+alt+<span class="string">".jpg"</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>xpath</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-10-29-美国的宪政历程</title>
    <url>/2019/10/29/2019-10-29-%E7%BE%8E%E5%9B%BD%E7%9A%84%E5%AE%AA%E6%94%BF%E5%8E%86%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>美国</tag>
        <tag>法律</tag>
      </tags>
  </entry>
  <entry>
    <title>python3 的一些实用方法</title>
    <url>/2019/10/29/2019-10-29-python3-%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="python实现list去重"><a href="#python实现list去重" class="headerlink" title="python实现list去重"></a>python实现list去重</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先将列表转化为set，再转化为list就可以实现去重操作</span></span><br><span class="line">list(set(list))  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 用sort即可实现排序</span></span><br><span class="line">list.sort()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">quote(item.xpath(<span class="string">'@src'</span>)[<span class="number">0</span>], safe=string.printable)</span><br></pre></td></tr></table></figure>

<h3 id="python转换编码"><a href="#python转换编码" class="headerlink" title="python转换编码"></a>python转换编码</h3><blockquote>
<p> 按照标准， URL 只允许一部分 ASCII 字符（数字字母和部分符号），其他的字符（如汉字）是不符合 URL 标准的。<br>所以 URL 中使用其他字符就需要进行 URL 编码。 </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># safe表示可以忽略的字符</span></span><br><span class="line"><span class="comment"># string.printable 表示可打印的字符，见下方 string模块</span></span><br><span class="line">quote(<span class="string">'http://www.obzhi.com/wp-content/themes/Loostrive/timthumb.php?src=http://www.obzhi.com/wp-content/uploads/2019/10/eveoline.jpg&amp;h=200&amp;w=300&amp;zc=1'</span>), safe=string.printable)</span><br></pre></td></tr></table></figure>

<h4 id="String模块中的常量："><a href="#String模块中的常量：" class="headerlink" title="String模块中的常量："></a>String模块中的常量：</h4><blockquote>
<p>string.digits：数字0~9</p>
<p>string.letters：所有字母（大小写）</p>
<p>string.lowercase：所有小写字母</p>
<p>string.printable：可打印字符的字符串</p>
<p>string.punctuation：所有标点</p>
<p>string.uppercase：所有大写字母</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.digits  </span><br><span class="line"><span class="string">'0123456789'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.letters  </span><br><span class="line"><span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_lowercase  </span><br><span class="line"><span class="string">'abcdefghijklmnopqrstuvwxyz'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.printable  </span><br><span class="line"><span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ \t\n\r\x0b\x0c'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.punctuation  </span><br><span class="line"><span class="string">'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_uppercase  </span><br><span class="line"><span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br></pre></td></tr></table></figure>

<h3 id="python-网页获取的中文乱码"><a href="#python-网页获取的中文乱码" class="headerlink" title="python 网页获取的中文乱码"></a>python 网页获取的中文乱码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取天气的json</span></span><br><span class="line">r = requests.get(<span class="string">'http://www.weather.com.cn/data/sk/101210101.html'</span>)</span><br><span class="line">print(r.content) </span><br><span class="line"><span class="comment">#&#123;'weatherinfo': &#123;'city': 'æ\x9d\xadå·\x9e', 'cityid': '101210101', 'temp': '24.8', 'WD': 'ä¸\x9cå\x8c\x97é£\x8e', 'WS': 'å°\x8fäº\x8e3çº§', 'SD': '81%', 'AP': '1000.3hPa', 'njd': 'æ\x9a\x82æ\x97\xa0å®\x9eå\x86µ', 'WSE': '&lt;3', 'time': '17:50', 'sm': '2.1', 'isRadar': '1', 'Radar': 'JC_RADAR_AZ9571_JB'&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将编码格式改成 utf-8</span></span><br><span class="line">r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(r.json())</span><br><span class="line"><span class="comment">#&#123;'weatherinfo': &#123;'city': '杭州', 'cityid': '101210101', 'temp': '24.8', 'WD': '东北风', 'WS': '小于3级', 'SD': '81%', 'AP': '1000.3hPa', 'njd': '暂无实况', 'WSE': '&lt;3', 'time': '17:50', 'sm': '2.1', 'isRadar': '1', 'Radar': 'JC_RADAR_AZ9571_JB'&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="python-定时器"><a href="#python-定时器" class="headerlink" title="python 定时器"></a>python 定时器</h3>]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>python3</tag>
      </tags>
  </entry>
  <entry>
    <title>记录《电车难题》</title>
    <url>/2019/10/27/2019-10-27-%E7%94%B5%E8%BD%A6%E9%9A%BE%E9%A2%98/</url>
    <content><![CDATA[<p>杰里米·边沁的“功利主义”：一个行为的正确与否，完全取决于其造成的后果；而我们的行为准则，应当是以“最多数人之最大幸福”为目的。——判断好坏的标准：是否造成幸福的最大化。</p>
<a id="more"></a>

<h1 id="全民民意法庭"><a href="#全民民意法庭" class="headerlink" title="全民民意法庭"></a>全民民意法庭</h1><h2 id="检方"><a href="#检方" class="headerlink" title="检方"></a>检方</h2><p>案例一：琼斯女士扳动道岔，将一辆失控的电车引入岔道，挽救了5人的性命，却也因此造成事发当时站在岔道上的法利先生的身亡。</p>
<p>案例二：创伤外科医生罗德尼·梅普斯接到通知赶往手术室，共有六名伤员被送往该医院，其中两名伤员需要肾移植；另一人需要心脏移植；还有一人需要肝移植；第五人需要肺移植。当梅普斯正为器官来源发愁时，发现第六位伤员没有明显的伤情，梅普斯随即将这名年轻人送入手术室，摘取了他所有的器官，并移植给上述五名病人，因此挽救了他们的生命。他在法庭上说了一句著名的话：“我觉得一名病人死亡，比五名病人死亡的结果要好。”  ——陪审团一致判定梅普斯犯有一级谋杀罪。</p>
<p>当时检方在审理琼斯女士扳动道闸案时，将此案与梅普斯摘取器官案做类比，请求判处琼斯女士犯有杀人罪。</p>
<hr>
<h2 id="辩方："><a href="#辩方：" class="headerlink" title="辩方："></a>辩方：</h2><p>案例三：一名叫克拉拉·墨菲的女子，在乘坐电车时，司机突然昏迷，克拉拉为了挽救前方轨道上5个人的性命而将电车转至侧线，但却撞死了另一个人。—— 多达89%的陪审员认为，卡拉拉将电车转至侧线的行为是可取的。</p>
<p>案例四： 弗兰克·特里梅因站在横跨电车轨道的人行天桥上。一辆失去控制的电车正沿着轨道，朝站在轨道上的五个人疾驰而去。当时只有一个轨道，没有侧线可供电车转向。弗兰克很快认定，只有在轨道上投以重物才能阻止电车。但是天桥上只有一名体型肥硕的胖子站在旁边。弗兰克发现，要么将这名男子推下桥，拯救那5人；要么任凭那5人被电车撞死。最终他选择了将那人推下桥。 —— 只有仅仅11%的陪审员认为弗兰克此举是可取的。</p>
<blockquote>
<p>为什么几乎所有人都认为，将电车转至侧线，撞死一人挽救五人可以接受。但几乎所有人都认为，将一个胖子推下桥挽救五人则不能接受。</p>
</blockquote>
<p>其中只有极少数人以道德原因作为决定的基础，只有极少数人在对克拉拉和弗兰克两案作出不同判决时，以道德原因作为决定的基础。只有少数人指出，他们认为两案确实存在差异，并因此按照不同的道德原因，作出了不同的判决。</p>
<h3 id="1、有些人指出，克拉拉“预见”到如果她扳动道岔，侧线上的那个人将会身亡；而弗兰克则对胖子的死存在主观的“故意”。换句话说，克拉拉并没有“利用”岔道上那个男人的死来挽救另五人，而弗兰克则确实如此利用了那个胖子。"><a href="#1、有些人指出，克拉拉“预见”到如果她扳动道岔，侧线上的那个人将会身亡；而弗兰克则对胖子的死存在主观的“故意”。换句话说，克拉拉并没有“利用”岔道上那个男人的死来挽救另五人，而弗兰克则确实如此利用了那个胖子。" class="headerlink" title="1、有些人指出，克拉拉“预见”到如果她扳动道岔，侧线上的那个人将会身亡；而弗兰克则对胖子的死存在主观的“故意”。换句话说，克拉拉并没有“利用”岔道上那个男人的死来挽救另五人，而弗兰克则确实如此利用了那个胖子。"></a>1、有些人指出，克拉拉“预见”到如果她扳动道岔，侧线上的那个人将会身亡；而弗兰克则对胖子的死存在主观的“故意”。换句话说，克拉拉并没有“利用”岔道上那个男人的死来挽救另五人，而弗兰克则确实如此利用了那个胖子。</h3><blockquote>
<p>这一区分即 <em>圣·托马斯</em>阿奎那提出的“双效原则”的一部分：一个本来符合伦理的行为，也许存在不良的副作用，但是绝不能以坏的手段来达成好的结果。</p>
</blockquote>
<h3 id="2、也有人将区分点放在了这样一个事实上：也即克拉拉的行为并非直接作用于死者，而弗兰克的行为则是直接的。（可以理解为，克拉拉并没有直接接触到岔道上的那个男人，而弗兰克的双手则确实接触到了那个胖子。）"><a href="#2、也有人将区分点放在了这样一个事实上：也即克拉拉的行为并非直接作用于死者，而弗兰克的行为则是直接的。（可以理解为，克拉拉并没有直接接触到岔道上的那个男人，而弗兰克的双手则确实接触到了那个胖子。）" class="headerlink" title="2、也有人将区分点放在了这样一个事实上：也即克拉拉的行为并非直接作用于死者，而弗兰克的行为则是直接的。（可以理解为，克拉拉并没有直接接触到岔道上的那个男人，而弗兰克的双手则确实接触到了那个胖子。）"></a>2、也有人将区分点放在了这样一个事实上：也即克拉拉的行为并非直接作用于死者，而弗兰克的行为则是直接的。（可以理解为，克拉拉并没有直接接触到岔道上的那个男人，而弗兰克的双手则确实接触到了那个胖子。）</h3><h3 id="3、克拉拉的行为是转移了一个既有的危险，而弗兰克则创造了一个新的危险。"><a href="#3、克拉拉的行为是转移了一个既有的危险，而弗兰克则创造了一个新的危险。" class="headerlink" title="3、克拉拉的行为是转移了一个既有的危险，而弗兰克则创造了一个新的危险。"></a>3、克拉拉的行为是转移了一个既有的危险，而弗兰克则创造了一个新的危险。</h3><blockquote>
<p>我是比较赞成第一种观点的。</p>
</blockquote>
<h2 id="双效原则"><a href="#双效原则" class="headerlink" title="双效原则"></a>双效原则</h2><p>圣·托马斯指出，同一行为通常兼有善恶两种效果。而在某种特定条件下，一个善的行为，虽然兼有恶的结果，也是可以允许的，哪怕这恶的结果，在通常情况下是必须避免的。</p>
<p>四个条件：</p>
<ol>
<li><p>该行动本身，在道德上必须是善的，或至少是中性的。</p>
</li>
<li><p>行为人不能主观希望恶果的发生，但可以允许其发生。如果能够避免恶果而同样达成善的效果，他应当这样做。</p>
</li>
<li><p>善果和行为本身的关系，其直接程度，必须等同或高于善果与恶果之间的关系。换句话说，善的结果必须是由这行为直接造成的，而不是通过恶果间接造成的。否则，行为人就是以恶果为工具来达成善果，这是永远不能为允许的。</p>
</li>
<li><p>善果之可取，必须足以弥补恶果之恶。</p>
</li>
</ol>
<blockquote>
<p>设置条件三是为了避免过度细分的诡辩术，体现了天才的智慧。例如梅普斯案中将摘除必要器官和杀人行文区分开。</p>
</blockquote>
<h3 id="将这些标准运用与达芙妮·琼斯一案："><a href="#将这些标准运用与达芙妮·琼斯一案：" class="headerlink" title="将这些标准运用与达芙妮·琼斯一案："></a>将这些标准运用与达芙妮·琼斯一案：</h3><ol>
<li>如果我们将行为与其结果剥离，改变电车路径的行为在道德上是中性的，所以符合第一个条件。</li>
<li>据我们所知，琼斯女士并不“希望”造成法利先生死亡。她为了拯救另外五人，仅仅“预见”并“允许”了这一副作用的发生。我们也可以认定，如果琼斯女士有办法不造成法利先生的死亡而同样挽救那五人的生命，她一定会那么做。</li>
<li>琼斯女士在扳动道岔时，并不是先杀死法利先生，然后利用他的身体去制止电车。她的行为，其直接、立刻的效果是拯救了五人的生命。只是后来，电车造成了法利先生的死亡。条件三符合。</li>
<li>拯救五人的善超过了失去一人的恶。条件四符合。</li>
</ol>
<h3 id="但梅普斯医生的行为不符合双效原则中的四个条件："><a href="#但梅普斯医生的行为不符合双效原则中的四个条件：" class="headerlink" title="但梅普斯医生的行为不符合双效原则中的四个条件："></a>但梅普斯医生的行为不符合双效原则中的四个条件：</h3><ol>
<li>杀死一个无辜者的行为，本身不是善的，因此不符合条件一。</li>
<li>从表面上看，梅普斯医生似乎一定有造成六号病人鲍勃·蒂瑟林顿先生死亡的主观故意，因为医生知道，摘除蒂瑟林顿的必要器官无异于夺走他的生命。因此，条件二也不符合。</li>
<li>梅普斯医生实际上是用一个恶的手段（摘取蒂瑟林顿先生的器官，并立即造成其死亡）来达成一个善的目的，这是永远不能被允许的。</li>
<li>我们愿意接受，梅普斯医生的情况也许符合条件四。善果似乎的确胜过恶果。</li>
</ol>
<blockquote>
<p>陪审员南希：我们的道德抉择最终还是出自情感的本能，因此一切分析都只不过是为我们的道德直觉寻找理由罢了。</p>
</blockquote>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>电车难题</tag>
      </tags>
  </entry>
  <entry>
    <title>bash快捷键</title>
    <url>/2019/10/25/2019-10-25-bash%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>生活在 Bash shell 中，熟记以下快捷键，将极大的提高你的命令行操作效率。</p>
<a id="more"></a>

<h3 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h3><ul>
<li>Ctrl + a ：移到命令行首</li>
<li>Ctrl + e ：移到命令行尾</li>
<li>Ctrl + f ：按字符前移（右向）</li>
<li>Ctrl + b ：按字符后移（左向）</li>
<li>Alt + f ：按单词前移（右向）</li>
<li>Alt + b ：按单词后移（左向）</li>
<li>Ctrl + xx：在命令行首和光标之间移动</li>
<li>Ctrl + u ：从光标处删除至命令行首</li>
<li>Ctrl + k ：从光标处删除至命令行尾</li>
<li>Ctrl + w ：从光标处删除至字首</li>
<li>Alt + d ：从光标处删除至字尾</li>
<li>Ctrl + d ：删除光标处的字符</li>
<li>Ctrl + h ：删除光标前的字符</li>
<li>Ctrl + y ：粘贴至光标后</li>
<li>Alt + c ：从光标处更改为首字母大写的单词</li>
<li>Alt + u ：从光标处更改为全部大写的单词</li>
<li>Alt + l ：从光标处更改为全部小写的单词</li>
<li>Ctrl + t ：交换光标处和之前的字符</li>
<li>Alt + t ：交换光标处和之前的单词</li>
<li>Alt + Backspace：与 Ctrl + w <del>相同</del>类似，分隔符有些差别 [感谢 rezilla 指正]</li>
</ul>
<h3 id="重新执行命令"><a href="#重新执行命令" class="headerlink" title="重新执行命令"></a>重新执行命令</h3><ul>
<li>Ctrl + r：逆向搜索命令历史</li>
<li>Ctrl + g：从历史搜索模式退出</li>
<li>Ctrl + p：历史中的上一条命令</li>
<li>Ctrl + n：历史中的下一条命令</li>
<li>Alt + .：使用上一条命令的最后一个参数</li>
</ul>
<h3 id="控制命令"><a href="#控制命令" class="headerlink" title="控制命令"></a>控制命令</h3><ul>
<li>Ctrl + l：清屏</li>
<li>Ctrl + o：执行当前命令，并选择上一条命令</li>
<li>Ctrl + s：阻止屏幕输出</li>
<li>Ctrl + q：允许屏幕输出</li>
<li>Ctrl + c：终止命令</li>
<li>Ctrl + z：挂起命令</li>
</ul>
<h3 id="Bang-命令"><a href="#Bang-命令" class="headerlink" title="Bang (!) 命令"></a>Bang (!) 命令</h3><ul>
<li>!!：执行上一条命令</li>
<li>!blah：执行最近的以 blah 开头的命令，如 !ls</li>
<li>!blah:p：仅打印输出，而不执行</li>
<li>!$：上一条命令的最后一个参数，与 Alt + . 相同</li>
<li>!$:p：打印输出 !$ 的内容</li>
<li>!*：上一条命令的所有参数</li>
<li>!<em>:p：打印输出 !</em> 的内容</li>
<li>^blah：删除上一条命令中的 blah</li>
<li>^blah^foo：将上一条命令中的 blah 替换为 foo</li>
<li>^blah^foo^：将上一条命令中所有的 blah 都替换为 foo</li>
</ul>
<p>_友情提示_：</p>
<ol>
<li>以上介绍的大多数 Bash 快捷键仅当在 emacs 编辑模式时有效，若你将 Bash 配置为 vi 编辑模式，那将遵循 vi 的按键绑定。Bash 默认为 emacs 编辑模式。如果你的 Bash 不在 emacs 编辑模式，可通过 <code>set -o emacs</code> 设置。</li>
<li>^S、^Q、^C、^Z 是由终端设备处理的，可用 <code>stty</code> 命令设置。</li>
</ol>
<p>转载至 <a href="https://linuxtoy.org/archives/bash-shortcuts.html" target="_blank" rel="noopener">让你提升命令行效率的 Bash 快捷键 [完整版]</a></p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>docker命令</title>
    <url>/2019/10/23/2019-10-23-docker%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="docker通过Dockerfile构建镜像"><a href="#docker通过Dockerfile构建镜像" class="headerlink" title="docker通过Dockerfile构建镜像"></a>docker通过Dockerfile构建镜像</h3><p>在Dockerfile同级目录下执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t tangliangdong/nginx .</span><br></pre></td></tr></table></figure>

<h3 id="docker-开机自动启动"><a href="#docker-开机自动启动" class="headerlink" title="docker 开机自动启动"></a>docker 开机自动启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker.service</span><br></pre></td></tr></table></figure>

<h3 id="docker-容器开机自启动"><a href="#docker-容器开机自启动" class="headerlink" title="docker 容器开机自启动"></a>docker 容器开机自启动</h3><p>在运行docker容器时可以加如下参数来保证每次docker服务重启后容器也自动重启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart=always &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure>

<p>如果已经启动了则可以使用如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker update --restart=always &lt;IMAGE ID&gt;</span><br></pre></td></tr></table></figure>

<p>查看容器的重启设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect -f "&#123;&#123; .State.StartedAt &#125;&#125;" &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure>

<h3 id="docker-进入已经运行的容器"><a href="#docker-进入已经运行的容器" class="headerlink" title="docker 进入已经运行的容器"></a>docker 进入已经运行的容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker attach &lt;CONTAINER ID&gt;</span><br><span class="line"></span><br><span class="line">docker exec -it &lt;CONTAINER ID&gt; /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="docker查看网络"><a href="#docker查看网络" class="headerlink" title="docker查看网络"></a>docker查看网络</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure>

<p>查看使用该网络的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network inspect app</span><br></pre></td></tr></table></figure>

<p>容器连接网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network connect app &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure>

<h3 id="docker-使用挂载"><a href="#docker-使用挂载" class="headerlink" title="docker 使用挂载"></a>docker 使用挂载</h3><p>docker可以再创建容器时将宿主机的目录挂载到容器中，这样更新宿主机的目录，即可更新docker容器中的文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -v &lt;宿主机绝对目录&gt;:&lt;容器绝对路径&gt;</span><br><span class="line"></span><br><span class="line">docker run -d -p 80 --name website -v $PWD/website:/var/www/html/website xiaotang/nginx nginx</span><br></pre></td></tr></table></figure>

<h3 id="docker-启动所有的容器"><a href="#docker-启动所有的容器" class="headerlink" title="docker 启动所有的容器"></a>docker 启动所有的容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start $(docker ps -aq)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派切换openjdk版本</title>
    <url>/2019/10/23/2019-10-23-%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%87%E6%8D%A2openjdk%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="树莓派安装openjdk"><a href="#树莓派安装openjdk" class="headerlink" title="树莓派安装openjdk"></a>树莓派安装openjdk</h3><p>将tf卡烧制好官方推荐的操作系统 <a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">Raspbian</a></p>
<p><img src="1.png" alt="Raspbian"></p>
<p><img src="2.png" alt="Raspbian"></p>
<p>再将树莓派插上电源启动，</p>
<p><img src="3.png" alt></p>
<p><img src="4.png" alt></p>
<p>Raspbian系统自带的是jdk是openjdk11的，但我还需要使用jdk8的，因此需要下载openjdk8</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里安装的不能是openjdk-8-jre，不然在jenkins配置jdk时，openjdk-8的安装目录是不能使用的，因为装的是openjdk-8-jre，而安装openjdk-8-jre会将open-8-jre一起安装</p>
</blockquote>
<p><img src="7.png" alt="sudo apt-get install openjdk-8-jdk"></p>
<p>安装成功后，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>显示的仍旧是openjdk11，因此需要进行切换</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>

<p><img src="5.png" alt></p>
<p>同时该命令将安装的各个jdk地址也显示出来了。</p>
<p><code>/usr/lib/jvm</code></p>
<blockquote>
<p>如果操作的时候出错，提示权限不足，则使用sudo命令已管理员身份执行，就可以通过了。</p>
<p>如果update-alternatives没有，则通过 <code>apt-get install update-alternatives</code> 先下载安装命令</p>
</blockquote>
<hr>
<h3 id="树莓派4B-4G内存版"><a href="#树莓派4B-4G内存版" class="headerlink" title="树莓派4B 4G内存版"></a>树莓派4B 4G内存版</h3><p><img src="6.png" alt></p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>openjdk</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-10-15-docker安装redis</title>
    <url>/2019/10/15/2019-10-15-docker%E5%AE%89%E8%A3%85redis/</url>
    <content><![CDATA[<h3 id="下载拉取Redis镜像"><a href="#下载拉取Redis镜像" class="headerlink" title="下载拉取Redis镜像"></a>下载拉取Redis镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt></p>
<h3 id="运行docker"><a href="#运行docker" class="headerlink" title="运行docker"></a>运行docker</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name some-redis -d redis</span><br></pre></td></tr></table></figure>

<p>其它启动方式：</p>
<p>启动redis实例并指定<strong>端口</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name redis -d -p 6379:6379 redis</span><br></pre></td></tr></table></figure>

<p>启动redis实例，指定<strong>端口</strong>和<strong>密码</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name redis -d -p 6379:6379 redis --requirepass "123456"</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>解决springboot的websocket无法注入service的问题</title>
    <url>/2019/10/12/2019-10-12-springboot%E7%9A%84websocket%E6%97%A0%E6%B3%95%E6%B3%A8%E5%85%A5service/</url>
    <content><![CDATA[<h3 id="使用main方法启动的内置tomcat方法"><a href="#使用main方法启动的内置tomcat方法" class="headerlink" title="使用main方法启动的内置tomcat方法"></a>使用main方法启动的内置tomcat方法</h3><h4 id="springboot启动类"><a href="#springboot启动类" class="headerlink" title="springboot启动类"></a>springboot启动类</h4><p>在启动类给websocket拦截器注入应用上下文，以供拦截中获取 <em>service</em> 使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(exclude= &#123;DataSourceAutoConfiguration.class&#125;)</span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@ImportResource</span>(&#123;<span class="string">"classpath:dubbo.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorpApplication</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext applicationContext = SpringApplication.run(CorpApplication.class, args);</span><br><span class="line">        WebSocketHandshakeInterceptor.setApplicationContext(applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="websocket拦截器"><a href="#websocket拦截器" class="headerlink" title="websocket拦截器"></a>websocket拦截器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.global.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.api.AccountApi;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.dto.AccountDto;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.service.AiWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.pay.common.emun.LogTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServletServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketHandshakeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在启动类中调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span></span>&#123;</span><br><span class="line">        applicationContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Exception e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After Handshake"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LogTemplate.LogForInfo(<span class="string">"before Handshake"</span>);</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ServletServerHttpRequest) &#123;</span><br><span class="line">            ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request;</span><br><span class="line">            HttpSession session = servletRequest.getServletRequest().getSession();</span><br><span class="line">            <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">                HttpServletRequest req = ((ServletServerHttpRequest) request).getServletRequest();</span><br><span class="line">                String account = req.getParameter(<span class="string">"account"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//使用account区分WebSocketHandler，以便定向发送消息</span></span><br><span class="line">                AccountDto accountDto = (AccountDto) session.getAttribute(AiWebSocketHandler.WEBSOCKET_USERINFO);</span><br><span class="line">                <span class="keyword">if</span> (accountDto == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 获取accountApi</span></span><br><span class="line">                    AccountApi accountApi = applicationContext.getBean(AccountApi.class);</span><br><span class="line">                    accountDto = accountApi.getAccount(account);</span><br><span class="line">                &#125;</span><br><span class="line">                attributes.put(AiWebSocketHandler.WEBSOCKET_USERINFO, accountDto);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>部署到测试环境，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AccountApi accountApi = applicationContext.getBean(AccountApi.class);</span><br></pre></td></tr></table></figure>

<p>直接报错，因为测试环境不是用的内置tomcat，不会调用Springboot的启动类，所以 <code>applicationContext</code>自然为空，自然会报错。</p>
<hr>
<h3 id="部署到Tomcat启动应用，获取service的方法"><a href="#部署到Tomcat启动应用，获取service的方法" class="headerlink" title="部署到Tomcat启动应用，获取service的方法"></a>部署到Tomcat启动应用，获取service的方法</h3><h3 id="将-WebSocketHandshakeInterceptor-添加到spring的应用上下文中"><a href="#将-WebSocketHandshakeInterceptor-添加到spring的应用上下文中" class="headerlink" title="将 WebSocketHandshakeInterceptor 添加到spring的应用上下文中"></a>将 WebSocketHandshakeInterceptor 添加到spring的应用上下文中</h3><blockquote>
<p>使用 WebSocketConfig 中注入 WebSocketHandshakeInterceptor </p>
<p>WebSocketConfig 相当于是 xml配置文件</p>
</blockquote>
<h4 id="1、方法一-（通过-Bean）"><a href="#1、方法一-（通过-Bean）" class="headerlink" title="1、方法一 （通过@Bean）"></a>1、方法一 （通过@Bean）</h4><h5 id="websocket配置文件"><a href="#websocket配置文件" class="headerlink" title="websocket配置文件"></a>websocket配置文件</h5><blockquote>
<p>必须加上<code>@Configuration</code>注解，<code>Spring</code>才能统一管理当前的拦截器实例。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.global.interceptors.WebSocketHandshakeInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.service.AiWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.注册WebSocket</span></span><br><span class="line">        <span class="comment">// webSocketHandshakeInterceptor()调用下面@Bean里的方法</span></span><br><span class="line">        registry.addHandler(webSocketHandler(), <span class="string">"/websocket"</span>)</span><br><span class="line">			.addInterceptors(webSocketHandshakeInterceptor())</span><br><span class="line">			.setAllowedOrigins(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.注册SockJS，提供SockJS支持(主要是兼容ie8)</span></span><br><span class="line">        registry.addHandler(webSocketHandler(),<span class="string">"/websocket"</span>)</span><br><span class="line">            .addInterceptors(webSocketHandshakeInterceptor())</span><br><span class="line">            .setAllowedOrigins(<span class="string">"*"</span>)</span><br><span class="line">            .withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TextWebSocketHandler <span class="title">webSocketHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AiWebSocketHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebSocketHandshakeInterceptor <span class="title">webSocketHandshakeInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebSocketHandshakeInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>之前 WebSocketConfig 配置了 <code>WebSocketHandshakeInterceptor</code>，springboot启动一直报错，<code>WebSocketHandshakeInterceptor</code>不能被重写</p>
</blockquote>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED <span class="keyword">TO</span> START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">The bean <span class="string">'webSocketHandshakeInterceptor'</span>, defined <span class="keyword">in</span> <span class="keyword">class</span> path resource [com/gonghui/intelligentization/config/WebSocketConfig.<span class="keyword">class</span>], could <span class="keyword">not</span> be registered. A bean <span class="keyword">with</span> that <span class="keyword">name</span> has already been defined <span class="keyword">in</span> <span class="keyword">file</span> [E:\tangliangdong\gfp-intelligentization-<span class="keyword">platform</span>\corp\target\classes\com\gonghui\intelligentization\global\interceptors\WebSocketHandshakeInterceptor.<span class="keyword">class</span>] <span class="keyword">and</span> overriding <span class="keyword">is</span> disabled.</span><br></pre></td></tr></table></figure>

<p>因为在 <code>WebSocketHandshakeInterceptor</code>类上加了 <code>@Component</code>，因此不能再次注入了</p>
<h5 id="websocket拦截器（游离在spring应用上下文环境之外）"><a href="#websocket拦截器（游离在spring应用上下文环境之外）" class="headerlink" title="websocket拦截器（游离在spring应用上下文环境之外）"></a>websocket拦截器（游离在spring应用上下文环境之外）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.global.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.api.AccountApi;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.dto.AccountDto;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.service.AiWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.pay.common.emun.LogTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServletServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketHandshakeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已经将 WebSocketHandshakeInterceptor 接入spring的上下文环境了，所以可以直接注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountApi accountApi;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Exception e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After Handshake"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LogTemplate.LogForInfo(<span class="string">"before Handshake"</span>);</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ServletServerHttpRequest) &#123;</span><br><span class="line">            ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request;</span><br><span class="line">            HttpSession session = servletRequest.getServletRequest().getSession();</span><br><span class="line">            <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">                HttpServletRequest req = ((ServletServerHttpRequest) request).getServletRequest();</span><br><span class="line">                String account = req.getParameter(<span class="string">"account"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//使用userName区分WebSocketHandler，以便定向发送消息</span></span><br><span class="line">                AccountDto accountDto = (AccountDto) session.getAttribute(AiWebSocketHandler.WEBSOCKET_USERINFO);</span><br><span class="line">                <span class="keyword">if</span> (accountDto == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    accountDto = accountApi.getAccount(account);</span><br><span class="line">                &#125;</span><br><span class="line">                attributes.put(AiWebSocketHandler.WEBSOCKET_USERINFO, accountDto);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、方法二-（通过-Component-实现注入）"><a href="#2、方法二-（通过-Component-实现注入）" class="headerlink" title="2、方法二 （通过 @Component 实现注入）"></a>2、方法二 （通过 @Component 实现注入）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 在WebSocketHandshakeInterceptor加上了@Component，已经成功加入到应用上下文，可以直接注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebSocketHandshakeInterceptor webSocketHandshakeInterceptor;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AiWebSocketHandler aiWebSocketHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 1.注册WebSocket</span></span><br><span class="line">        <span class="comment">// 直接使用 @Autowired注入的类</span></span><br><span class="line">        registry.addHandler(aiWebSocketHandler, <span class="string">"/websocket"</span>)</span><br><span class="line">                .addInterceptors(webSocketHandshakeInterceptor)</span><br><span class="line">                .setAllowedOrigins(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.注册SockJS，提供SockJS支持(主要是兼容ie8)</span></span><br><span class="line">        registry.addHandler(aiWebSocketHandler, <span class="string">"/websocket"</span>)</span><br><span class="line">                .addInterceptors(webSocketHandshakeInterceptor)</span><br><span class="line">                .setAllowedOrigins(<span class="string">"*"</span>)</span><br><span class="line">                .withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>websocket拦截器类上要加上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br></pre></td></tr></table></figure>

<hr>
<p>在此感谢公司带我的 CTO 雷老板 ヾ(๑╹◡╹)ﾉ”</p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装mysql</title>
    <url>/2019/10/11/2019-10-11-docker%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<h3 id="1-docker中搜索可用镜像"><a href="#1-docker中搜索可用镜像" class="headerlink" title="1. docker中搜索可用镜像"></a>1. docker中搜索可用镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt></p>
<blockquote>
<p>如果需要查看mysql可用的版本标签号，则需要去 <a href="https://hub.docker.com/" target="_blank" rel="noopener"><em>docker register</em></a> 查看。</p>
</blockquote>
<p><img src="2.png" alt></p>
<h3 id="2-拉取MySQL镜像"><a href="#2-拉取MySQL镜像" class="headerlink" title="2. 拉取MySQL镜像"></a>2. 拉取MySQL镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>

<p><img src="3.png" alt></p>
<h3 id="3-查看本地mysql镜像"><a href="#3-查看本地mysql镜像" class="headerlink" title="3. 查看本地mysql镜像"></a>3. 查看本地mysql镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image ls mysql</span><br></pre></td></tr></table></figure>

<p><img src="4.png" alt></p>
<h3 id="4-生成并运行mysql容器"><a href="#4-生成并运行mysql容器" class="headerlink" title="4. 生成并运行mysql容器"></a>4. 生成并运行mysql容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mysql5.7 -e MYSQL_ROOT_PASSWORD=123456 -d -i -p 3306:3306 --restart=always  mysql:5.7 mysqld --lower_case_table_names=1</span><br></pre></td></tr></table></figure>

<p><img src="5.png" alt></p>
<p>以上参数的含义：</p>
<ul>
<li>–name mysql5.7  将容器命名为mysql5.7，后面可以用这个name进行容器的启动暂停等操作</li>
<li>-e  MYSQL_ROOT_PASSWORD=123456 设置MySQL密码为123456</li>
<li>-d  此容器在后台运行,并且返回容器的ID</li>
<li>-i  以交互模式运行容器</li>
<li>-p  进行端口映射，格式为<code>主机(宿主)端口:容器端口</code></li>
<li>–restart=always  当docker重启时，该容器自动重启</li>
<li>–lower_case_table_names=1  数据库表名不区分大小写，在window下是不区分大小写的， 可能在本地运行是OK的，但是一旦到测试环境就不行了。</li>
</ul>
<div class="note danger">
            <p>如果在创建容器的时候有些属性未设置，比如 <code>lower_case_table_names</code>，<code>MYSQL_ROOT_PASSWORD</code>, 可以去到</p><p><code>/var/lib/docker/containers/&lt;container id&gt;</code> 文件目录下，可以修改下面两个文件的参数</p><ul><li>hostconfig.json</li><li>config.v2.json</li></ul><p>然后重启 docker，其中的参数才会生效，只是重启容器是无效的。</p>
          </div>



<h3 id="进入mysql容器"><a href="#进入mysql容器" class="headerlink" title="进入mysql容器"></a>进入mysql容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -ti mysql /bin/bash</span><br></pre></td></tr></table></figure>

<p><img src="6.png" alt></p>
<blockquote>
<p>很多参数的修改都不用进入到容器中，而是在创建容器的时候就赋予了的。</p>
</blockquote>
<hr>
<p>参考自 <a href="https://juejin.im/post/5babba8e5188255c960c3c63" target="_blank" rel="noopener">瑜戈的基于docker安装MySQL</a></p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>spring实现websocket</title>
    <url>/2019/09/30/2019-9-30-websocket-spring/</url>
    <content><![CDATA[<h3 id="三种方式配置websocket"><a href="#三种方式配置websocket" class="headerlink" title="三种方式配置websocket"></a>三种方式配置websocket</h3><ul>
<li>使用Java提供的@ServerEndpoint注解实现</li>
<li>使用Spring提供的低层级WebSocket API实现</li>
<li>使用STOMP消息实现</li>
</ul>
<hr>
<blockquote>
<p>要注意所需的包要兼容，不然可能无法初始化 <code>bean</code></p>
</blockquote>
<h4 id="一、使用Java提供的-ServerEndpoint注解实现"><a href="#一、使用Java提供的-ServerEndpoint注解实现" class="headerlink" title="一、使用Java提供的@ServerEndpoint注解实现"></a>一、使用Java提供的@ServerEndpoint注解实现</h4><blockquote>
<p>使用@ServerEndpoint注解监听一个WebSocket请求路径：</p>
</blockquote>
<p>这里监听的是 <code>/websocket</code> ，后面的<code>{account}</code>是websocket建立连接时传递的参数，在方法里通过 <code>@PathParam(&quot;account&quot;) String account</code> 来获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/websocket/&#123;account&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketEndpoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Session session, @PathParam(<span class="string">"account"</span>)</span>String account) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"已连接"</span>);</span><br><span class="line">        System.out.println(<span class="string">"用户"</span>+account+<span class="string">" 登录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Session session, String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        session.getBasicRemote().sendText(<span class="string">"Receive message: "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Session session, Throwable t)</span></span>&#123;</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"连接关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>WebSocket</code> 配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.service.WebSocketEndpoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * websocket相关配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebSocketEndpoint <span class="title">WebSocketEndpoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebSocketEndpoint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="二、使用Spring提供的低层级WebSocket-API实现"><a href="#二、使用Spring提供的低层级WebSocket-API实现" class="headerlink" title="二、使用Spring提供的低层级WebSocket API实现"></a>二、使用Spring提供的低层级WebSocket API实现</h4><h5 id="1-添加一个WebSocketHandler："><a href="#1-添加一个WebSocketHandler：" class="headerlink" title="1. 添加一个WebSocketHandler："></a>1. 添加一个WebSocketHandler：</h5><p>定义一个继承了AbstractWebSocketHandler类的消息处理类，然后自定义对”建立连接“、”接收/发送消息“、”异常情况“等情况进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AiWebSocketHandler</span> <span class="keyword">extends</span> <span class="title">TextWebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(WebSocketHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//已建立连接的用户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ArrayList&lt;WebSocketSession&gt; users = <span class="keyword">new</span> ArrayList&lt;WebSocketSession&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理前端发送的文本信息</span></span><br><span class="line"><span class="comment">     * js调用websocket.send时候，会调用该方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String username = (String) session.getAttributes().get(<span class="string">"WEBSOCKET_USERNAME"</span>);</span><br><span class="line">        <span class="comment">// 获取提交过来的消息详情</span></span><br><span class="line">        LOGGER.debug(<span class="string">"收到用户 "</span> + username + <span class="string">"的消息:"</span> + message.toString());</span><br><span class="line">        <span class="comment">//回复一条信息，</span></span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> TextMessage(<span class="string">"reply msg:"</span> + message.getPayload()));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当新连接建立的时候，被调用</span></span><br><span class="line"><span class="comment">     * 连接成功时候，会触发页面上onOpen方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        users.add(session);</span><br><span class="line">        String username = (String) session.getAttributes().get(<span class="string">"WEBSOCKET_USERNAME"</span>);</span><br><span class="line">        LOGGER.info(<span class="string">"用户 "</span> + username + <span class="string">" Connection Established"</span>);</span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> TextMessage(username + <span class="string">" connect"</span>));</span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> TextMessage(<span class="string">"hello wellcome"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当连接关闭时被调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String username = (String) session.getAttributes().get(<span class="string">"WEBSOCKET_USERNAME"</span>);</span><br><span class="line">        LOGGER.info(<span class="string">"用户 "</span> + username + <span class="string">" Connection closed. Status: "</span> + status);</span><br><span class="line">        users.remove(session);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传输错误时调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String username = (String) session.getAttributes().get(<span class="string">"WEBSOCKET_USERNAME"</span>);</span><br><span class="line">        <span class="keyword">if</span> (session.isOpen()) &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.debug(<span class="string">"用户: "</span> + username + <span class="string">" websocket connection closed......"</span>);</span><br><span class="line">        users.remove(session);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给所有在线用户发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToUsers</span><span class="params">(TextMessage message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (WebSocketSession user : users) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (user.isOpen()) &#123;</span><br><span class="line">                    user.sendMessage(message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给某个用户发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToUser</span><span class="params">(String userName, TextMessage message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (WebSocketSession user : users) &#123;</span><br><span class="line">            <span class="keyword">if</span> (user.getAttributes().get(<span class="string">"WEBSOCKET_USERNAME"</span>).equals(userName)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (user.isOpen()) &#123;</span><br><span class="line">                        user.sendMessage(message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-创建一个WebSocket握手拦截器"><a href="#2-创建一个WebSocket握手拦截器" class="headerlink" title="2. 创建一个WebSocket握手拦截器"></a>2. 创建一个WebSocket握手拦截器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.global.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServletServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketHandshakeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span></span>&#123;</span><br><span class="line">        applicationContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Exception e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After Handshake"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LogTemplate.LogForInfo(<span class="string">"before Handshake"</span>);</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ServletServerHttpRequest) &#123;</span><br><span class="line">            ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request;</span><br><span class="line">            HttpSession session = servletRequest.getServletRequest().getSession();</span><br><span class="line">            <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">                HttpServletRequest req = ((ServletServerHttpRequest) request).getServletRequest();</span><br><span class="line">                <span class="comment">// websocket连接传递的参数 account</span></span><br><span class="line">                String account = req.getParameter(<span class="string">"account"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//使用userName区分WebSocketHandler，以便定向发送消息</span></span><br><span class="line">                String userName = (String) session.getAttribute(<span class="string">"SESSION_USERNAME"</span>);</span><br><span class="line">                <span class="keyword">if</span> (userName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    userName = <span class="string">"system-"</span> + session.getId();</span><br><span class="line">                &#125;</span><br><span class="line">                attributes.put(<span class="string">"SESSION_USERNAME"</span>, accountDto);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-Spring-WebSocket的配置文件，采用的是注解的方式"><a href="#3-Spring-WebSocket的配置文件，采用的是注解的方式" class="headerlink" title="3. Spring WebSocket的配置文件，采用的是注解的方式"></a>3. Spring WebSocket的配置文件，采用的是注解的方式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.global.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.注册WebSocket</span></span><br><span class="line"></span><br><span class="line">        registry.addHandler(webSocketHandler(), <span class="string">"/websocket"</span>).</span><br><span class="line">                addInterceptors(<span class="keyword">new</span> WebSocketHandshakeInterceptor()).setAllowedOrigins(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.注册SockJS，提供SockJS支持(主要是兼容ie8)</span></span><br><span class="line">		registry.addHandler(webSocketHandler(),<span class="string">"/websocket"</span>).</span><br><span class="line">                addInterceptors(<span class="keyword">new</span> WebSocketHandshakeInterceptor()).setAllowedOrigins(<span class="string">"*"</span>).</span><br><span class="line">                withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TextWebSocketHandler <span class="title">webSocketHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AiWebSocketHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前端页面配置"><a href="#前端页面配置" class="headerlink" title="前端页面配置"></a>前端页面配置</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Java后端WebSocket的Tomcat实现&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    请输入：&lt;textarea rows="3" cols="100" id="inputMsg" name="inputMsg"&gt;&lt;/textarea&gt;</span><br><span class="line">	&lt;button οnclick="doSend();" id="button"&gt;发送&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type="text/javascript" src="http://cdn.bootcss.com/jquery/3.1.0/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type="text/javascript" src="http://cdn.bootcss.com/sockjs-client/1.1.1/sockjs.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    var websocket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//判断当前浏览器是否支持WebSocket</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'WebSocket'</span> in window) &#123;</span><br><span class="line">        <span class="comment">//Websocket的连接</span></span><br><span class="line">        websocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:9999/websocket?account=13567175138"</span>);<span class="comment">//WebSocket对应的地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'MozWebSocket'</span> in window) &#123;</span><br><span class="line">        <span class="comment">//Websocket的连接</span></span><br><span class="line">        websocket = <span class="keyword">new</span> MozWebSocket(<span class="string">"ws://localhost:9999/websocket"</span>);<span class="comment">//SockJS对应的地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//SockJS的连接</span></span><br><span class="line">        websocket = <span class="keyword">new</span> SockJS(<span class="string">"ws://localhost:9999/websocket"</span>);    <span class="comment">//SockJS对应的地址</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    websocket.onopen = onOpen;</span><br><span class="line">    websocket.onmessage = onMessage;</span><br><span class="line">    websocket.onerror = onError;</span><br><span class="line">    websocket.onclose = onClose;</span><br><span class="line"> </span><br><span class="line">    <span class="function">function <span class="title">onOpen</span><span class="params">(openEvt)</span> </span>&#123;</span><br><span class="line">    	console.log(<span class="string">"成功连接"</span>)</span><br><span class="line">    	console.log(openEvt)</span><br><span class="line">        <span class="comment">//alert(openEvt.Data);</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function">function <span class="title">onMessage</span><span class="params">(evt)</span> </span>&#123;</span><br><span class="line">        console.log(evt.data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">function <span class="title">onError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	console.log(<span class="string">"websocket出现错误"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">function <span class="title">onClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	console.log(<span class="string">"websocket关闭"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(function()&#123;</span><br><span class="line">        $(<span class="string">"#button"</span>).click(function(e)&#123;</span><br><span class="line">            console.log(e)</span><br><span class="line">            <span class="keyword">if</span> (websocket.readyState == websocket.OPEN) &#123;</span><br><span class="line">                var msg = document.getElementById(<span class="string">"inputMsg"</span>).value;</span><br><span class="line">                console.log(msg)</span><br><span class="line">                websocket.send(msg);<span class="comment">//调用后台handleTextMessage方法</span></span><br><span class="line">                console.log((<span class="string">"发送成功!"</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                console.log((<span class="string">"连接失败!"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="三、使用STOMP消息实现"><a href="#三、使用STOMP消息实现" class="headerlink" title="三、使用STOMP消息实现"></a>三、使用STOMP消息实现</h4><p>STOMP是一个用于C/S之间进行异步消息传输的简单文本协议, 全称是Simple Text Oriented Messaging Protocol。</p>
<blockquote>
<p>其实STOMP协议并不是为WS所设计的, 它其实是消息队列的一种协议, 和AMQP,JMS是平级的。 只不过由于它的简单性恰巧可以用于定义WS的消息体格式。 目前很多服务端消息队列都已经支持了STOMP, 比如RabbitMQ, Apache ActiveMQ等。很多语言也都有STOMP协议的客户端解析库，像JAVA的Gozirra，C的libstomp，Python的pyactivemq，JavaScript的stomp.js等等。</p>
</blockquote>
<h4 id="1、Spring配置STOMP消息"><a href="#1、Spring配置STOMP消息" class="headerlink" title="1、Spring配置STOMP消息"></a>1、Spring配置STOMP消息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.global.interceptors.WebSocketInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.ChannelRegistration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketTransportRegistration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * websocket相关配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//用来注册Endpoint，“/gs-guide-websocket”即为客户端尝试建立连接的地址。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 需要 setAllowedOrigins("*")，不然无法访问</span></span><br><span class="line">        registry.addEndpoint(<span class="string">"/stomp-websocket"</span>)</span><br><span class="line">            .setAllowedOrigins(<span class="string">"*"</span>)</span><br><span class="line">            .withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//实现WebSocketMessageBrokerConfigurer中的此方法，配置消息代理（broker）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry config)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//将"message"前缀绑定到MessageMapping注解指定的方法上。如"message/hello"被指定用greeting()方法来处理.</span></span><br><span class="line">        config.setApplicationDestinationPrefixes(<span class="string">"/message"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//启用SimpleBroker，使得订阅到此"topic"前缀的客户端可以收到greeting消息.</span></span><br><span class="line">        config.enableSimpleBroker(<span class="string">"/ai"</span>, <span class="string">"/user"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//点对点推送时，客户端订阅消息的前缀,/user为默认值，也需把 '/user' 添加到 enableSimpleBroker()中。</span></span><br><span class="line">        config.setUserDestinationPrefix(<span class="string">"/user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureWebSocketTransport</span><span class="params">(WebSocketTransportRegistration registry)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureClientInboundChannel</span><span class="params">(ChannelRegistration registration)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureClientOutboundChannel</span><span class="params">(ChannelRegistration registration)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addReturnValueHandlers</span><span class="params">(List&lt;HandlerMethodReturnValueHandler&gt; returnValueHandlers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;MessageConverter&gt; messageConverters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、收发消息的控制器"><a href="#2、收发消息的控制器" class="headerlink" title="2、收发消息的控制器"></a>2、收发消息的控制器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.MessageMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.SendTo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.annotation.SendToUser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.SimpMessagingTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/10/8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 9:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpMessagingTemplate simpMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @SendTo 群发推送</span></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@SendTo</span>(<span class="string">"/ai/greetings"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"account"</span>, account);</span><br><span class="line">        map.put(<span class="string">"content"</span>, <span class="string">"hello "</span>+ account);</span><br><span class="line">        <span class="keyword">return</span> JSONObject.toJSONString(map);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// SendToUser为点对点推送</span></span><br><span class="line">    <span class="comment">// 客户端需订阅 '/user/&#123;account&#125;/ai/message'</span></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/queue"</span>)</span><br><span class="line">	<span class="meta">@SendToUser</span>(<span class="string">"/ai/message"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queue</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"account"</span>, account);</span><br><span class="line">        map.put(<span class="string">"content"</span>, <span class="string">"hello "</span>+ account);</span><br><span class="line">        simpMessagingTemplate.convertAndSendToUser(account, <span class="string">"/queue/greetings"</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务端主动向客户端进行一对一推送"><a href="#服务端主动向客户端进行一对一推送" class="headerlink" title="服务端主动向客户端进行一对一推送"></a>服务端主动向客户端进行一对一推送</h4><ul>
<li>simpMessagingTemplate.convertAndSend(String destination, Object payload); // 群发</li>
<li>simpMessagingTemplate.convertAndSendToUser(String user, String destination, Object payload); // 一对一<ul>
<li><em>user</em> 是发送的用户标识</li>
<li><em>destination</em> 是发送路径</li>
<li><em>payload</em> 是发送的消息</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.service.websocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.dto.AccountWebSocketDto;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.dto.AiWebsocketAlarmDto;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.SimpMessagingTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/10/8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 15:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"AiWebsocketService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AiWebsocketService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供给用户发送消息处理</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpMessagingTemplate simpMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToUser</span><span class="params">(String account, Map&lt;String, Object&gt; data)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给某个用户发送消息"</span>);</span><br><span class="line">        <span class="comment">// 实际发送的地址是 /user/&#123;account&#125;/ai/websocket</span></span><br><span class="line">        <span class="comment">// 客户端订阅的websocket地址为 /user/&#123;account&#125;/ai/websocket</span></span><br><span class="line">        simpMessagingTemplate.convertAndSendToUser(account, <span class="string">"/ai/websocket"</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToUser</span><span class="params">(Map&lt;String, Object&gt; data)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给某个用户发送消息"</span>);</span><br><span class="line">        <span class="comment">// 实际发送的地址是 /user/&#123;account&#125;/ai/websocket</span></span><br><span class="line">        <span class="comment">// 客户端订阅的websocket地址为 /user/&#123;account&#125;/ai/websocket</span></span><br><span class="line">        simpMessagingTemplate.convertAndSend(<span class="string">"/ai/message"</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、前端页面-SockJS"><a href="#4、前端页面-SockJS" class="headerlink" title="4、前端页面 SockJS"></a>4、前端页面 SockJS</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//使用SockJS和stomp.js来打开“gs-guide-websocket”地址的连接，这也是我们使用Spring构建的SockJS服务。</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.1.4/sockjs.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> socket = <span class="keyword">new</span> SockJS(<span class="string">'http://localhost:9998/stomp-websocket'</span>);</span></span><br><span class="line"><span class="undefined">        stompClient = Stomp.over(socket);</span></span><br><span class="line"><span class="actionscript">        stompClient.connect(&#123;&#125;, <span class="function"><span class="keyword">function</span> <span class="params">(frame)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//连接成功后的回调方法</span></span></span><br><span class="line"><span class="actionscript">            setConnected(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'Connected: '</span> + frame);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//订阅/ai/greetings地址，当服务端向此地址发送消息时，客户端即可收到。</span></span></span><br><span class="line"><span class="actionscript">            stompClient.subscribe(<span class="string">'/ai/greetings'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(greeting)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//收到消息时的回调方法，展示欢迎信息。</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(greeting.body).content);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 订阅一对一发送消息接口， 'xiaotang' 为用户标识</span></span></span><br><span class="line"><span class="actionscript">            stompClient.subscribe(<span class="string">'/user/xiaotang/ai/websocket'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(greeting)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//收到消息时的回调方法，展示欢迎信息。</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(greeting.body).content);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//断开连接的方法</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">disconnect</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (stompClient !== <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="undefined">            stompClient.disconnect();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        setConnected(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"Disconnected"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//将用户输入的账号信息,使用STOMP客户端发送到"/message/hello"地址。它正是我们在GreetingController中定义的greeting()方法所处理的地址.</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">sendName</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        stompClient.send(<span class="string">"/message/hello"</span>, &#123;&#125;, <span class="built_in">JSON</span>.stringify(&#123;<span class="string">'account'</span>: $(<span class="string">"#account"</span>).val()&#125;));</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>要确保 <code>spring-websocket</code> 、<code>spring-messaging</code>与 <code>spring-core</code> 的版本号一致，不然会无法创建 <em>bean</em></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-messaging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>转载自：</p>
<ul>
<li><a href="https://www.zifangsky.cn/1355.html" target="_blank" rel="noopener">Spring Boot中使用WebSocket总结（一）：几种实现方式详解</a></li>
<li><a href="https://blog.csdn.net/zsg88/article/details/76862495" target="_blank" rel="noopener">使用spring-websocket包搭建websocket服务</a></li>
</ul>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-8-14-navicat完成离线激活</title>
    <url>/2019/08/14/2019-8-14-navicat%E5%AE%8C%E6%88%90%E7%A6%BB%E7%BA%BF%E6%BF%80%E6%B4%BB/</url>
    <content><![CDATA[<p>这份repo将会告诉你Navicat是怎么完成离线激活的。</p>
<p><a href="https://blog.csdn.net/wqq1027/article/details/86677079" target="_blank" rel="noopener">注册机是怎么工作的?</a></p>
<h2 id="如何使用这个注册机"><a href="#如何使用这个注册机" class="headerlink" title="如何使用这个注册机"></a>如何使用这个注册机</h2><ol>
<li><p><a href="https://github.com/DoubleLabyrinth/navicat-keygen/releases" target="_blank" rel="noopener">从这里</a>下载最新的release。</p>
</li>
<li><p>使用<code>navicat-patcher.exe</code>替换掉<code>navicat.exe</code>和<code>libcc.dll</code>里的Navicat激活公钥。</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">navicat-patcher</span><span class="selector-class">.exe</span> &lt;<span class="selector-tag">Navicat</span> <span class="selector-tag">installation</span> <span class="selector-tag">path</span>&gt; <span class="selector-attr">[RSA-2048 PEM file]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;Navicat installation path&gt;</code>: Navicat的完整安装路径。</li>
</ul>
<p><strong>这个参数必须指定。</strong></p>
<ul>
<li><code>[RSA-2048 PEM file]</code>: RSA-2048私钥文件的完整路径或相对路径。</li>
</ul>
<p><strong>这个参数是可选的。</strong> 如果未指定，<code>navicat-patcher.exe</code>将会在当前目录生成一个新的RSA-2048私钥文件。</p>
<p><strong>例如：(在cmd.exe中)</strong> </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">navicat-patcher<span class="selector-class">.exe</span> <span class="string">"C:\Program Files\PremiumSoft\Navicat Premium 12"</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>地址字符串必须用双引号，使用单引号会报错</p>
</blockquote>
<p><img src="3.png" alt></p>
<hr>
<p><strong>Navicat Premium 12.1.12 简体中文版已通过测试</strong>。下面将是一份样例输出。</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">***************************************************</span><br><span class="line">*       Navicat Patcher by @DoubleLabyrinth       *</span><br><span class="line">*           Release date: Jan<span class="number"> 19 </span>2019             *</span><br><span class="line">***************************************************</span><br><span class="line"> </span><br><span class="line">Press Enter to continue or Ctrl + C to abort.</span><br><span class="line"> </span><br><span class="line">MESSAGE: PatchSolution0 will be omitted.</span><br><span class="line"> </span><br><span class="line">MESSAGE: PatchSolution3: Keywords[0] has been found:</span><br><span class="line">         Relative Machine Code Offset = +0x0000000001644a08</span><br><span class="line">         Relative Machine Code RVA    = +0x0000000001645608</span><br><span class="line">         Patch Offset                 = +0x00000000023d56e4</span><br><span class="line">         Patch Size                   =<span class="number"> 3 </span>byte(s)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">MESSAGE: PatchSolution3: Keywords[110] has been found:</span><br><span class="line">         Relative Machine Code Offset = +0x000000000165155e</span><br><span class="line">         Relative Machine Code RVA    = +0x000000000165215e</span><br><span class="line">         Patch Offset                 = +0x0000000001651561</span><br><span class="line">         Patch Size                   =<span class="number"> 1 </span>byte(s)</span><br><span class="line"> </span><br><span class="line">MESSAGE: PatchSolution2 will be omitted.</span><br><span class="line"> </span><br><span class="line">MESSAGE: PatchSolution1: Keywords[0] has been found: offset = +0x021f7390.</span><br><span class="line">MESSAGE: PatchSolution1: Keywords[1] has been found: offset = +0x0074bd39.</span><br><span class="line">MESSAGE: PatchSolution1: Keywords[2] has been found: offset = +0x021f70a0.</span><br><span class="line">MESSAGE: PatchSolution1: Keywords[3] has been found: offset = +0x0074bd1f.</span><br><span class="line">MESSAGE: PatchSolution1: Keywords[4] has been found: offset = +0x021f708c.</span><br><span class="line"> </span><br><span class="line">MESSAGE: Generating new RSA private key, it may take a long time.</span><br><span class="line">MESSAGE: New RSA private key has been saved to RegPrivateKey.pem.</span><br><span class="line"> </span><br><span class="line">Your RSA public key:</span><br><span class="line">-----BEGIN PUBLIC KEY--<span class="yaml"><span class="meta">---</span></span></span><br><span class="line"><span class="yaml"><span class="string">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsWnV5hQxlXvDA3Ad4k5N</span></span></span><br><span class="line"><span class="yaml"><span class="string">ZLz4cO+iGEPegSovIDcwTo097I+0pXYKPTVl+0iKC5JtJRObb4Xx9yK9gGwqkcxo</span></span></span><br><span class="line"><span class="yaml"><span class="string">o6WzKq0xY1jz7X6obxwlQCNse3Os1wr0rIY0UzP1dCpkW/5MwGbFxiB6PEVqkzmJ</span></span></span><br><span class="line"><span class="yaml"><span class="string">CmHBzZDRu/jAuL1nyoiGnUStqwENNYhyl4k7r8AiJkBZGMOCrj6v0JfgNna25Ce6</span></span></span><br><span class="line"><span class="yaml"><span class="string">QCFojlY4dkYQ5/7njQ3qpLwMeLEXEysMW3aUScSB68/vsHnB4C0fIkwfEPYZ/AC5</span></span></span><br><span class="line"><span class="yaml"><span class="string">AqbWHVbNmveB3rjV+tZZxXcLE8ArgKh1Gs+2VtnL09gwHm6WcpyPZ42G6tMDjWyw</span></span></span><br><span class="line"><span class="yaml"><span class="number">1</span><span class="string">wIDAQAB</span></span></span><br><span class="line"><span class="yaml"><span class="bullet">-</span><span class="bullet">----END</span> <span class="string">PUBLIC</span> <span class="string">KEY-----</span></span></span><br><span class="line"><span class="yaml"> </span></span><br><span class="line"><span class="yaml"><span class="string">******************************************</span></span></span><br><span class="line"><span class="yaml"><span class="string">*</span>            <span class="string">PatchSulution3</span>              <span class="string">*</span></span></span><br><span class="line"><span class="yaml"><span class="string">******************************************</span></span></span><br><span class="line"><span class="yaml"><span class="string">@</span> <span class="string">+023d56e4:</span> <span class="number">4</span><span class="string">D</span> <span class="number">49</span> <span class="number">49</span> <span class="bullet">---&gt;</span> <span class="number">4</span><span class="string">D</span> <span class="number">49</span> <span class="number">49</span></span></span><br><span class="line"><span class="yaml"><span class="string">@</span> <span class="string">+01644a63:</span> <span class="number">42</span> <span class="number">49</span> <span class="bullet">---&gt;</span> <span class="number">42</span> <span class="number">49</span></span></span><br><span class="line"><span class="yaml"><span class="string">@</span> <span class="string">+01644a68:</span> <span class="number">6</span><span class="string">A</span> <span class="bullet">---&gt;</span> <span class="number">6</span><span class="string">A</span></span></span><br><span class="line"><span class="yaml"><span class="string">@</span> <span class="string">+01644ace:</span> <span class="number">41</span> <span class="bullet">---&gt;</span> <span class="number">41</span></span></span><br><span class="line"><span class="yaml"><span class="string">...</span></span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">@ +023d58d4:<span class="number"> 36 </span>63 6A ---&gt;<span class="number"> 47 </span>36 74</span><br><span class="line">@ +023d58d8:<span class="number"> 78 </span>6C 6A<span class="number"> 75 </span>75<span class="number"> 51 </span>61 ---&gt; 4D<span class="number"> 44 </span>6A<span class="number"> 57 </span>79<span class="number"> 77 </span>31</span><br><span class="line">@ +023d58e8:<span class="number"> 77 </span>49<span class="number"> 44 </span>41 ---&gt;<span class="number"> 77 </span>49<span class="number"> 44 </span>41</span><br><span class="line">@ +0165155c:<span class="number"> 51 </span>41 ---&gt;<span class="number"> 51 </span>41</span><br><span class="line">@ +01651561:<span class="number"> 42 </span>---&gt; 42</span><br><span class="line"> </span><br><span class="line">******************************************</span><br><span class="line">*            PatchSulution1              *</span><br><span class="line">******************************************</span><br><span class="line">@ +0x021f7390</span><br><span class="line">Previous:</span><br><span class="line">+0x00000000021F7390 <span class="number"> 44 </span>37<span class="number"> 35 </span>31<span class="number"> 32 </span>35<span class="number"> 42 </span>37<span class="number"> 30 </span>37<span class="number"> 36 </span>37<span class="number"> 42 </span>39<span class="number"> 34 </span>31  D75125B70767B941</span><br><span class="line">+0x00000000021F73A0 <span class="number"> 34 </span>35<span class="number"> 42 </span>34<span class="number"> 37 </span>43<span class="number"> 31 </span>43<span class="number"> 42 </span>33<span class="number"> 43 </span>30<span class="number"> 37 </span>35<span class="number"> 35 </span>45  45B47C1CB3C0755E</span><br><span class="line">+0x00000000021F73B0 <span class="number"> 37 </span>43<span class="number"> 43 </span>42<span class="number"> 38 </span>38<span class="number"> 32 </span>35<span class="number"> 43 </span>35<span class="number"> 44 </span>43<span class="number"> 45 </span>30<span class="number"> 43 </span>35  7CCB8825C5DCE0C5</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">@ +0x021f708c</span><br><span class="line">Previous:</span><br><span class="line">+0x00000000021F7080 <span class="number"> 31 </span>32<span class="number"> 32 </span>35 4f<span class="number"> 45 </span>29 2e<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 39 </span>32<span class="number"> 39 </span>33  1225OE).....9293</span><br><span class="line">+0x00000000021F7090 <span class="number"> 33 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>00  3...............</span><br><span class="line">After:</span><br><span class="line">+0x00000000021F7080 <span class="number"> 31 </span>32<span class="number"> 32 </span>35 4f<span class="number"> 45 </span>29 2e<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 32 </span>37<span class="number"> 45 </span>38  1225OE).....27E8</span><br><span class="line">+0x00000000021F7090 <span class="number"> 45 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>00  E...............</span><br><span class="line"> </span><br><span class="line">MESSAGE: Patch has been done successfully.</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>接下来使用<code>navicat-keygen.exe</code>来生成序列号和激活码</li>
</ol>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">navicat-keygen.exe &lt;-bin|-<span class="built_in">text</span>&gt; [-adv] &lt;RSA<span class="number">-2048</span> PrivateKey(PEM <span class="built_in">file</span>)&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;-bin|-text&gt;</code>: 必须是<code>-bin</code>或<code>-text</code>。</li>
</ul>
<p>如果指定了<code>-bin</code>，<code>navicat-keygen.exe</code>最终将生成<code>license_file</code>文件。这个选项是给Navicat旧激活方式使用的。</p>
<p>如果指定了<code>-text</code>，<code>navicat-keygen.exe</code>最终将生成Base64样式的激活码。这个选项是给Navicat新激活方式使用的。</p>
<p><strong>这个参数必须指定。</strong></p>
<ul>
<li><code>[-adv]</code>: 开启高级模式。</li>
</ul>
<p><strong>这个参数是可选的。</strong> 如果指定了这个参数，<code>navicat-keygen.exe</code>将会要求你手工填写产品ID号、语言标识号。这个选项一般是给以后用的。</p>
<ul>
<li><code>&lt;RSA-2048 PrivateKey(PEM file)&gt;</code>: RSA-2048私钥文件的完整路径或相对路径。</li>
</ul>
<p><strong>这个参数必须指定。</strong></p>
<p><strong>例如：(在cmd.exe中)</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">navicat-keygen</span><span class="selector-class">.exe</span> <span class="selector-tag">-text</span> .\<span class="selector-tag">RegPrivateKey</span><span class="selector-class">.pem</span></span><br></pre></td></tr></table></figure>

<p>你会被要求选择Navicat产品类别、语言以及输入主版本号。之后会随机生成一个序列号。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Select Navicat product:</span><br><span class="line"><span class="bullet">0. </span>DataModeler</span><br><span class="line"><span class="bullet">1. </span>Premium</span><br><span class="line"><span class="bullet">2. </span>MySQL</span><br><span class="line"><span class="bullet">3. </span>PostgreSQL</span><br><span class="line"><span class="bullet">4. </span>Oracle</span><br><span class="line"><span class="bullet">5. </span>SQLServer</span><br><span class="line"><span class="bullet">6. </span>SQLite</span><br><span class="line"><span class="bullet">7. </span>MariaDB</span><br><span class="line"><span class="bullet">8. </span>MongoDB</span><br><span class="line"><span class="bullet">9. </span>ReportViewer</span><br><span class="line"> </span><br><span class="line">(Input index)&gt; 1</span><br><span class="line"> </span><br><span class="line">Select product language:</span><br><span class="line"><span class="bullet">0. </span>English</span><br><span class="line"><span class="bullet">1. </span>Simplified Chinese</span><br><span class="line"><span class="bullet">2. </span>Traditional Chinese</span><br><span class="line"><span class="bullet">3. </span>Japanese</span><br><span class="line"><span class="bullet">4. </span>Polish</span><br><span class="line"><span class="bullet">5. </span>Spanish</span><br><span class="line"><span class="bullet">6. </span>French</span><br><span class="line"><span class="bullet">7. </span>German</span><br><span class="line"><span class="bullet">8. </span>Korean</span><br><span class="line"><span class="bullet">9. </span>Russian</span><br><span class="line"><span class="bullet">10. </span>Portuguese</span><br><span class="line"> </span><br><span class="line">(Input index)&gt; 1</span><br><span class="line"> </span><br><span class="line">(Input major version number, range: 0 ~ 15, default: 12)&gt; 12</span><br><span class="line"> </span><br><span class="line">Serial number:</span><br><span class="line">NAVO-2ORP-IN5A-GQEE</span><br><span class="line"> </span><br><span class="line">Your name:</span><br></pre></td></tr></table></figure>

<p>你可以使用这个序列号暂时激活Navicat。</p>
<p>接下来你会被要求输入<code>用户名</code>和<code>组织名</code>；请随便填写，但不要太长。</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Your name: root</span><br><span class="line">Your organization: root</span><br><span class="line">Input request code (<span class="keyword">in</span> Base64), input <span class="literal">empty</span> <span class="built_in">line</span> <span class="built_in">to</span> <span class="keyword">end</span>:</span><br></pre></td></tr></table></figure>

<p>之后你会被要求填入请求码，该请求码是在navicat中输入上方生成序列号进行离线激活后，会生成一段请求码，然后复制过来。注意 <strong>不要关闭命令行</strong>.</p>
<p><strong>断开网络</strong> 并打开Navicat。找到<code>注册</code>窗口，并填入keygen给你的序列号。然后点击<code>激活</code>按钮。</p>
<p><img src="1.png" alt></p>
<p>一般来说在线激活肯定会失败，这时候Navicat会询问你是否<code>手动激活</code>，直接选吧。</p>
<p>在<code>手动激活</code>窗口你会得到一个请求码，复制它并把它粘贴到keygen里。最后别忘了连按至少 <strong>两下回车</strong> 结束输入。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">Your <span class="string">name:</span> root</span><br><span class="line">Your <span class="string">organization:</span> root</span><br><span class="line"></span><br><span class="line">Input request code (<span class="keyword">in</span> Base64), input empty line to <span class="string">end:</span></span><br><span class="line">EnoJQKOD5h08rGvcpxJ288YwA0e5AjIlu<span class="regexp">/WQUVde9rcnjC4RfYPQ83Rp047nohWBn02UELpAt9NAVWp6Nww+4gxQjgkXJ19wb6cRY+V68xLIJbZXmByXBQwWL4X4lB3RxpcS5y2fAk/</span>iipFaFu5XE8yhC1o129IVuuaCE3lwzAuB563BKSKmp4Xr1vSqW6EDeCtKp8PY91nSt4htHF11Sfx8v0ASfdbu75ePTB3Rf<span class="regexp">/nzkbCKv8E63E6mVSRWqDuQ8didqXQhci7qjPICvBD6ne5FZhDGEJi6hNSwdKeTbj/</span>ZUBxFScZYWsskFjVL5u5RcdLo0Gzp8H7YOTI7OfJarg==</span><br><span class="line"></span><br><span class="line">Request <span class="string">Info:</span></span><br><span class="line">&#123;<span class="string">"K"</span>:<span class="string">"NAVADD22GI4NXPU5"</span>, <span class="string">"DI"</span>:<span class="string">"DJym852txVo8XGZkDzPn"</span>, <span class="string">"P"</span>:<span class="string">"WIN"</span>&#125;</span><br><span class="line"></span><br><span class="line">Response <span class="string">Info:</span></span><br><span class="line">&#123;<span class="string">"K"</span>:<span class="string">"NAVADD22GI4NXPU5"</span>,<span class="string">"DI"</span>:<span class="string">"DJym852txVo8XGZkDzPn"</span>,<span class="string">"N"</span>:<span class="string">"root"</span>,<span class="string">"O"</span>:<span class="string">"root"</span>,<span class="string">"T"</span>:<span class="number">1565768523</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">License:</span></span><br><span class="line">GUk9coMkfoI2AtUiQ2PfDjlR6rybOrhY+q6azg5f7H+AwgIsVp6jWS1vb2NgkiXx</span><br><span class="line">u9NuoNeR8T2JiOqRC90umfdEqit0MGaGpDL/Wk6o+HNcKZmdbl9tImhGxxaj3Qib</span><br><span class="line">Yn3EzIQOz+hP7ipoG7kmIxzvmBOok0tDhrOhDzhzsPmAvFxTndQgU5hgCOIcHJVT</span><br><span class="line">PerF<span class="regexp">/SK/</span>lTMHSWqgwNyl2M3APBCxvCIjw6omFNwRXY3JD3zKUIiSWqsQT0mCBDby</span><br><span class="line"><span class="number">4</span>k1V7IhCBzOHpBTHLLbjSG8copp37rgcn8PK0FFL8yUCDCmYzDBvE8B1KTYgmNn6</span><br><span class="line">dWf7BT0jyOoRIoYwIApNmQ==</span><br></pre></td></tr></table></figure>

<p><img src="2.png" alt></p>
<p>如果不出意外，你会得到一个看似用Base64编码的激活码 <em>license</em>。直接复制它，并把它粘贴到Navicat的<code>手动激活</code>窗口，最后点<code>激活</code>按钮。如果没什么意外的话应该能成功激活。</p>
<p>转载至 <a href="https://blog.csdn.net/weixin_43160151/article/details/82913382" target="_blank" rel="noopener">Navicat脱机激活(亲测Navicat for MySQL)</a></p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql实现主从复制</title>
    <url>/2019/08/09/2019-8-9-mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h4 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h4><table>
<thead>
<tr>
<th>角色</th>
<th align="center">系统</th>
<th align="center">mysql 版本</th>
<th align="center">ip</th>
</tr>
</thead>
<tbody><tr>
<td>主</td>
<td align="center">centos7</td>
<td align="center">5.6</td>
<td align="center">192.168.139.132</td>
</tr>
<tr>
<td>从</td>
<td align="center">ubuntu 18.04.2</td>
<td align="center">5.7</td>
<td align="center">192.168.139.131</td>
</tr>
</tbody></table>
<a id="more"></a>

<h4 id="2-两个数据库版本尽量保持一致"><a href="#2-两个数据库版本尽量保持一致" class="headerlink" title="2. 两个数据库版本尽量保持一致"></a>2. 两个数据库版本尽量保持一致</h4><h4 id="3-创建复制账号"><a href="#3-创建复制账号" class="headerlink" title="3. 创建复制账号"></a>3. 创建复制账号</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">// master mysql 5.6</span><br><span class="line">$ mysql -uroot -p</span><br><span class="line">// Enter password</span><br><span class="line">mysql&gt; grant replication slave on *.* to 'backup'@'192.168.139.131' identified by '123456';</span><br><span class="line"></span><br><span class="line">// 如果不行，就执行下面的步骤</span><br><span class="line">mysql&gt; create user 'backup'@'192.168.139.132' identified by '123456';</span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO 'backup'@'192.168.139.132';</span><br></pre></td></tr></table></figure>

<h4 id="4-配置主服务器"><a href="#4-配置主服务器" class="headerlink" title="4. 配置主服务器"></a>4. 配置主服务器</h4><p>mysql5.6 的配置文件在 <code>/etc/my.cnf</code> 中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>找到<code>[mysqld]</code>，在下面添加如下代码</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">1</span> # 服务器id</span><br><span class="line"><span class="attr">log-bin</span> = mysql-bin </span><br><span class="line"><span class="attr">binlog-do-db</span>=gonghui  #需要被复制的数据库名，如果被复制多个数据库，重复设置这个选项即可</span><br><span class="line"><span class="attr">binlog-ignore-db</span>=mysql  #不需要被复制的数据库名</span><br><span class="line"><span class="attr">innodb_flush_log_at_trx_commit</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h4 id="5-配置从服务器"><a href="#5-配置从服务器" class="headerlink" title="5. 配置从服务器"></a>5. 配置从服务器</h4><p>mysql5.7 的配置文件是 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code></p>
<p>找到<code>[mysqld]</code>，在其下加入</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">2</span>  # 服务器id</span><br><span class="line"><span class="attr">log-bin</span> = mysql-bin #binlog日志名</span><br><span class="line"><span class="attr">replicate-do-db</span> = gonghui  #需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可</span><br><span class="line"><span class="attr">replicate-ignore-db</span>= mysql  #不需要复制的数据库名</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置主从服务器的my.cnf时，留心各自的server-id一定要彼此独立，不能重复，否则，会出现如下错误：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Slave: received <span class="keyword">end</span> packet <span class="keyword">FROM</span> <span class="keyword">server</span>, apparent <span class="keyword">master</span> <span class="keyword">shutdown</span></span><br></pre></td></tr></table></figure>

<p>重启主从数据库，即可生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart mysql</span></span><br></pre></td></tr></table></figure>

<p>然后在<strong>主数据库</strong>上输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| mysql-bin.000013 |      881 | gonghui      | mysql            |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br></pre></td></tr></table></figure>

<p>该<em>File</em> 和 <em>Position</em>信息，需要在下一步在从数据库上使用</p>
<h4 id="6-设置从数据库复制参数"><a href="#6-设置从数据库复制参数" class="headerlink" title="6. 设置从数据库复制参数"></a>6. 设置从数据库复制参数</h4><ul>
<li><code>master_log_file</code> 为主数据库的<em>File</em>值</li>
<li><code>master_log_pos</code>为主数据库的<em>Position</em>值</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line"></span><br><span class="line">// 修改参数之前需要先关闭 slave</span><br><span class="line">mysql&gt; stop slave</span><br><span class="line"></span><br><span class="line">mysql&gt; CHANGE MASTER TO master_host = '192.168.139.132',</span><br><span class="line">master_user = 'tld',</span><br><span class="line">master_password = '123456',</span><br><span class="line">master_log_file = 'mysql-bin.000013',</span><br><span class="line">master_log_pos = 881;</span><br><span class="line"></span><br><span class="line">// 修改完毕再开启，即可生效</span><br><span class="line">mysql&gt; start slave</span><br></pre></td></tr></table></figure>

<p>输入以下代码即可查看是否成功完成主从复制，若是如下方所示，就是完成主从复制</p>
<ul>
<li><code>Slave_IO_Running: Yes</code></li>
<li><code>Slave_SQL_Running: Yes</code></li>
</ul>
<blockquote>
<p> 若是没有对应上，则根据<code>Last_SQL_Error</code> 的错误提示进行错误定位并修改</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.139.132</span><br><span class="line">                  Master_User: backup</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000013</span><br><span class="line">          Read_Master_Log_Pos: 881</span><br><span class="line">               Relay_Log_File: ubuntu-relay-bin.000004</span><br><span class="line">                Relay_Log_Pos: 442</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000013</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: gonghui</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 881</span><br><span class="line">              Relay_Log_Space: 650</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0 </span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0 </span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID:</span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:      </span><br><span class="line">           Master_SSL_Crlpath:      </span><br><span class="line">           Retrieved_Gtid_Set:       </span><br><span class="line">            Executed_Gtid_Set:        </span><br><span class="line">                Auto_Position: 0      </span><br><span class="line">         Replicate_Rewrite_DB:          </span><br><span class="line">                 Channel_Name:       </span><br><span class="line">           Master_TLS_Version:      </span><br><span class="line">1 row in set (0.00 sec)     </span><br><span class="line">                  </span><br><span class="line">ERROR:             </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<h3 id="若是要实现双向的主从复制，只要主从对调之后再次执行之前的步骤即可。"><a href="#若是要实现双向的主从复制，只要主从对调之后再次执行之前的步骤即可。" class="headerlink" title="若是要实现双向的主从复制，只要主从对调之后再次执行之前的步骤即可。"></a>若是要实现双向的主从复制，只要主从对调之后再次执行之前的步骤即可。</h3>]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>java</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>linxu上的mysql只能sudo登陆</title>
    <url>/2019/08/08/2019-8-8-linux%E4%B8%8A%E7%9A%84mysql%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="Ubuntu上的数据库修改密码"><a href="#Ubuntu上的数据库修改密码" class="headerlink" title="Ubuntu上的数据库修改密码"></a>Ubuntu上的数据库修改密码</h3><p>Ubuntu上的数据库安装好之后没有提示输入密码，自然后来 <code>mysql -uroot -p</code>不知道是什么密码，均是报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR 1045 (28000): Access denied <span class="keyword">for</span> user <span class="string">'root'</span>@<span class="string">'localhost'</span> (using password: YES)</span><br></pre></td></tr></table></figure>

<p>需要打开一个文件 <code>/etc/mysql/debian.cnf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>

<p><img src="mysql4.png" alt></p>
<p>将终端里登陆用的用户名root换成文件里的 <strong><em>debian-sys-maint</em></strong> 和 <strong><em>password</em></strong>值 进行数据库的登陆操作，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u debian-sys-maint -p</span><br></pre></td></tr></table></figure>

<p>这时再输入对应的密码就可以顺利登陆了，然后就要修改root的密码，不然用这个密码可太麻烦了。</p>
<p>系统所使用的是5.7版本的mysql，password字段已经被删除，取而代之的是authentication_string字段，所以要更改密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update mysql.user set authentication_string=password(&apos;password&apos;) where user=&apos;root&apos;and Host = &apos;localhost&apos;;</span><br></pre></td></tr></table></figure>

<p>若是出现下图则代表修改成功，之后只需要重启mysql就可以登陆了。</p>
<p><img src="mysql5.png" alt></p>
<hr>
<h3 id="Ubuntu-上的mysql只能sudo登陆"><a href="#Ubuntu-上的mysql只能sudo登陆" class="headerlink" title="Ubuntu 上的mysql只能sudo登陆"></a>Ubuntu 上的mysql只能sudo登陆</h3><p><img src="mysql1.png" alt="linxu上的mysql只能sudo登陆"></p>
<p>Ubuntu上安装好的mysql 5.7，无法用 <code>mysql -uroot -p</code> 进行登陆，只能通过<code>sudo mysql -uroot -p</code></p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p><strong>修改MySQL配置文件，添加一句skip-grant-tables，重启即可无需密码登录</strong></p>
<h4 id="旧版mysql"><a href="#旧版mysql" class="headerlink" title="旧版mysql"></a>旧版mysql</h4><p>在Ubuntu，默认安装配置文件全路径 /etc/mysql/my.cnf</p>
<h4 id="新版MySQL"><a href="#新版MySQL" class="headerlink" title="新版MySQL"></a>新版MySQL</h4><p>对于5.7.23等高版本，配置文件路径和命令已经改变</p>
<p>此时的 <code>/etc/mysql/my.cnf</code> 文件已经是一个软链接，里面只有指向链接的语句。</p>
<p><img src="mysql2.png" alt="新版MySQL"></p>
<p>真正的配置文件是 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>

<p><img src="mysql3.png" alt></p>
<p>在图中的位置添加 <code>skip-grant-tables</code>，之后重启mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart mysql</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="解决mysql无法远程连接的问题"><a href="#解决mysql无法远程连接的问题" class="headerlink" title="解决mysql无法远程连接的问题"></a>解决mysql无法远程连接的问题</h3><h4 id="创建远程登陆用户"><a href="#创建远程登陆用户" class="headerlink" title="创建远程登陆用户"></a>创建远程登陆用户</h4><p>Ubuntu上的mysql在默认情况下不支持用户通过非本机连接上数据库服务器，因此先要在mysql.user中创建可以远程连接的用户。</p>
<ol>
<li>先登陆数据库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>选择数据库</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建远程登陆用户</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<ul>
<li>root ：用户名</li>
<li>%：任何ip都可登陆</li>
<li>123456：密码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>重启mysql</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart mysql</span><br><span class="line">service mysqld restart // 皆可</span><br></pre></td></tr></table></figure>

<h4 id="修改mysql配置文件"><a href="#修改mysql配置文件" class="headerlink" title="修改mysql配置文件"></a>修改mysql配置文件</h4><p>修改 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code></p>
<p>将里面的</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">bind-address = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> #注释掉</span><br></pre></td></tr></table></figure>

<p>然后重启mysql，</p>
<p>就可以远程访问mysql了。</p>
<hr>
<h3 id="如何删除mysql"><a href="#如何删除mysql" class="headerlink" title="如何删除mysql"></a>如何删除mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get autoremove --purge mysql-server-5.7</span><br><span class="line">sudo apt-get remove mysql-server</span><br><span class="line">sudo apt-get autoremove mysql-server</span><br><span class="line">sudo apt-get remove mysql-common</span><br></pre></td></tr></table></figure>

<p><strong>之后需要清理残余数据</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -l |grep ^rc|awk <span class="string">'&#123;print $2&#125;'</span> |sudo xargs dpkg -P</span><br></pre></td></tr></table></figure>

<p>摘录自:point_right::point_right::point_right:<a href="https://blog.csdn.net/sinat_21302587/article/details/76870457" target="_blank" rel="noopener">ubuntu安装mysql 时未提示输入密码</a></p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Scheduler的使用</title>
    <url>/2019/08/08/2019-08-08-Spring-Scheduler%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>Spring Scheduler里有两个概念：任务（Task）和运行任务的框架（TaskExecutor/TaskScheduler）。TaskExecutor顾名思义，是任务的执行器，允许我们异步执行多个任务。TaskScheduler是任务调度器，来运行未来的定时任务。触发器Trigger可以决定定时任务是否该运行了，最常用的触发器是CronTrigger，具体用法会在下面章节中详细介绍。Spring内置了多种类型的TaskExecutor和TaskScheduler，方便用户根据不同业务场景选择。</p>
</blockquote>
<p>参考<a href="https://www.baeldung.com/spring-scheduled-tasks" target="_blank" rel="noopener">这篇短文</a>可以快速入门</p>
<hr>
<h4 id="Cron"><a href="#Cron" class="headerlink" title="Cron"></a>Cron</h4><p>Cron表达式由6~7项组成，中间用空格分开。从左到右依次是：<strong>秒、分、时、日、月、周几、年（可省略）</strong>。值可以是数字，也可以是以下符号：</p>
<ul>
<li><p><code>*</code>：所有值都匹配</p>
</li>
<li><p><code>?</code>：无所谓，不关心，通常放在“周几”里</p>
</li>
<li><p><code>,</code>：或者</p>
</li>
<li><p><code>/</code>：增量值</p>
</li>
<li><p><code>-</code>：区间</p>
</li>
</ul>
<p>下面举几个例子，看了就知道了：<br><code>0 * * * * *</code>：每分钟（当秒为0的时候）<br><code>0 0 * * * *</code>：每小时（当秒和分都为0的时候）<br><code>*/10 * * * * *</code>：每10秒<br><code>0 5/15 * * * *</code>：每小时的5分、20分、35分、50分<br><code>0 0 9,13 * * *</code>：每天的9点和13点<br><code>0 0 8-10 * * *</code>：每天的8点、9点、10点<br><code>0 0/30 8-10 * * *</code>：每天的8点、8点半、9点、9点半、10点<br><code>0 0 9-17 * * MON-FRI</code>：每周一到周五的9点、10点…直到17点（含）<br><code>0 0 0 25 12 ?</code>：每年12约25日圣诞节的0点0分0秒（午夜）<br><code>0 30 10 * * ? 2016</code>：2016年每天的10点半</p>
<p>其中的<code>?</code>在用法上其实和<code>*</code>是相同的。但是<code>*</code>语义上表示全匹配，而<code>?</code>并不代表全匹配，而是不关心。比如对于<code>0 0 0 5 8 ? 2016</code>来说，2016年8月5日是周五，<code>?</code>表示我不关心它是周几。而<code>0 0 0 5 8 * 2016</code>中的<code>*</code>表示周一也行，周二也行……语义上和2016年8月5日冲突了，你说谁优先生效呢。</p>
<p>不记得也没关系，记住<a href="http://www.cronmaker.com/" target="_blank" rel="noopener">Cron Maker</a>也可以，它可以在线生成cron表达式。</p>
<hr>
<p>如果想在不同的开发环境中使用不同的定时器，可以在<code>application.properties</code> 中进行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// application properties</span><br><span class="line">// java的properties文件支持value中带空格</span><br><span class="line">cron_expression = 0 0/2 * * * ?</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(cron = <span class="string">"$&#123;cron_expression&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchAllPicture</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>:point_right::point_right::point_right:摘录自<a href="https://qinghua.github.io/spring-scheduler/" target="_blank" rel="noopener"><a href="https://qinghua.github.io/spring-scheduler/" target="_blank" rel="noopener">Spring Scheduler的使用与坑</a></a></p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java客户端连接websocket</title>
    <url>/2019/08/08/2019-8-8-websocket-spring/</url>
    <content><![CDATA[<h3 id="spring-websocket-访问"><a href="#spring-websocket-访问" class="headerlink" title="spring websocket 访问"></a>spring websocket 访问</h3><h4 id="websocket类"><a href="#websocket类" class="headerlink" title="websocket类"></a>websocket类</h4><a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ClientEndpoint</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatClientEndpoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Session userSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> MessageHandler messageHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatClientEndpoint</span><span class="params">(URI endpointURI)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            WebSocketContainer container = ContainerProvider</span><br><span class="line">                    .getWebSocketContainer();</span><br><span class="line">            container.connectToServer(<span class="keyword">this</span>, endpointURI);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Callback hook for Connection open events.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userSession</span></span><br><span class="line"><span class="comment">     *            the userSession which is opened.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session userSession)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"opening websocket"</span>);</span><br><span class="line">        <span class="keyword">this</span>.userSession = userSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Callback hook for Connection close events.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userSession</span></span><br><span class="line"><span class="comment">     *            the userSession which is getting closed.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reason</span></span><br><span class="line"><span class="comment">     *            the reason for connection close</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(Session userSession, CloseReason reason)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"closing websocket"</span>);</span><br><span class="line">        <span class="keyword">this</span>.userSession = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Callback hook for Message Events. This method will be invoked when a</span></span><br><span class="line"><span class="comment">     * client send a message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     *            The text message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.messageHandler != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">this</span>.messageHandler.handleMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * register message handler</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgHandler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMessageHandler</span><span class="params">(MessageHandler msgHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageHandler = msgHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send a message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userSession.getAsyncRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Message handler.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Jiji_Sasidharan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageHandler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="java客户端访问文件"><a href="#java客户端访问文件" class="headerlink" title="java客户端访问文件"></a>java客户端访问文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatBot</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ChatClientEndpoint clientEndPoint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String url = <span class="string">"ws://192.168.1.222:3098"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clientEndPoint = <span class="keyword">new</span> ChatClientEndpoint(<span class="keyword">new</span> URI(url));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChatBot chatBot = <span class="keyword">new</span> ChatBot();</span><br><span class="line">        chatBot.getVersion();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getVersion</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clientEndPoint.addMessageHandler(<span class="keyword">new</span> ChatClientEndpoint.MessageHandler() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(String message)</span> </span>&#123; <span class="comment">// 接收websocket服务器的返回信息</span></span><br><span class="line">                System.out.println(<span class="string">"getVersion"</span>);</span><br><span class="line">                System.out.println(message);</span><br><span class="line">                Map&lt;String, Object&gt; result =  JSON.parseObject(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Object&gt; messageObj = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        messageObj.put(<span class="string">"namespace"</span>, <span class="string">"VCS/main"</span>);</span><br><span class="line">        messageObj.put(<span class="string">"request"</span>, <span class="string">"query.version"</span>);</span><br><span class="line">        messageObj.put(<span class="string">"msg_id"</span>, <span class="number">123456</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(messageObj));</span><br><span class="line"></span><br><span class="line">        clientEndPoint.sendMessage(JSON.toJSONString(messageObj)); <span class="comment">// 向服务端发送json数据</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>); <span class="comment">// 线程睡1s是为了接收服务器返回的消息</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="spring-service文件"><a href="#spring-service文件" class="headerlink" title="spring service文件"></a>spring service文件</h4><p><code>@Value(&quot;${vanwei.server.username}&quot;)</code> 通过这种方式注入的值，无法在静态代码块执行的时候就获取到，因此如果一旦websocket连接断开，则需要重新连接websocket （<code>clientEndPoint = new ChatClientEndpoint(new URI(vanwei_url));</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"VanweiService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VanweiService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChatClientEndpoint clientEndPoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// application.properties 配置信息</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;vanwei.server.username&#125;"</span>) </span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;vanwei.server.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;vanwei.server.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String vanwei_url;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getVersion</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clientEndPoint = <span class="keyword">new</span> ChatClientEndpoint(<span class="keyword">new</span> URI(vanwei_url));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        clientEndPoint.addMessageHandler(<span class="keyword">new</span> ChatClientEndpoint.MessageHandler() &#123; <span class="comment">// 监听服务区返回的websocket消息</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"getVersion"</span>);</span><br><span class="line">                System.out.println(message);</span><br><span class="line">                Map&lt;String, Object&gt; result =  JSON.parseObject(message);</span><br><span class="line">                String reply = result.get(<span class="string">"reply"</span>).toString();</span><br><span class="line">                <span class="keyword">if</span>( !<span class="string">"200"</span>.equals(reply) )&#123; <span class="comment">// 如果获取不成功，即重新登陆</span></span><br><span class="line">                    System.out.println(<span class="string">"websocket登陆认证过期，重新进行登陆"</span>);</span><br><span class="line">                    login();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; messageObj = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        messageObj.put(<span class="string">"namespace"</span>, <span class="string">"VCS/main"</span>);</span><br><span class="line">        messageObj.put(<span class="string">"request"</span>, <span class="string">"query.version"</span>);</span><br><span class="line">        messageObj.put(<span class="string">"msg_id"</span>, <span class="number">123456</span>);</span><br><span class="line">        clientEndPoint.sendMessage(JSON.toJSONString(messageObj));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若是要使websocket始终保持连接，则需要定时发送心跳包</p>
</blockquote>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>java</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>你好过去</title>
    <url>/2019/07/18/2019-7-18-helloOldMe/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="这是写给一个人的文章" />
    <label for="pass">这是写给一个人的文章</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX181jXswRYedtQw4KhXom57A9bRq32ILAmKCpuakzeErWMiyXpZvo0oTJatOy8zbY56X70FD55UlUv8oq6AvmnNwZilYmJUa+adPbX8Y0lnvKklLnPFCH7gnxTFa3wgEj6EjDJqsJo8qoR66atIS9I9qfAzKPLUSVerXtGkrvpB4cG7Cz23lF2AYRLQR82BC8DgeVC6R3A/U8UwYKMu1TcGg54BDJCM4oq8cDDn8WaXgGBBPAV4IjGq/iwtCJwpH1ecW9EUn8H6GlC/vT5aXNOsCRA9d2JxZ4Q6oOYhe9iJ7OTIE3k+Zkh3kvENisaBCJ25yacUTCPGhozADlUIDvwH3t+suG8FFwyrB1SXPZSZLzM9eeUpecpx+DJ/WGscYHEg4904Ak49Bu8bS4u8edVa0tpC2OjBZjvwrq/y3jvSweRBeZ2UKilHQLnBGI1C48jEWKvbeE3LMenSyzyYiazyvynbxkg5gZUHzzHMSZthGFnZ/FFz6Hdkgp+7K/zhEizaKCT/0UY5/GrPYZV46nnblD6ZydC65CytZ34Suj2hdJb6pWbIrbsRivLpVBPstAggdY7BjUScvH14LeztQZ0OvvHHQ+iSltPkgVKvKng9gyeyNXGz862XNCtw+hlVblc544Bsq1gJmavaWweo7PxX3bD93xLHbwgUy4vyGegzFTRKU0kRG31UMG0MNaaQFEwCApn7RpZXb1qy/AdZDJx0p7rJI2TYv+X7zG2Hulst9BBIA1mkbOcDwZcARRDAQoHASoOuwoeBeWAh1wMkr5AHfKnmHjTsG7gfVtWfElvbfQ3PCWrNAV09kITefYOYeSDP58quZHnyRmsQ+R0jPu5o8gfe0CVjkO+qErY0t4IaBkFeYUOc49+DJ8xwBNu1OFT0joKFTRis4BUvRjyIyUHyVtx3Xk7JRzfKa9NFjY9RBHLNfOtMGKufgAoUkrMbpJW1K5E5WCOSAGdZmfw1nnuxxCZpAjoFN13QG46wTATWldxcL5Lb7rR+rTnoCeQHV8h4xQSYv5j9XkD2THpLdBDbW1R/95IygYeZX4wiMo35RwOhwhUHa982abUxWLvifYrucqazfz32ImyCoxl6O7lFUyokc+IVBKd3rM0sIiD8+Q/xseCgGdUSJyUwV59883wsF6VHkaj8lVt42wuAdP9ko8Qc3ZHuNcO6DKOU6M0buNsrmuHAKdxvShK2Cev9oqUN69S6LJV9Uc+Cxt+EKRRnx/uic/qsn6zBA56Gomoq0TdD+jYPKLTiz2Cj97WfRidP9lUUOvOpjje68UxAUQn2saXHKbH8VQc6MxlVKYHSaLR7g1kqNvK2SqhRw3aF+78HOq5IiqudPqtumOQxKCoeIrhqnt1VDneT0rc14BPkwqP5O7oCRKvDJJ2RAlPdET0RtirFr72lntb7U4wqK49v6x88FRHCRsw84hs9OixslR7AdyUY0/GIRniRbZ9PBMigtFFakUEmucHSymZ44vAgQrlara4uzIFl5yPksPNN0gChN6TLFBhYyRrUY6vBEf18tzTJGtE/ZOuXSxjda8MdiM2Sqdy2cz4eyB6EfsvNFuUC72FilJtzrwUcYQV0XI4HZJhkwbXU7LmVnLWcFLOcuzvRbLWTdCnXGNZVKslVSQVE6E3XJmv6H/n0slyv1+sKCBp2SnctcF2jfzRTiZAJT8nX3X4IDDcKcx3rtlLdTCpjGzrNRySX1FIQ7+uVbLGnlXYx/To9hIisiS1VemjKjMilJdIHCa9Svdop1EvVILiKVPhy2FH+62b9XTJIQ4s7WsCGSa37Fip4MonjbhFXuUR60tQNRn9TX34QoaM3zEYpJM0x3VAXZ1SqY9o2EHgExDf3RTGwF9vr7SO1ReduJW16lualhabqspKLpFstur+oSktiqTmAJdTSCS2/G2G5YKi3rf1a7QY1OlJXXBDhDFfz+P8Wz2camFwfYyVi6x++MMCLAUKQUlHdnop+88Z0NhodNg+sdQKCAhL95GSmjefLE2BzA/pbJupVTDf4xScOYa4JRaU2AkN+lchwbv5wPlHTRaSKqmwMHgn09/7l+AeTlZYbdJwW/5JCYfeN8kxYvecTYYaXkNRqhtF67zSgz02WFOfffXQLNeqLlORly4lrjNS+Vkc90ksj0M1Rn7y9GM0wU8OL3Xje97lq6b+KkJtJeYYGriDPB/pBfnHD7ODYJzi7r5l8jxOu1UQWZ5clYpj4wEqbqgRudSTw9d6r05p7OsceFrK/poy2pTZ1pSggFk/4aAC/dvs+HHCBgLHrKoB5bQK6a7/AEM1NM+z464P3pxpYv5ZjAqHTlUhYe26eezT8E3tCMV/FT83ZjeTVXLxwLG+vA/pCOuPhJAmsIB7F5ocTLRsCBW4hwaVFNH7p5mGmmegEZux9YaQLO7mbmsrZZdKxl02IzZ9McKylE4Xo3lbr88CI1VuTlw7xBles4fu/fP1lVDU4VW3kgGDzM2+u6eu8iBZX70dyKkJ0QgdQSbZRlCQU1np/oQip2Yu8+ca/z7kok+b57TIkyc+P09vzu14Qj3CNzNqPxJKDmy2fNlA5mZwWKR39ya0UWlh/Sl5IcPlcfLr8cctLe4Tp73HjNkp0xhjTYcKvM/9J7ej9rfL3E3Zx42YJj//xq+ZiyNNJB146iPO2GtJll9wKs+svga1Fr+J5YkbBYNxyrUud5N5Y1Vzoa/qsx0wwcIWldL9EvPUHoLkA+IQtpJxyIFcfOKV+vozrTDu0P6P4uYO138ZMK1jezNwOmZJUYzfQhucPZnbxFcfWA0fQjnIju9pLCFID22bgxXpTDd4oYE4XABFL+15usJC5yuRmWlWYgF3rrXiP5zHNYXWEZuDp4LhMe6BH14vdQwLh3m+IIHA+FokBijSV/iIYxbj/inKJ+Z3SudlHZSpUeAdVqRaljl0tTgTxDL856w2tjSUrNMNYPG3iCanqkDCQoJBpUFguh6AYTlyEAMJ0xG+Xvowmg/USQ55MNzLoqg8I1Hk3CdAZMEZ6gU2LSei+nNrsjnl6WvTT1bb24+QxWUbz3yTV4DpRg2kc9KAtVRjojN0tqfaFuJl4BNCda8ZVyX7Se25JFNO0A/wf2zsQc+XbpVqW/fHaMVBWb2gPsgplZigMqeZxxqfrryCsGDzFLnAIx8x+7LVCATvtrkh1TeX+7jKMJol1YmEMC1jEZtYgENav/vJSKVqzOEnBNuXJ0c+mJUKnMNHKksk1SY8najBPK5VRhhR/WQllIBeaSieWs/vNOsmGa9pyOqjV1reCD3qZwHUko6C2zzSmOcVlnimicaEniwVI1n785Ll1BrsfX5H/Y7vX4xxwxokoJFxmV6mPvjHLkWphWIGWOQ7pXMIY0bN6WpGbSOOJsCHNcuBCgBMQz8ySlEz9FnmnTDIpi/JPHyuzUiVICjOp2RQsVKFVlPVNR6zz/QO8UG4x7N1NQ17qeverx3xRq81T+lDsiRQx8Dn4hfGXdCESzwIzlHs44AvAHbJXPeTLgY1sS0oPoKrRnlpQY64wG7FeytTF/02NQcDDxLcMx62vmS/3ml7wBWeJNjsTXz1kDVwwMSO0iRw09gqwdz5ku9+pTVwCdIn1XO/mEPQd9agt2wQZ0fhLrLb72CGnL/uXMSNnLh6zQpelRLHXqB9SlucwPegxYrOmlE4tqwZhnXeb/W22njjPJTXgAfCgbeAUL1nE3NhEF3m1ag4ULfP38wepquNRqqeKyjy2LREoS1SaIHnWqniHr34TlIbfDZWCqWz0lcRu8J7Q2dRbWl5m7QUq6Fl0mhvECwqlGzhk4GnUVME9mJFMoCQ/JJH09G+b4IIzHs+/G6XnPMey/ywmkoaQ/p6TKzVaHRmCh91T3Ry46Xg6y1qu2khEKYvevlyiEq09EK5SDU/GPLIuwoHf06QETQM/2u87j3hiSFTz35IfnLIFGhC3XwcmtMaiwaWuMl44/goAL2qWa9C2aoAYyoUTcAi6y35liU1eymqjDmprlhDCSTwWVZyCAMOYdES24xphw03k0+htwdJne0KlKSOj+/r+PF9WM/gBga2exn2udvr7D75RQ2U5RAggE9ITYqhIdjdxrNDPWPZ3tCRnq6cL/R7MYa40oNMVYJFyit6loSJolYL+wwN5+0ngZ2w0C7u+jR4X3P6Yk8YyuSHiSggSLodkqV3+Wd24nN9mOetC0bln97POBj1flgKzox8GcJs/gML0WEF8Wr2qz3vVRzqGBZhLEM/KMkQE1N4g3SwsPwUWi4yL5QFUGcqe0gHyzPVlgEomPcrrlq2yvFNye194rKsOO+OWo/fIwL7V1Tfbf5Zi5rpxdPHO5ohrIf+pWA4xkBKHK8d5xSSOhOA0YM4+otr1gbZCpZygnDoDPe7KNAGyDCRvvy8fNWPoVzARj5bi9fOVVG6HdDC9G91HbL5CfM4XahZKz2kl1YhWPvaO8moEdxlO3s7ZRVInF6QDaDCvzsbMsOLqDRCzLaijj7mADa7QgnspDzNcg888Anl9d12nk2z0cs93s9X2NeIb6snsKOzHklFfHgQsoPYlWFoyecwFdKxaY0uGGr7/juZYMKibA2448AVEM5/NqOcQrA46MyCL46aFLyXHyjSPY3kzkdaXf92CniwOnxKS0tdm/sh2TYZPEwEXbPpjidMurehtEr4hJlFecVL10jjwEivR8awJBQcnOq9+bVwiOSAq00WwA8rvHXy6DnsRYhbxKyGyNcDilTNOTXRey1wP3DeY83zNKipUbDhEuit0TewbIKCbzTz90JqJw9fOBgAVYdtQxSY/xYP8f8RbWltnxiFU3n9C6I1vW6gRbke1nWM2LBwpufhiUp8Oet0FS0cxTsFpXOmpZHd69llpLE+iHtZdPvhDU3Wm+5ubltu3wkCbmsGHqculPksZZOob9IMlby6FYHSbpgxn4ZtMuUr43szlREDCfX5+PdSYqhNvSKdGOX4GOVe5q2DSuWTR/s5Usqv1nSsfuk3wWmy0MxaosE3tYaEMWVVYN5AX7GiUAEhbLmG+j0hD18UIqzmWqFrn1GE2YyQq+lrkBksiACQTnGQStJPbsXZ4y/RcbFP9Qq6Aj7p23B4F2SCnBt2gmJM1hmdbNcPxbzKRsZmy1S8Nq6f3Vry54mIForWP0R++15QVuA4T+jFP7ZmS1U2FNGwEy1t8lzeYhgV9dQ0SArN5mZ0YDJUgPQGuX/qRYDFdoXqcAgWTQAQUTnowOwXSL1/JG9DvGBiqts9J7nr9t9gYJlZM3PleNwC43STIdUuPDEFGE8eE+FEigzO6gCBlbQ2AXvXopZkN/qUYqVyCIj5NmkrJEr3wjC79GnIi3pyO6C2am8r68RApWnKGeVNasfgG3C1nooWIsgwUVabqH7KN/+duyecn14Lx3g74qNGJuZJQUUr6CUyMyth4uUepsQgRuM1IiZVdtLHfKIPxquubaY4xrbf6Z1x4MHuQpym5A6TyQ95bdxP73T3gCJ2ccx/XVXeOLk7S78EaSoUGlHCzrGu85H5YW49pot9UzPlnHu/iP8ATqv349yvU5cR+DkFIi/iv+DOv5FbWQc4fXQlTeFQzkBCKRyCLevr3HQxIBKE1xrtyWj7pQu1047qKzmrXFcTG33nocw+iaA+mI+7fbykA6TYEus+qmnWNXg6J0s//0XZ7bRHpN8wpiBNqBAlzuCgcqBXEGY26k6rGTrjvecjFjb0+D2N7/XVDFcBzn1yDBcW2sIiJWcILZIOeRGHClSdHEqGQ7dN1URi9VZqVVUDiddz84Q2gIGl7Gf2FEJZ5X+ZQaMIhDrphtJZaxON2nKGHpdoG2Xj46SPxeOFaT5T+76OH6ERGHTDQVaX3CdO44KZTjKF3mO654OBFSLa2P71SVI/Qggow5CQ6/6RyUFSXwSJLbNU2XkbTWPwvVUjMEwWHGhGU7ETu8y5B5frdP8k1WCtXUgusTQKNXib5sx9rIeWoKXjW+zZFJfn2MXiclcdEuYDcnZo/1o0so8PLvGBc/oGsPMCH1tM7cipitsF+6OrfnYR8V0lwHktukMQfKw46AnHM77pZbfakm+/4jCxHUJHWdMFr6a577TwoI2/VD8/ooj1n80cEH1MI7oCBw/NW15RwmJb0Rzi4zQrJb4f/FssJ6KMAjZijkncOLL4PRc/oOpnLGKBs7VEBvGzIAqOCy7InvXKKofPRvEMeLEtJPgGMV7cQKeYE4zizz1Yu9B5IqbPbW7YkhveVRAGWvhbJiQblL8ZqSa8LtjEeYauepDlo3Ljprr+Gx+xGnD1ZsF0SUBka6hgTbrVsRDRySraYZ/PZrZn690tE/CNLLNu1n8kgUhBpILwBQ+jZtE+ovghD20fxQixjerPQxBjCB/miq1e/CQM77q1vzr6EX0xWrdcjKbGCAhYJSJwpB2vK04DnY/lvw8kbM1UbFcBFo2yCjGJDS3aSwZVL17YJliTrzk9hbrh2/2PuBNurJwFmxSG3u0ryPsv1f2kpj1u14BFCV1WCnAJGoXOdhByW4XsKjfHyL/gXHSxaAup9dXuS/74d/FG00REB9S/br9TOHaZlhdPI70ie/TI496UbGiGY6DREaT9RlqyN8iMUs/INxqorc+kKoy94hIqDM1WZUIhyVK0/e7yyKAqBvA3EhMct418CkFpDqxtQpUHHMqatxv/7MKzw4a3H1QfczgvW7nCYAsgo3P/tnpXVzzq5tHbOYvCCCJahbLoi0Jr3pbBtN5XKfKeNx4DtR9WqUyTcSWSnQG7WPaqzFN1su7cmhYQFrC/P9YKnMmQAqyhlkmhH2NJKpPH1RfLWMhXwsvQ4LXQb+tOCDrDRHvBwe+0PlP87XsXkYzQTnsJtARDfrHuT7w0G9KOTADAaicGrZhaksiuqFxor4pwB3TQQ8izZc5g3vacc8oELviddGrkdFiVJ5sTrnGXOHFqX7s9Yt82So9zdzD8/jmVqjLgBpV50fj63Njn00JAJx9TJCjxoqpiw3nwNCIpJBgMIkKsYfkevPRmjGrU+GBnEA2VNSBKFXAvgPzCT//a9S8TuSWztVtHFnuD13pQTxS+duPIjmeCCSsrW7BRmeWSncwjyR3RAaSSDXXuUtTMyB0S/+uXfcJZIwGncExliT1QLQTe6z4TGUtJ8hmbtzcNvMbtot4ZG11zc6e5WgI5zFW4iiYLqq4XVk+dkoI4uktu1T0TMCARDAG4LThZXogpYSU8DE+gPqBbBYEup5q04p8xWKmcnFl/Tk1dNCDIgaqdboPfVOOM9afLoOb9fbLPOBGkF9K6bxuUqnbjKfmA9E5hfaH1fBQAdINzc2rTi4b3VYi6W7JdMHceJYWqwGemE9r+DC/Kdz8C1wkfjIoWaVLJOLfrST7yDAwflJvkA+ngzc2IlFgk0+vOLaLhol8wmW1Y4cI0G8Q9P/Jda+rJCZy2HzFVdPPQZ0u5Xsh+Qknb8yfLaYVdPimkf/nJG+TrWnFggm5BS0afMqaODCg0nsWyaRh3T/D7Po2CGukvZ8Cx0b4n41fUjieP/2NZLw1yWIal+Vxz3UI8Qyrm+8B6VGrfSgeloZl3/koBq0oDcSX0m6Zq2hCeefDdcdRZAju7KYe6ztKaA50XvLCfvHXN7lQz/2vp6zV3YYbB0/91ARnSKWZ06WgHTGTwPG6ekoTQ2dPMUeYz9REkJEzsnJDNU5HUYqx8Ng/QK8blC49EwqkM4Pt8eP7EKgEkFEhJKMvVS2EvnVtk+WtIoSxivfVbtzK7PmeYB6mbFx1lk2m/mYqDHjr+U7KIBG26YtfOLfOp4MUKf6g6Mhr12IczjW2gFEB7ItMnQfAellMH3OZozVml1OjkGSmzv5Ha2uGgw3JdY3YLuMRaRPEVL1Y1YYZ0J1rC8bJP8hjUd04shdpPI9g5eRpUTpH0PaL85PbHlbpNOrYC4Wkg4JkOkznaI/0oeJNKS3+2fsQPJu5QVmbUUMnWZUmzGIa+ftwn0g0M8M3wznKVKmXkYYkzHXAt08dMVIb70Ba7pFv0CKBIn4qzQ6bbm8uTe2J0CFLU4ONK6LBqz+fwbYVoELgVz16+tIyrclNIQK1uvv+nJXKetEcAMVraZ9/J/Zq4i4w2BAt3rYLFZjnXzepcy8IleEMF93ddgL37zUacbPwmt7tHZufQhUCNIF2GU1+Xb6C2YTuUbhI0RDMVuzkZmxPiITrP1DC+EpUP/yxZE3HfefDndMkQFxKKln64nuS5QYy48uhAf+LrgHkJ5M0H/asM3n68X5v6ezKTxWe86mWk+SQV/eI6nN0OxEM1R/Ogpduy7Y/5eEDEbuClDcEwSFwDFv3l5l9ix1JK6B9OphJRVlzq4DBmxVCVBWI4nqI29ALOeM2xAl4a65YvTABo71/hK2SJq1xuwYUbJqwbRSI1sBzhW8kudQ+jTtDnr+izxp2Ag97+B/Bxr4cjGOXIJKwcIM/PwCYKEaCLbFkV8iiUOj4J5GwxvgyvqmlIVQV4Hp0NwSjMfY2D0S53UcVmwkSgJ2zxHbVQ5KMKAp8KvI9Yxab/KONmsWqG45da1TNx2FrlA08qfdxo5q0zM6blrB7lrLnBptq5RV8UArXp2UTk/NanO1j3faWs4VB+wI028unvQ18R9fK0/gqiH2uhroYIRovBDI/5r0IZG9I8kGPPZATIwtGy7rerP4EdO0dKR/8zgWVtXITGCR9zc88NmaNrsT59mZonkhRRSw41p7IYP6Q135WQJkqh4LaUKIP/5gmqArHUxcQr7oYy+Rn7KA4wPtsUIgt8b3rtKvuyqvEmoXMEUSF40P3dE7PYrsLZxdFAQARIFhbQWw2lHq4s5u9OCkGIOHB3golQIgV5dK6a9nfFdjlCx/VIamSIieKJVrOpfKw2Jx+Lwec8tcOhGYtKK+TVks/q/RmJ78MJFtvBb/EVSlgZJ3XvDUGPMkjaIi4tQOaqmCcO259nx3KLVAZ3cogomdV1O/HxJvy8TIZtdq049KnOcwLSfiRwIN3NoanHbAs09HgPOAx0uxFHW1jekDoNi6XWQYD0DgYpnd/xvvfN/9frm1cApuXfbd90fWqWiA/map64+NH3Lb3Uk8YFxajwyjXKsvvWiPbfxtxD9pJrWuA89n9LSaUV9ElKlpbEAc/hvL/6bnE6hQBatMM2r0fj5z5ATYhF3+Dl4n59ATuEm2gWyT6ONVMkyul5qIs2U7+XPPSQDYUBLbdN1XK6/Uku7PelSKiwNbUBYHaAu+mRmt7LAOP5Yjgi5HzaQDgFfbE4F675aYnfZb2Q0kGY9u/7pE1K6RvDQ6hZdjnS6ilATTkuw0g2Kqd2/OKiIPyoqNI3AqOpgp3r+5WirfkhOYyXYj5+1v9GKv1c51YDwnyZwcw8y9jUS+8ZBfonOZGjbOpv4UdWjcY2eyVRrU0re9mHZ3/0mlti0F+Pf6U4epnnr3r2Jzg1L0oaJc4iF5OrPmSo95n1lVazIMPh/LLOPNi3Teg6jaKuDcerY5FtpiUWJPacq+OOBz1lloG65pHXqxgXrYbe48uvE3MMrBAXRX7NZcwkR7WvbXllFxx6z/WvKBDkliZwCxJyh55rgH4xd28kVhszcfNzebZKUU9dthnlgkq0WLJZ1sxtmaFm6RdBDlq0LE75tryTOn2q0M8LiEnnV95s0e2KHlyhvdhViZsqvfY+Aq5AzNdMqTliaka3WZ3UYbbH+r9SL1/mmbMMETapSXpV7a5ggt3mvSCIf6RRszhDKkIZ/VQum2YmLxdt5OZM4g1PoYvcI2d2WQdYvM17uDklg2qvkIPMNHpBLwrIiUi05QTxUuAywveKYo0t3ezjNtDgutUvlm3uxVEv4MnWyI/IKVTYjyOZlIZw9wgvU0sWNOGEg/E/K7sHQ15C2k3CpoxpYx+2VkqeAWDGu1Gjoyyh3FWJDHgiM1VgXB6y+um7BQ4SRgDE4lvvGGQLWUxA/N+tL1fDB+GZ1Nzihr1jGyi6/bu5Guy+UGxMlST7nuQisH4LfxbDfjpqSwUEZAOuT6QjIMplwshlWTiBvzaz3+SH5Krtd9PFvIYWtwdY4kOYTdYRWwr5OjMzWlGmV53iiDCQcTeD0twQymlFbxTMriWK1rw850az7gxGUP5Po+XJ99qGqQLWfmSULeDI79t64quzNCO7i7e3Mhpr/1cHeTHAZYcCA9977Mkl3wpO7+bdq8L6Ap2Qi5s4WRNNQJ2tKsI4LrwkzPWnsDYQ4Zz1SGUOAkTSaaL145rfH2wmUZdovhDo7/iFL0B3Y2M0C31HEJqrUWwmoKhOyiCJYBUUOU28t/CJQZSG8bQtaXgD9Y6F5Khi/imRuHWpaH1IkS7mJECInW7vgO2uMjAKCrGqJd2//qeOB1b3/+SojBu1QtvJ4Kst+cjkyG4065M72MDtWoc64eC0dA4erGVLnFtbp+RrS2IrC1FShSzQ344JmFkw6rO9qgLFdTMdZkPtBgZbnVWrMq++IyfEgIuZItpUtf/F2A/0AxlsSwWpL2GXxGIwh6BGB9J6CNtzpja7GEyc9UVe8RYtZnBaVI+okl7aRNgOiT/qXrB6cUABKzyhad4Y/pmRQqth7hUQxi+Ob7NnflWx7Ip8f5w5NyuqVw6AtSfP+X2SLZbfyJdF6+skgA669kscS9oqh8OZkYfWqMgzRS9Fk/QpoKD9IyPA0XqhvmtjOdGpmWBrxCMtQSgK7uYbchnO1BfTRywEgmdpyf/141YSaHDu9g7KxY55YmyL11pWi3slszXUFm6Gmi1+AMVgYM6r5oU7O4cHa3RrCXuD3c24TLspyRCF/cLF4j845K2elXDYU/EPAdggkkgE00zot/StId4RuFlEA3II9Q8H+BlkZD3J1KGmy/JjQ4f28Tg0eTaENo04hjSt5xp8PwAlJKYVpMbtD0w3QOaQLAdhiUQ90xr26Nao25weZ9m5KO3RsCGhrmaptaUrTNmSnFGGzGhqYHmUnyTS8RPUDcDZEN2U+P5aLUT/ciX9i29YIBFY9HLVZWLHWw5Khd6zrxT5mv0a3SYdf+i8VgnmGrM9Erm+lGGDM/WG84EJmqzguucDrz3qOz2CgYZGIhQTBljeQHr36TxU0FqIofKB2/MBWafr6dsG/1/JcAOvBtZN6bHen7rsvLAyv5tjjgpq/wZzYlR4UvRogHRV+ei5CyefXfuq1VHQqY544NKzjzRzmyz8mM9YAhLTX48RVYcry+LoDs4ZpaFz6Ds6c4mq89fVp3JfHcyp1AfxsSBP7sxf562D/JEy9BkDwe3/qbyIsF1xI6hmnPtap2LTb7qChwV8DVJy5YRWxmD+X/vwVFmHFXk89dbzQNCVkCZoWn9uS38kWRCvbL3NLCqioiyNpJ0G34qYJouyCDLmrnCzNqh9AY+lnOZ5IRIIBeN9t0A7uJumMMjOADGltODslZvfrt3QimqXo5560OMOTZ3Wisi59SE0Z6qrEyj/o2XnWaC5t0ijoAbgeLqDVFYQVzwtEKter9vFRgYWcWWvrgy3QTBoGDO63sQoRA5FBt5KWqw2/MD+pHPLXIaBKG9wXP6kHg2ZBLQLWDHvZLl+MuKg7VYYr052Xyt/X3SARyQifzEIXjk7FefphGqTlCxyeNtOUH27xZRwwnpZbGS/N2rSGJF6Gz9bqkPXOsySJuN+Rz6oerpCRnHarUd4RmkV/I7kaqMv13EX2sjz58TaXJY6x5ocWRHXFpYGbVx0OQyMKMciJSLbhBNZ5AWBbLRTALHN9nhjFFOH6J6w472/sU5iatH5HwF16DfBKCgOwgBFTyn2uoCbcSSLHP7ggWPi+QTsaZFCwHUyysbEq54RkRM0SeoNRM3KnbY2ykB7POSq9gvwvDuhyHThQ7F5jtwO2l7yScN6s6/pLPHPEz0ig5y0dai2H6vjIHH68Qy4fnNL6itwhkOlmo5FLELB5PDO4jAfhhSpSbTnLq6FxvN3imqlqSYYIsvr1nWy1ZhkkHPEHa+0W5x3WvtoRC+xY1g1h4QqC2ri+PmVy+1PuDBYFSI/JNCqxSzSfuJnCVdyhMIMl6ZY/aLKySrP7M3J3NKU/zHFYNcjJeY7Iqs/Zg57mjbov0QNKF9fdNEJWjfJK8gJdZ0Q2co7nMu0AnxkhHA99DjdDADapElUO/t1FC+lEmw2xAcxlMqOpY6MtKlosigQW2RWVoatn35pjCYbWdHL0diRuhlvrkyM1opb1eNbxUJ5kzsJpJHpxME/VO0oEB5bscP2bz85/6fYXuMwfG7Lmo6y2+sKDB2vLCufU4ev7Rh38dkG+f9l9b3naZgcf8ixhyjrO11sSgU8z7jMip+igOdovMVnfiJG1GkID0R9PM9i/S3vo8L6WkYIC994bvEeal0JL4MFhb7azDag5ovNOkFHZsSo4UGF7d7Essx7rRyVRqAypwA2L1IXyQ7gpc3G5qB9+6r0M5sNHzoWWMpoKpDhfsocwK0pLwgjSct9ws4ezVf5/3x7j2qUACo4TeDfsAMUTl85QwXG2PfHu4fAgZkotsSKSMWLZOppx/gxVbZNQHTM6xYXACb7tDC7JHcyk7C5GdoKfv52GKgYgWSDy5ggSeHHiSY6gwJQiqymsYEs8UO321Uv1OFaoBGKNtnJg6NpyniT9GmbUGOlC05R5AwqiWoC+IkLjZi278yDloXKHrsWbJN7Jj/IBoymqQrt/JAqVXOBpuqqy2PphL7p/rKO5O7c2wYj24WIbxxaXKKbUdLH1lZ/EjAQdAP+BdL0ECDFFakpWVdbuMqVadTos6gSSPt2HiCdd22B9pFzvKxLLSp3SVef/x1HHwMVFFDXhvYY2s6nnHuVHrFgtz85MY3ZzDIyija0gCPH7BW+PGPVTnWxiWWvpZPC4n3hr0vRThWF1co7/vRRxqjf9LjgIOhjVbuRjnDXn/3pR4FNDzisbJ4FMoCfvPNsVPMdh2sAzKtqt1MsXrzUSeRn4i9BcSVxLFlOKvibobjnYgqTAxLYWNfpMGJmzmaan20o30Zp4qI6Ys/tBZyOt0VBLDOzh9ZHPXO92Ggkd9Vnxb93iL2kzBj+IN1Ei5WeWM+E8tfY/MOnTB7gnj/4YxB5rDlxgWKLT7UTh+cx42OvgS+yviRoUv6MdL71UMU77zaAL5SVKPDcy5C6XvOlOuBx+IR+teBg4DQf4sipw34KG+gz48duRYjsu89n6/5O3VihJcc+xOqK+jXWStzoNWcEBA/gc9xmcthuUkG2ph7JUdmXBj+Q/ukRSI89xbHTsjcKpWA70R8EEMlQYbIGUk3/WUUOW5Y24d+3JGmfiUgSL3FoZydhAeGugG1LuH6aoyuZ+OZk71p2qTstZjK7NTgwVyqsPGrLgQuNmrIRU1G8upE8r5JCoH6A1zYWSmcHm4DddGo/xTzT8zdIBTS9PcZuFOCp2AG3kb4HgeRJpwQoDjVBmF0bs2yoxzaktDOF604ZqADvZ3+5C9m74bDQ4TGco2jr+fJtelAygBw9rs5wOqtznrqSmRRbIBNuSsEySA9xMKDPqVDR7ak6XTcLxaOluhSUvvtQ9dnxhxKFQJBx1ltBoP4BaXJS/UzQY3NNZTVYEHwA8tsp6iBSPqUoFgvvshfmKEPy1/bWO3wPuksKZSSsQ070jwIfgrOqhFsveKQlxq+DUQkuVGp3NRhSf0NwDhvMAbm6gz73mhvPDPPikGD5qkw2Je5iJYeTOGnyBU5Q4k8/cdRVSNF72EeSswE56mL/Gc4q0dpSQivGpXtNz/yd7BUrzk9g+a7+SFDMrlcCES0tb2nYl43ypJKP3ZmCuL1C1agykGOUwaoyZyhD+X821tlO85AC2pqdJYR31N9HvlrGbQPEzWvlJKS6beGpQ1zzR0yz1/F9brFKUk6fk9Y/IT6D+pRzJmoC17prRVYij8L5T/sweYHSQpVpF86R2npPGByPsX4hPlhM4LkIZHHtOwLBDvDa7mAaJYD9uHImcLkVPZ8zbkqI8XhzYwJGtU2nZjuApx0TrIufSgPlFvDBM10rC5cWQHGZL6cWFOTrR9pfetPjw7Yn9Fbx+8/JRc9p+FWdscOZSX5zrMTRhq7cpLaIWxiBQscbCOC61lzqT/hbFy74c9fXuvyTzYR4D7dKc61QiHbzj1CdLbenh4lUk+LfOEp2cpt9WEVZ3QVV88dZb5SbW0oGQyjFCA/8PhxSVpLZPf8VebKpkVZWBkVmaF0Gtkov28YhlBhnpIHaF3HqrZS63krWYCiosj/vJcn+GRoCoCs70AJIB6wTYqwoXbi83ALl+B4tm0RefsSpUyIBAlmltMayoFAVni4ADIRL1cNTxA3ncbdG5Sms7Ze+jTANGongWtfXXBYWo0FaxOV6LMOGMwDJK83S5P9cdmWqXmwSOStECoUHpNJ22Xoo++MKA/ONaLgf+U/1JehpXHebdwVQKSp4dKWN4kcB4C6hu8EQXDM4deSXflC0fISyyOdnp5wNFBzYMk7m4vPmTjrwqATFzm4hKCbPTAWtqmIr8Sys0CcbYdBj6sIrKIU/6RmX2vs7oGKvzm1EGetWUwFUM6ZptZ/65yCfjStN4x5W4WpsxcHfe0P32/Fdi+GAxSMCY+mgU0/ZuBM100a/Ek7SqJN8EWJGLCnjnpEf3pGiYX7CLNhdrQBUZUWMHiZnThom0nIaYgZ7IrlaQRx/i6VmOBMdAr2cz2eU7+G+D2ElnbQ93mIPcDn9H7Fk5dxEkbPDKPtCPCZqsLeYpCp1IRPuRKBTKOjBjRksVob7Vu+5PuODN6/ybtf1LO8uLsxpjtbIutK+9EBzqUzmK26k5GNjq2qyBQMzjGaBS30BWldH+C1Wcwfc6uxE5g5/UiB4zwWE5Swb6pwfPXCNVC8U+Z34oW2UCmQY26JfcYoob3On5QGZYiZK5zDU5LdItYkDutVRDaORpeR4FxXROP+zfpdh0iDw7QeLu3C4kgqMQaj2BSIpIQWF2dr97+BoqDOsWpJUG1BB117XG4OUzLwJkrMy5DYUVWdtKRLqMF/HB/6qTkL1sRtPJCHp4qu0ZsaoE9qV9Aicvvy6zSnbgji0KmE+xZqh473Z+4/BX7IehnE9EmcL8CN8QxZDhLYevRA9z73GIbkHLVgnHOJvDvtfF7dgC6F+BNovZ5ozXwQs+nJ9Bwl2qgEF3x0MJZR2uWCU37/ufT837mmmEx4FzFO+stC/B3jo0QDFEdiCQA7N84YrgrY/roUWCAIew1wEuiGYyN7z7xNGXoxacfaICGm9ewt+SJRY/xX5qLM6MUfQeCcx3wADfEBEHQsyXVVoFvnP+MgtrNuqpvQu+yQ7x/tRGuF3wUOLNdvMeCu+C4ZigUZkC64GykH+Nvu9h/0FNoc+TQLfsnVCHcoxsXgSGtnNZsSgo9+TCdPzPoxcJc1xfx0pndURr+HsXhlXKyR0rR7B5P/1Jd4KWsKfOYey/v+743kZjMI5WdXufz94kTDPz56O9TTAxW02eUvQBdcK134J1gYsYcD3qgZZjCXYvdCNUaySZbqjbX4pCF02NjWxk0CGqZJ4USh4zEFu5PI5CmAhVuFsVIk8kVI+6yegb+hMRxOV3TthzOZXiNCSWkEu8A6XgykpssTAfWRkrrEDs/JOuk744Y90SGkYSXkvw5cjr+FX5J1OD5lsDoLhf7RYJWatAAiSkZmVfLTwb7vBnzdtdIqfVSgi9KUqblHi4kXBcP7TXZM5kfYYucSvMWI/qKcXIHrjZckJCIFjcOeNkcHm2ck8W/KC193euuf4rEYc1wyV/XfDbNkJIcWNdAo1vzc21cOM/UL4YCwMIrB8S3H8ZX7EDKKnfltCafoj9/n9VUe3SVFuHsyAv1GwF+Ik/w7pCzVGRyMMT3PWsfH0hqiooqnhLNi28O+6oLvL+sEVoEIxMZntULI+S3gzGJb6c5jqW3IgCJCPRBZxk1L4RswdQSPKlqQ7fVSuJTvJznQ5G0+wfd5AgxRKnCPLweq8uAwZm9LjNVR/CpL2G3FYtJuphW64Yif1U5TohjzegCZkojmohBE6nTSR0fxZnDvu8FOoAIzaaN7gsF9CuRg2LXppuuEJNwq/BhVJtuhBHgGWuxXiR9qOzhVuUx907Ww0pT3bKEsGEeoMYWZmE5v+FrdDGLgeSmNB48phQ8hkiImifpXlvrVOsHgRwNnxzPcnj08F8HKV1ajtQsZgmhBwgb75IA9w9oNG33nyTXinEuD8kbDpPIM7sceTLOlVpBmOFNsJVoaHKeYWY1/S4AZTSOjD9Xna6vylyHdzqhlnbm19V1vmx9FVZ3ROy8i1r1WACfnGr8JwnWvxkSNo3RVkYMpejR/h619yJyHOL4HMLDtwWYeqlpq/BkwrdXJhKWOZYB1/UAZSyKfppMu1NcGDiAMYND9C6ktZw387bPrWFhNcuMmbB/8Uu9EHrd5SOHcUGPmcJiz/PwI1SntINJcIBNWFHif+G2g6itUo9DdnkCWHU5Bd2Qt3BTGb0yyxhI1alaM8hHCk9jYwvmdXZp1W3HDWeBrsMP7V8Uns5oo1eG+4HKuUQvApX6kh5CsyDw9v4ao4pDE7Q9pFp/c3MpVX2NOyCFNiYRDRSkXdn6Pk+KGzZSNVwOyfjM8EqOJHQvAissaAHA+X1n4VFl2C8+ufGZemoEU6U7FSj6Nkmn1zujedqYZtqu0MUYmK+yCHtGtyXHDE8OgVJC3K7xerNHXZn9RR7eONkY7zF0XIShRwokqRrju3qoGoNJB0FGqskGLpUO54S9Irgij6OeVo2smZj/DgvfKuuf8HmOzbEa3dCRBQ0M7ySyDE5kKGePSuYInbGqFvC9znxOvb4T9ZmZmM2g5vhbH5kaARBaq6u9jGaNg1RSJQ97YEDm5nWcK1WCryvHWE1QtEcUpT1fl77XaRZC3bopfV2lFDxBcBpxIwiEt/SIlUbUnzGSCtkd6cfJ2A1AyyZU5nMp/pSjqtTTMs7/qaM9Lwk5qwrUBt8ZXADMHeGbOScP5vU3l5fTwm3S2aV6ywSRV+dcnMsV1s6ef6BoYUMsuZa72UQp0gbcuE1LjFCA50n3uEPCurz4a8Ze26TuDPIBofNsBWccfM+k3akpABja5PAEaEtNmNQvUOlfVpP0yRP5J7249GSvpttCgc7311aTtrubpe+aaoMCR6KupwkmHD+a+CMmksoUMkiWt4Q9fTAmcqOlnF5dE8GQVgvOJRGX3rx5paNMGgSC4fHSwacJFyrvqBy0btP4k6LvOe7txxkE3FU4y5TH6AJal8yRT0RV2vbG3YH+U3qZhsd8fK7+r+nzEk3PUVF6oo0SYAl8jB27kvl7CSSXr+05dCrisX1psnMYf8qt/CAJ1dB2heZpzj/mQCkQiMH1CeHxTRgBE4R5q37/e6huH7lA7E7+tAH99NtdAqPYyLF2NznXGC7gzNwbfIHoeC/pXytQiHwKkUTureIrjuYjqgCnhQK7mmAj9hVNkGw6Q32Vefm8Wgi4WXh1PPNgkcNGjAREvfdD89W9X/Hw5PPF+g3awTSTfaY5l5mBuFKQesW9J5Ro45RRa8+vprYXltRvU/Zyn/dfjTerrYGhKBpFr/fgNxc5HfGV0SUu9m9AHMZOVvj16KTqg+YZ9ahPMg3LeoxgmIdrAl7qvLnUVTZ8g5Fw+1FMz4KsHVcY27PanRb2kIdDskAlirbpTxX4MrNwnBHti/iFfn6CfilqdLRTyeLIc7HA+NC8eSVq3U9yE+uTngPM8PrIAcMQbaj9XsBxVnY8aFgifFUd1u33b47VOwG0SE57TAROSijxnR77qh9BqRs5C7VKRdugotQJCkNaEPFUqMlrY4MLUDpCUl54ynCPf2m2Gvqn9n7tntkRznrOX2ZKohuhrQvQ/yNFfISI2R3UVtfr9d5RNacb8eZ282BqT9NDNfW8iK8Xzlgl1ryis73K8/meWV4G6g11aJop7R+qwSumT7Pt22BcUHLVhRzqDA1wEC2zIK9WRfht9u4n+06Ere077KJTGKoF2aUWKfDL/JZBI5wEu1iIWH3Rv7z2tKEsxFYwW6q9NhhdRxIap55GZjKNBM7QXfLz7zqPl9stdBk+gSZZfIO6bjoVA/8B7VF8yDlEPNHCI5nixjuw3k34pkzO8KTP7G0MxR3R1fh2c2gb3OeZpQ2qZYpKhsfuDmDO8cr3oGSQrqR1t5EoOI0Ulo7634ObfvgU4JlSxelqPS5wucMChtSM++lHogxYNifrw7l/k/9g3P4P0B+d3YcrLYbCuHoiGiltJq/A8cujOH+iasDsLEmk3dABNyoqp/vLPTxVGD3dT5DrBq6yMFjeI5VutRRABSff9xxnFJBMrccvBxKsEfpTsCiWHPEpEKsS5uE8UXP2NPfosMKqCtSJBkSXZpyucTapv4VWzxz7PMkE7wPCftPma8jX6AiBmp7aK92vUJgp1NHrt1y8w8sIdJ4cdrXB3aOEQYnVrqzBiwcN2VbXopj8cq4kEdjhAfr2wYDgk7hzn4RG57LjXB0sgZb9QaeeE2n7Ov3b1uXjMAkD+XjXnETmhL8FQ6iY21bJ3s1LKekdxHR6PhHpUtH/qIQ9muq1x2evxBqmP2AoFgWwuR+Qx0rB9rSgbLU7cjOlpfT0RkI9zhWOk0QZUFghDjZzyz/PKhVlhTajkZCrwl9uZ/FX339LGZQVs/UWxuxqwswunlQDtDc1AHENlDQu0beKjMTyBSSDKW9jFEdYVf3w89NjIKOoteEa4ZeM/kvaXx6ZW0O9Yga7hM0dRXlsfTcpZa7voOokRXMljVeq6fFWeeRMnehiJE3/518f7MO/ykqHEjct8QmFr6WPZKPXpVVEYy/1NIq3XNWhd1o5pavUikFpUiDX6nNCo/YM1LuBgqXsF2tGQpYWuy9/oI0duZj+XrR0Lcg7KgMSmQ/16JcX/xpNGCNRrJcizacyDQyeGjaCIADhIrK7O71633kZdV120HSyxpXIcGb6L5r7k/sNuzteMGVattcsWHqHoDLhBTm2Saw7tDmek10lYsHYZaZy7j065CX/twnLaOrFt3IOuyInt4HaVxZNa1PD7LmZ3pcRFEvrfpdLC4diYBmNCGONGHIIg0x6oiSycGwE1uX7zNUoaKhFUqyn83tDTWSL6FthQ+q7Eqg+WFi+sWUtUXhYfkmHdpU4Io2zhphITrxlrun0KYWjXc5cIUlOs35VSJiGLgj69rfmgSs0NiTjzJ1rvp2f0YwLhS7UoSbroT8WasQtWBghPDNyU+bAVgqDeNssNGzFIjhe0H/kpc8zcK5K6K+IWK7rpgQVEWRvx1orcy96yy4kvIC3m1wMGxX6Ui3sKumCDcTX2QIpKA3vl6gbXGPTkSP3a85n/KnYlKV9fYzSPjQWSCoJ/0KZJSymRAFnifoN8t6ktJ4N6aT6FN0Y6ImAxpWalB/msO2rmaxuRQMGFsHqFAdUmcmDQ7hu6kaZHXoDoDAzof9+Mnc8zacbohHSXoVYAOgYL6vieIgyognthxHkvtlOo6zNqJKPHjvCZGX+jh1xLx61W0obfDyliZQm3TCYbs2QryjgY8qbeivyn6wU3ESgQfE+fz2fuyA2l4fK1dSO/pad8Dep/zj2tamMD7Ugq/eV6dunTQqzekgepfnR4aS3b96T/9/Pg3bYamRP/Rrvvs5nz/8ao9YexsHX0mMJyM/4RqzAQawpN/FKKctzCw1+uexYoQQ19ua6VCKyZfUlAETJCFajlWD5ou7oawDFJSYG/BPnDz4ymDgY9OKTCz2X3AFAhrQP5/vUX2vyAsfMMr2jiH0ZKuHENBH4IWQU7KcFmtZt0SVh3wBlqR3KC9x1jwfEw3y/KED66zQ9oy9Lq5XNxBCFWCwUJ3FKLKTXlYCfcKxvZCfyroysi7HdfgXesaXYqBB+4kjnhDIrOa4lF6Yy1HbH+YR9kh6We1m/Br0ib6uo953UqVbi9E+R7O2kpR+5B3LWW6XwdDMysjm3TDOOWsakwYZP9mfRw6iB5zID3qgJMehGNOuCekVsZ2+tk4hkTzYBGagAtdPDaYgVfzk41tD1CPDFt/98pFCDxw+j8bhQBEBZhgsnynqM7SwZkaMdTaTFGCxC5wUNQtntpGtjTmgwkxogM+MkSbgWMS4RGZNPuZt0x0t8rrTn/CuhpaCWLjly74f0okCx7RK5i3iqm+3jwTIFRYjb5Y2W6WeTnp7ODx5eB4yQzYqg8Ynb4o3pTae0agrPVjWPyKbrcdHvkVLHc0FzrtX7KN3C5bnBWoKPDUxu/AuAM0fVOIiWZzFrQDt6LYrahE1bd58FLCDh8x5oUnWc9z/iPan/9tcwVAKCIYUlQQldm2kK+48RM/oMJztPKWxtjlvJ/PBQhh2Lxvg8Ugq9O6aVIlvPE9LyVsU72O0+ze7tfa2pmswcCGNOEgILbwgpu4LZslSN4cd0iK0vHSVpp5MrpaRz/cZqmgzt3KsqAj91DQTreih975Y5Yx/tuynhm3Fh1wbaWWXz63k3ORJxupgHzzN9WWLYFmC8FrjUKLZBxOGk6FAktfn/Ebkpo/DbDLEswbd2iwdDwibuVJsp5crBcu7hq+UYoIpgGRPzdVqrvKjA05CqC7tkF1ZMJyRzqleuZXebX0dGrNEB0aaYSgrRDjxsUyl1RFN3LgzSxZy6l3v7oLNlTXZulULZ6saVenps73kYghkqwaXB0Wmt5yrIzLKU4Hgbn4cp7+KPaNiCRgNxB6b0MQbsMc29eDGDXiXTklvZVAfqQcMGrizQOhpZHS0wTw4kkvlgNetfH+NMCT6TQ/bcLcybj2oS0c2nEIIg0bN5AH/FaMRJjbXIadg/YTwrkiBwDC+MdNCk5Qh4LqdICE4a29V33Rkz/FNo0c0c44h9cJ6eu1bwRuAIFTv28Dap3DJT6ktOX9ckvn3ORk0ytFoC2sPWhemwsw5xPNEFzGdBs5eD/i/5md0QzhlabGs41bwPHGqf0nIt0i12POEORxdUN/NvalyKGriwP/uDAAa+CkESuD8iR98V8Hd0wOZF0iWsbVCmUfFTSkLsxHUbnHyjT0r2CebhXKCrTmC1Gvad2YivlA4ugDdyKYEz8D+OpL2qSx9UmM8JvqVO4xDxYDB4wfHTXbfGBxQVK4VjBPOJN+7nXrT7HswrLYfJCWwzZNGl+4jE83bukeaXeK5Yth3ru9NG/0x+kt0hLBXPq4HzBxfkv+JAVGl9hjKpysdd6CJDMtKQWRJAY7b3zv+JWpvKbbHXwEQJ4imYGY5tzQBnhOg9+EmnQkD2MxDcMEG3OHF1i9lbgvOFWGenhK9rC8QjVlCNM6QFxQTfdCt5hO/fpo1/XCTdReQ3DN4lpDy1QBar3HO/Olv8fDBHjOUdT8FBw1qgHqRub7e6sr2FSMWrgeB7rXKgmhbdkzpGnEEein+jC6mO9yfGMXgdWjv96dV4WKtiDKrzYiHL0u8AGItEJyh0pHC0E0V7wL/GIPvVHzK/m94GY55Bwflj5Of/SjIRDaH/to0wgtIL4a2gu1o6anI0jhY0G2+Bqki/y8S4dtUzBpmWsL3lly7PVmc9RhWOTQdfLgBNvUWvQWa1cPscxVXyFT9UY2nyLD3nWKrnV1bhegnBcGJtqUnU/VT8dLQrV4Ekbhx29R+88ckWSpLChjGjSg9k7xSa9pe6KwyaWng3gfSIaj8UOEw1eikcdhVxi69F7N7gbLPr1CbWb93CLxnNyY2g1+4BaRYAM+74nrU1iiIXeLQ3pTAgrVRFDH7eTGMX6CbddRc9HXUj/ljGEgCCFUWyo6EAxZ4pFs3kUR+C8/JAccMrnn4dWUsnIH3A6K6Da/ePeH4ftaJeYNm1jvTzyih/59HADfTbibKc44yugL5jnZD3VJLM+Y8rSiIGtAHcm2ZfsrXfbA2XrEaFW+gVz5gzElTepfiSmXWq/TY7AdsgbpzDuClshfMkengfKUywdZsiLNOUFlwOIeNcsaqUYsUuaAeAXwiL8Ou7b48j4cj8k43IuM8XOc/ZsEpI/aEGmEbxwtWn/SFDRuNLPAZPPHEqs69yehdqP7sJ0XToj8hhtik57UuZUOsbZ2wDjeywIpmIxGvO4XGcd+RwKbffDmRwiCMU1EbK+cAzk97fC0sdmIgpzoCAHuQgZ9GFnoIKFgPsF4qy5yhpconpdnItHjs8y3JaIVb4Wnq7Bu0c8ZnyClsWj4NGY+pB9JTQe3gMf1uNbDCKEWWDt0mFjiYvzhJXRKjPfF9c4oyzC9VGaXzT6gtJhQhzECK8P5mx5UjuQH0x/P/7aFhiOmHv91oaSTIbOvRQnMD3jEzkZY0FkKQg9Cy7i1MuBj3eRuHYSHWMhKGlBk4nPZnB7hRi587Oh5aK1Wn+rw8fQe87ZHTGPDhf9g7+axjcq/6fReJQa0g4QeVvOLdLImwtjRxAColsNkb6xZkoUX80R22liZCvY7QHJdtJhYCccCoRxBti+DqWxlgnRf5AshybxbMlwKQowLwM+U2+uyBf+s6CKFpzLJPewjm8lioxK6yxpNDvWiId+rLvylzAUz2NOuDdLosFJbLXgkkUQcQOVtFRDZWViUCGLgVmykO6Z3QrKV+SAnRKSkh6Sto38kerzj2upbgJn8ybeTqTdxDNmB5v+leObmjTfnc0BCaSdCxiFR8u3bq7X3V6BK9lrVnI62+BcfzsYfQNGYkpPljbKTQF/1p+7gkQcNiFXd+GOvjF9DtI+bP3qz4VoECnZjvvORxp3cA1hd0P5MsuO8K6QeyTbSnoUs7cOOg1RTfyQWHlB4hoU/hLTz2pzWeVJ+3rHmMbm6K2sYFHTw8U+HsREyUdoVoVzKHBWLjem58c5qgAICyMTt1nTNnNdGvb97VCL2D7tgtBPVALCy679u6644m+jvoZiR705xLJ90ebGalJbTyq8o8xh5Fz+/3+NdyH954eGYDIeSCMl8WYnOJ4tXj1uizcJw2uYvg0lsSUeIaFd3PO2Y7yp7UssRialyHSDpP2YijnUXKShwXvPKadcC2EO4E/U8o+V/OijrdJO+qEhdXehieqMdPcQYXxAKbIT9ELnx/UcawyE6N5h+8ZbEjZ2ROVF2HpW3B4nWKF3zDQfDkPLB4MiftY1WTzg1bRDzoHZUnh0Xajn1OCfBwsiScZjrYM1KIhRB6KNnQazGMLphl+Y4C+pc/SUn7vk7bWh9BvptFayckoYHuJMAfQkrYMqhDvQn9U68HaUhNWdZWkr5Jsn8xB2knK5m9Q8GSK9WOnEL6B70t7TsrxWGsGtpP2URjpSSXUsrZK2RGwcQG6iBB/fz5fUZmOXkZYPr8K+lKJRJKJ9DdyTKXzveRPecws8gi7LCXQYYcP9ns9yJWpv6SJM/Lc3VPeiZ26yZIAZWYhm7Ip/s0T0P0o6wU63E/zOVhPiIugHmP+t1cf/bgQRvUJr+FC52zLrZkF9MjsAJAza5ndSxk5OPxIKEcj6d7LdSUCCpmkI7ynjNcacYPEFj+Yk/suIE083IAWFOPc5g5qNRPO9vzXNyVNYflsVoeqL4UiJ8EfuXNU64fZN6lefUNIWFuDgdCwA6+kSoaPgpEFHSqNQVKeM7FJffOf0NNLSN9jC7Msxl22GgoB3ImE4bwbQxjlJra10y4INry7nlRyZM35YvP+iW1kq41qQ0Py1g8Ji+MZWiwLIBUK4OIyjZdl6NdleqGBQXNv/jKl6+F+X7Tju04eUTLi+xtcapGc85V7WpcotMYfg8R6SupBrsCZxAG87mb+FG54hlWPG9wcyn7WExnAFyqQR6t+ECyKeNFrPRpJkBz8HCrgt22XAJQMGYF0z/3+OHZwSf80H0Pmbsi0ohTnqNSgyBoTbVcmpdzyaYcXPiOJbgw+LzByOf6/2fTK5rzEWZ5H3s/M36/+w4Rawq61EPBnq7JGdrC/lAq4TlwApTDF7WJmUG0RMPcKF8LrpqsBwpbgeWzH/Ig9XC6IUbWpf1rUUMNrFLD7zxoqOdoMa8Ukgcw2esnTsNE4L66zD6aTPlkC4ttIusqLVeajDIRvNX6JAvMsSajFabsjfWseDObZ/u9884ZAwIVLBHnghYURGRfRCw6/wBhjOtKBHoqOao1aICicoMM/lHm0jG612rb1Mm5HFz+eQo/KALM8kRlLCp839UpZdZw8qnAAbcmVnpK0dgLR0pf9e8Ut+3XK/wfOXc9WDYKBOrYxkX5z1nguU6vHDhnkw8x8Htouw6Fi8I49Ujla8JO7wJEJXb2kV2yipg9/Cj7vC3IZht/YXfdqZ3JQlsRCHNQpUTJmi8MvWZZm9f9fqb1lusIvr9uRG3HHlhY8hoAVtLZ6HBdaYYXWwb72FhNyl3nsUMm8fimROQ9oC9tzdVlOpbmRgxARYk5xNdFPeQABxbqZgugzhBoS+b0Chnqxu8VFENooE9KX4uoSGQ+oB6aZ6/0AW8f5etCBRVhkUWBUcZCtgJDFAKrq9ynml7wW+UNNH8yyLi8ZJ6fyPR2n9vA5xyqppIj84ys7Bg2J4M6Yr5Vq5ggnHl6Qv5feNyUJunSQ8MhQkJrPmtiX8gXeR7mkU+FR/mBB6MssmywLBlRxEUSA0hhFN4ZE4hznHtWcS97a57JT11KlrIOyUGVdCHL09mzcTw4pIfwLcZvoF6e6kz8IWoj+jyCfKiXbd7pshl+ydxKufbuwVtUZNdMAVPq4iDXZPDf6REjwMsRONXYUcYpVRYoNBWe9BKYEuxrzEAlj5FxJbMej7ON6GEmcPOGB7ReWsE6uQcgYi8FkZ4MQ5lc0n4Q3MENDLzbYiJMgg9pUQ02i4pUGx2DB64T0r1WzjSGO18QdwdF50ghmun5uPqMRIrQIbyseQBVZXTXjPz4bkSenBfVTYjzx9VfOqkN8VUFv2XFaxcAEnPssq6sLu3MQF6Ph/v2asiHDa4749K076Id/kbVjqp++atzN/n6eAz+DrT78AvX4S050QxGrucFhqUZEUq4I9wuK97KwfScRvLReO187UAoyHq94ZRp5fnqL1GmAO+PISmf+6i5n3Rnmb75YKOyEweKHW7u3dHNFrBfpE0KFzkATegrPb6EA5eZbsjNQ+2CPEqTqJf11YAZQpp1L81dIII+9/WesiKBaBGV4skH49sfupg9CcAF4hZUcRlW5vPvRRCYiuEQVbPyPeR6wJiK+QyQ0f0pieJV4O0pfp1olRSGpbsMs13OwsRv0NTSbkCt22TIMeLU71H6CmIsRN+3ei7teWnuYs2T+LjvUt7Ydivpd9XrvaTrbfz9cfPHA34CpNPLBxyamyT4tXEwogEn0JgkI1s04yN3BdGQbVvLzQW4U2EJOZkZYAZ6DVR3fEQToaC/53DUyWpR8jRaB/R/0NHLzS8ng0tW51tCfZmviAcLGAASTUBCXtSMcQGY7LPjLSsnNkujjD75ajCSJfPQfGUvPP1iIXltms80iXG5dJg6gOyiNcToWsZDaefzLzVic2HmbBN/gL/Gfd7k6LR/BJahqaFvxzzvUzJGy1Sd40TctUcrDbwnzYx6HAnDWAXIgzpO4izFJq99+lnKfIMy8hhxSZMzJNogTjpfGqGxwNxOE2lwNrUSnG+XKp0BwhADOzKMvq1XLT8WcsyIZ+VQvHNy08lUTKgzu/6FFUFBJbLic7em60lhlvSlwcCZsEyc1izPZtqn4AxE+W7nPloBHO5uqMATtf38qO2qA20LG4rkJCi9sEk9isytSk6WgguzzA+c27Z8J4pJibtRmV6Vc4w15A4l6PzMvyd9e8L1bIHVkAibe2eWc4+MMw7HWWSE6mPMhEH4+eaLdpHzszWUrkrlnuV5397MSV1Gxx0vGlaJGMKSTNVGHKnFmqBwlr28bt02qLJdfTvyzBrRFZy66L42RAit1sfolOqpnHOFociO4/rx+ouQCtLt5aj9LOXXQVAsMGjR3iNVGa/YvIVkZDg6YpDB0+MEXQOQb65WLmVawcZztF2LU8y4Q7HsbDSPB1dSDTtJNymILmtBoIgwFLJk4Xns5E5dXVRDgIqiWtJE0EQZ/LUYly22Fr1LE+MqdWBPuraf9M9nmsEcYvNh/z25fC7JQ9m7f7Q3kUHdkIR+FnsGfu/5HK3kleH5ncg5HBYIy3hR/xtFai6jOfORGgw7B5xk35nK48FiVWup0MPldQfHDSGb++2J+2aj1gAa+s9YeiP32fY2eInlI+lxLUOFhx34BaVGgdKlSolyQ9kgYGsSjaKQEKFPbp3dowDV5yxQhAJsoxCms0w62GxIv/k5V2X/uB9wJLeS7SJuYK5c5gb34/FI2xn3nM8yLhdWHw9Jwv1FUYDl9ZItWUOi735GmOgWM5fqzbr3QisUOP+zitmKc0pEuUvNPVPfPgPhRCHTfFP3m83s0NqJDmTY0o6IXwKhBu5E1OXf7YK1VlS8vt76wAO4iYkPurchTz+ihJ63CkzcCwwvjzrimHG6SeQ8QYPMkotxYMaGUoIxvbIFBy2SPGkZ5Vf7PFmkk5J2ycCzwP5gMxewQHTQVAnhCktJMd1v532/yVAKDcQDBX1wyL8eR2akAtbPYEgn+Ox7w/Wd/UtCuJiIU4YPmGDNsf3Ag6t3HkdtCUMWlNLQuQ/eY/F1j0DZFtp3lcfVyy4k0mPlSljjXEZkInZyydpAmfqPhsugBontGAw/U17Uu4PQasXlwheIukZpB0L2LVY+35lNFKR8VHpHQ1tskPOU5NjvP2MdSUYGGFr8God5L1/+JU8hWWL2F6ZJOT7ai3GOBd4XewlTJkGoYUFoCVm9CNHU2pWs5Ur5ARq0BlTTPR2QL+pFhXptOSEhsrwxbuyfOtJn2O7vklc1NpxSsZantGNoorZqTkVJOekqUfrht+Zs26hw3DL2xiDK0MWmokAy/rJqUVf2/3J4T2d/bNXsv3YYx3G6mSpv0hIhXRnV5mnBl8VF0uuD4biR6AWE+cHhLpmzcqeFI40XX/tCbSO18OR9IvWdcb/o31XDQFHsQ9D5f2nnlEcpnB7UhC+i/DWvU+npttGXAWsWgtjrIPzvtiKOsH3z9llbcp/qYE80tOO+GmK7Jny2epFnZd+gZEVgxJ7PSd+1pmnYxd1mU3dFz3pKeyInOovT8Ma7h4sfNpKPVoQfYbmn2ydWHU85FcDCpCFX9FQMMve8Y916KcrFZ0PmyV8GIzRp/qbodcbfHdy2fwUSJ+aRzK2Z5lKShdYibmpphvgxs6NdvzCvgB99Bf3rd2LcGs/yzkxxei82wwUcdEkJiKUQyQ2vbbJRUqNwpff9Ky+Z6Ny4bhlO9nDiVVfGPQoG/0CVOnuv70QpZCyP/7Xu040HryyKOva8/lrMiVL/W/VRZ7WePUl+z4TCf2n0IU50qiuD96kKOUlcWQdAD/Zt5SGFGX09MvyWYo1bljBsw2w020hiOYy8Lkzx0KuQ5bnoX3kt2hFLyuWDc9rehh9IVRXQ05GJAjy6jKsxHFNkTGMiu9xC2/LX7JINn81MkWxyLZ/IoLaz9orwfD6g2JGu3/pmXd8AEY2DDmFizS68ArFvPG/DusMhtS2SliXoBhmvwtAfiNIHZIO+q4P/hd01eAVHp45dvjR5/DEb2dxPX/5MeAZuJ5Sx5zyx78scqFFv5VrF9lXtMkSWCfk5V3EFwynIUrDOtofBAguTmVBmla2ZO52FvRtITbL1X9+9J9uxsY3TKvnMJv1SFpPoLkOo5EZ/+H0bVTeQ39xoRH8fx+/kn8m5FiQpAdsGSQyT8r7UtoIKsKleSm6j9J+9KEzsh5859FpdIhlQMMxpgygbbhc1wLcIeMhgl7UFP1/m0OcPDIj/zCYKtVzm+c97gwiwmIvQb3kAk+r2chK4YL5axkTrWxVOqpXcgUV9dQhng36kimYzAoVV5G7Tgm4L6ZtjoAjdHh6yo411PoiQnU0Ax55iWryLl10tXXkIXMN/SL038Pq4gbqOpmcx76MTA2uPgaZ5qs2dkcq6iZ9kzHlRmbsZDneZ/AifxLdsrxW5QWtgLyspSUsNAclzzD92wkbJEdprcKbvx/RFQpRz7l9GfgkUbU/MquChh28QgFqwM9MhFI7vJqltu5Eln18NFso7SGtaavOzw5MTWrHg5W7TPtlKufeItrcbhN281JzZ0NIK+5lwu+g99IQu9/hW+P51hXgjEL+qsUpLCsfOoZV58L93eeMTthuHkKXcHSvk/PXHvcq4ZDb9mE832EIk8TPFX1katTy/wNI1lVxaysA1bY3jvC4BbtyZB8e5dZgfKeP+4UDRJunHHXoK4l6Fue5I7pDwnFR57T0Xbc5TU90HxgxYN4mNjVkI6eAcoTFMETxR6bpDmGoED2RXqUFubhmWLpkn82PdQN4X3st0PF8v/nh62+1vP2t7kAobS4p/MttuWoquUEWPZ7jhqA1H7u3vrdIStuxj5vvxWhBaRjZ+g4Ul4Ce8q1wASa2t6Ol7J3hqWo9wmL1YvBrmJ/bL6tgHE5y/viDC1yg9Sz/s7kWYljSotz+X79NY7XNO4ufgkhu+LrE3s3j5sJgzZh1SklyiaYb9f1Tz+aRlWLqYmktbq9kd4Lyh1YfXiCjTyddZGDoDdumxJl/yS995P5Dz+gMLhZ2fVn5jGuePXwR/V60YGT8YDh+grdYRnCjsdQdG4tQosLp5ytdpg5mWGl2QRTGjUiTxsh65vMeWsOBcYIz4kMnvzCr4qzEi5MIry7HMmjH2kMKRZtn9oDRXVbsQIJ7BweIGQTdPrusXCJiNKLQg5h0K8OaC7aRdAsS/8p8RE243nU1HH5bJColFoO2EHQDp8p2AXEBkdAxFgjJvUeugJ53BXwKjothdhDwrGeBIZG2PvQlAanzD7GDj5FayVZLqY8gnjt+TPIm2XcKMo0mXAuVwWtpp2TAQjHQOXufxghNnrnyKgAIUWHdDmX7EUhfqv2v1tJkHB8yKZDMwoGlKAcRvY+Am4+VJNc1X2jJpfdko3gKXFOGA7Uf3apBlYVSdc+uhZsJoCBwh4zzbf3nxJNqLn39ZkDgYJWPz9T2oT3s5YwYiduV6vxhZntlRq4dBqQ3QH/z1pIEI23rrErw+YGy/VWe7+MHIM+ZE6JkIgHGYVcwofX/qRkQXMxBnUzV+stbHvtJP6txvycsMGt2LIUinVxtkcEKZgsySgRk0SyFRAzdoHBmeR+JmiMcnObo63LPrTK0r8YfbIAuFN59c+CYZuINXMfe5ClnhOifNeZgf1kxU4wrvdAAYGx31nPBOSm3O8sMiTqhwsOcOfvnszRPoZagfZ3G7N3XqhyoiuJEWOLxl0Xecfu/COFxUociY73N6lHydgFa4VeuVA0YQLs1PWWT9ip9TjE5+T5hHrIDQNitF1COsXxuHXfnKYCKfdQSMuw9nsbGoRZKB2yScKvcLHYwQZo+/NeFSQ75NuwN6+TdVN/i4DXiZjw7zxMFhp0TkU8cNZwB33dzendIelOOF2VwTbmJGdxu0heBh7i/OlarkcjELtzrsj0me8TLKa4MOcQS+NVEqNdz/aup05rSCxoeF6ON6scqokWUnIG0jAY6kRvftmJEhwq7SX2L8NmG6c9FeYEBKIe5pq9CZCNve57nv9y7ZHnTBuD7mjVRwoz5cP73YWa6699BsPDfTRiHpzaXagIGVcfTMZ++D/kljDWRHAMnyIZ/d0zbln/gYT5lql3o7jvSv+OXYAmU8pbBFFPmxqpHP9KSW2j2UQ7w1xqOVaZhDr7n3c/V51f+/rjTf50ujn5b82NlvaT9UrB7Xsh7ggRtbFyvhuM0L420HGFey2vC/904o9WPiyQv3Ex4zbe4/ORC/yzL8MOdO33D3IDEQLJiDPQVRi4Lwe+9m94x+0sKHQRfohvL4oqonUsCWyiwmuYSWDPydCyoPANSbfvKuQUtKjqDS/AGz7htSNYP5J2sRKm8dt1bLp1Ps2h5ashAhezXjRbTnGhnI4F2XSeEuSHgW9eDVjYxZbK526138hMkC8IeO2nXTp0adXrXTnwzm/EJwcFs2Z5GyAIdqrprAE2D5PuNFAQ6paHNEHhWVhe6+VPMfnQurEggSG45mcUgCKplAqiE6XltJlFudkpoTHPc+hw2qsCqi9BBG9DLaI7RDTGStwaA35BN7MOyhgdHtB6nJhXDa/WFuj/yZk+BPm8XXiicHoE6lgFA6W/nKW1Z4kWQ+wICM2TYbP7eC1bPdSwBcTj8h4cw2dYo7GgLYtZy+1IHPN4bCl3wibq0m+O2p4vjJMvGstJ3qA2ycydtwEhR14RbxJsSKxnwNTXA6sBfKRpiw1B1xxJz/Ofv37AwAYxUUiaHWcERHQsCELO8eDhf5aIYx3eVVoHFTkV0aSHBKgT+KjkKUe5BuPlTlnCsuEMPQkSmgB3fXwPqSSK6B0UnWmBxFm8XXglLeDJXt+2BiDqF3sWI/0XBKJHw8ynJnq8Ud6Y3sEfGvCIZlxVx7s5r4X9mntmImVIxLEFcwyeKzqdPuw+O9QCMEYQftFvJQ7GTTQNq1jZedfKZR/F1rdz+Njo0rCKzDUPMs1CmLjkDOt2GOl/fbKW0nuQa9Mh3LdLVa+GPw0eb7m0a3dn+ITWp4NoUgzt51klB5z+XwUwwJk3ww03dMXv0yBpQB8qTfKTxPbjqREITOFXm1K473kvo0A/qW50hQyOnnyLRlpQskONkilaE0Dpi1sZ8Ii5L+5VOdAY97r7O6T4dfwOh8bsBZcse8Or0/JJ1sDlIfWXoi8cZ1MiVxPPI1+S7hpxlKA/cRer+1rc4aCUPmFRPc1QFqSexee9FU9Ud2LJVvXoiB4skxU+niZXnKyw0bkBSN3UvUbSn9bXjtp9t6yqUVPH4HxgPACL2aMk+p/d9Ahf4DNRgRbtH56LFIUDAFBqg3Gbo6a/d/M4I1M4BWRdE/fHMMZIs9sQTDQSBNx5N1pym8r8JbboLk1kGtb4Wa826E4saA4oceEe48Lr7XxVJIAkFqAH5x0q3GMgQ5EaKZPpwEcT9W1bxes865BblEimflFAhTTCMnko9ao4zryFo8HF/wSHpu9qzHrHQSo4Z1JZ7zGj52gvkVXkkdixNRYaOBhyw1K2w6k4BOyRMSZQgJifK5lSKrXN8cOUfSM6UTMtE2SnaDyTz/gbDmunOHJqUUUGTY6DbQDP4VqKAyGpA5P9pvwdJPektXua4PYZcxKN9tHT1zsxeWYwkzdR+7uX2qy7CYrbdeGmx5mJrcdUaHzaKRMZOJuEtDv2uB5SJd+9blTBRRC+Cnr1NOBVl7dEeUaVrt/qJqGjSFLSUFyW9zmWTnzSYnOOX/BZmdKvu48fmaOPWXeFr1zABSCPTJis/WlPkeMfLH9hEF2RCHGGpOptN6rI51M6Sx0pN6trHbCEgZORGzpuj/zKccoCYReUWsAiXn3n+AQI3pHUzvWF+MduNcI1u3Xaa4+n+Ag/kfASkaiEp6e9+nh9XTUx+89ZT+ZU+FKusFYKX03CY7N/ZxR1lkhSxxhLNoqkZJOuQIGCo+LXDSzjdtTft1Zdj7P42ieb7lklVYnxF9Vw8xH8uxm18AOf+EUOWGCP1hi9x4WFGYKHd5onE95evQOKd3AxOV2wBwuKHka5dFL6hpNZ0S0x9lnKanVzqAv+y75fdyYi0aIHWxvfTnNQtl9Siacjja2zsPyQSHQh7gDE6mRhpQ2SzC4jlXiOvqmVj/aUZ+k4rdJUDOHcxua8N8LgounTMMyipRb/1XMZwFsDnaDnY3JqW+kMQvDDg+eX70tH3HmHd4RGogSr948MjYIQ1R3ejpkRgw63pgde+/rD9Q+qZMT49dUBAL2YUxeyHzBqI7HKNOvQ2ja9/1q1VnpbV3EKiVRuSZBlCusBIk1YvrcZPHpyIyBwNkfbGXTCJLSJl6k66D6ZrXSRQG3opabzKiCCvbQ81SJNdnWDjNZmyVyCbnK2aWtb57FJUC4Hy4g1D4dQXkqZDsL5rxtfIpgbUenH3k/1/8AtvV3Y2igWJBYQ7jDpa3u+9VAXmeKG5WNbs9RC7DIrhib0iZPsXKXDctTiYo5puS1eaxAnobCLW+28yWGsGcp4BrQlrjYHRbsJ95QH7RiB9l9N5T9+Or5+AvHIJGe6E9YVdlPm6YcMGWTUPp0IGNOHqg8qC2EweEeBgbSrsgIOXiL5Fts7ENvHr/COXKzGwve+4i7j/cYDmcw/3sHaCjL07jq28mYnef7TeRHkDOwrcv/LCVAt0B2hdMKDOigC4ParLcBKLzVpMSGX804YkOVh0rYFFtetGqVbxz3WyYXstVhKjfqVyP+EkdiOtrMFvP72QXPe70p9vdHAtuTQglwS5zmu0/IippFAKUSdI2n98rkferx4OHKBYmLoMpswqpkEbPPHI36mUfjyIPqywvCn1YYT+C7FqNK0NIoGGbRMt01pBOex+EZ26Q0cGMznN4dI2hFIJ5acPoy6wKwYXoNYFkzPyia4cQ+N3ccI2EZv9YmgN7LpQE39O502nOvOMyNQeaxQmBd5zjCq0iwS5jRfdrKs9MRHORVFO9ezVPlo31NuexndkwE5gXTIiR78woxmI/BMRBJKxuPdtV9y5nCC6dL8eDfYSMnaxuygXAR3tGA+lhNZ1+Q0Ii4NJvFfL9S2aiRw7yDy4pmOJW7XxEn5u/sEsWQWvddD4fl8036WStQDXJr2KHeL1cQuWO2/m/7lAfcJ5ZkZglVVWHIxVOESmnVZH72+di0iBguvtVlX2XovAuR5SsfIrybSoMGS/BF3lSidZE7oeBL6hTdY3xlh2bWNETaZEntOqqMmnCDVbmAR44q/TD/FjLv0j9hbwIhg6ojubLG+UUb25pMyjeTI9haCKCfwWOI4VhVz0uBtEUp3L2sgxWBRIn9+Wxy/W/NMS9tSRy6Wo/lLnLa0jqjY9Mfz0v1ZTiGTOc283NYF2y7Gks/N366ys/vBsaeSFASq7Z7XBUVf2TBQ6fwCLWjQifKzqy1aXr/TTBje0YRmChO4a82ibS5X7vezaB347ZIt0HthDqV0tg4B7MnwFbxPsR4U+iVW+tshP+453fzIAo6byx//m+eO2D3w2bpPfRu7Dg1pf/IRA055/hGtiXi5/L12E5GJHwV7AXCrv6NeoQvROFsSqvIwjmVBTtlp5xXxiJ6nOLqxN6rpxdkEQnKT0qKb93CHiwTJ4BoOKTbzB1kPAxl97qI4hnn9X67AkChnKEOjO7IVByB075Nev5HhXLGGsH5EOCxP+GBWpvkQ7NIDqSeh+4yTkvH6tMdr2tsVYqgtUmZGKt93rOk0HvuXjK6w4MaD4JCHZMZAJYD7WIxjHsC1h/4UqSkekvHmAiOJxqoK8yc3lRlUc6Xo4v+b2Ay0p1dLu+C7s28fmKpnt8yqeRr3KFr5w8YMb0JrK3Y4Q==
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>另一半</category>
      </categories>
      <tags>
        <tag>小婷婷</tag>
      </tags>
  </entry>
  <entry>
    <title>暑假</title>
    <url>/2018/08/25/2018-8-25-summer-vacation/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />
    <label for="pass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1+dc7NkTGSbDKZK7M0gqI0KrBW4vjRsKda6BWpV15IZhHX3Qcflh6y626f7KzSSQtSRz5XJIu2qzeBJIICxnui8xbXVG8f1LcfVJfjOgPf2/lHgUQrC8qv50FZPekj/aU0srxEYiC+vwUjXdwvV4IbHWvMlCkCOTCxP5crcj0LetP5lYBL+iM52kzs6VAsvwmEGz+e6g2SVPpfjOKAGwDPXOcBqhTt939BosDML/5hK734wuOsdaoXFdCsr9wRe0jHGbuZzeY7QilGt9zsdti4do9kdqCWp8htyRa30q6Kf2kUuqZ+xpFIR/lKUI/222B17oIcUs3r0An4FQlqGvCubOogNCWxHCC+qaN01GYFkfAQxnVOywKuRGW4Rdn9sPM0MzkZMhO1Aynyh9XJWvBj43AbK6p+PQylyUlOk6ZNAX41CjwYVWZhoKKzq7yoEy/Zhdr5Umw+jvY9/raZhbSCj39blmupQdDK13HoVH74L78LNlEU3+aFRRXUFIIr65Z8fqczilazilkt8CtgpNugjKXdXCIJUSSGLNvxTm2haYwx+5QX0ox4Kbmw5VNcpK2BVR+9FqAJYkfDQ/Isrwm4sV7h6V0R3kWvDD0ffseFVl6dUxUWMDM/wQu3wLhHWjNS+0N5ff1QGoBKIABTQB2AA1gUrlrrz2TYZCHP7/xpoiwT0Z+zpun0d3E3JC/mSdgUgqsWxJKnJZDkzP46/PRKYQ7Lyno3pDudtHFKpHeeRsHreT+v1pn3hb0EeZd/mR1klfxN9msQQ+TuWs6EhH1TbZPYv8Pyb5DV3hT0sWGX2Sg8S+DPjy1afR18xlrcwerSArYp8wBxmSzrPCZopZcMCvjYypSo+AWAqIzUsglM0aTwoMqVpdDBjQhOLvyRrbwIpaAIyoHx4If8NowlbWj6EYPE+qqEKWifCQueHbT3hPfOGBvSluakFpOrPfZMBWG/mEGqVxtnOoh1AhkyqD8Mskrwk9auU4NZzU4O5D+YBSK2YZrfZg7rWbAEC/71I2wQ2xoBIECUYWmoc8hzIRNNYyb7n1uCY2E2LmUGvrLpBdsIXUlrfaTUoFNFnex+9vyWru8SFKlbQcAUMLvwlXWt8dGHfdXZrZBKq7nleDnF/xqSlTirGY4dfByEAd4bHDnzWXhjd199lJFtwiRYx9A5sD7XJFxjBgGhXFqbTc7qmJ2OEA42H52+941xw80fzDeVeyleRsZs50fAuQTQ3EqqOBGYX6PjPWOumH1uyNILhjXd6T3B5PFT5+TW3d0158rAhCx2bdSjaJwa/Y2CfTL0F3fBL0gW6ex0cehQYTacZtKi7oHxyQA9zJ51UiQmlHDQw3QpNY2j7XJ5sC9lFeCawKck4eJR+osfsifZzfK4Zqe2SrZB5Z44FKosR5LjgpKeOXnWHrhDsrRHx9NT0M1pssQOdpe0PjipchwyweJNQ8XCJey3Vdil408QeyisEm7k+YNjLLFPGXf3IoIIryVywbB4otsKmAjhx538Em2VQSUITQgNPSNi1OF+r99W3WaHhEXxT3ofDcVh3wGJSdWUYBIujAyrWiexPvOQ1hXS3/ySGFymd/XDvODcFZ1Nz4yF67Pm5fUPgCafK2zXcgSdY4G87tXwNFiBNiIIigj/gicF+DL4b35198yKELuaiOYBQ0BEptmJST692T3tPc6f62I2TXKU3UQJXuUwpi7/x6vmJy9sVlTyyYzjToFJCaEamKVfaGg3pxSaqSPJP2i6XMD5EmN+fjrGt/WM6ulBskAdZrFvtdozDKPpmCrjSvhT1ncUIsFbS+LnNwhnc2JnuIqdoH0Pvwl1tMIXjR1zawy8s2TvPXtYJiGlnk6Kl/eXjUiu+Yexb7D1sYJ327q1Umlwy4wuCu9Dnf1N/gOlXgbq1/+5AzNM8x4wcuUWbAxM7qqzsUsCx7Wbb4RjD7ipyZSQVrkBDYJnR1FfeGK6A94zLVXvpHWA3G9XEf/khASzE1VKzsdEeXprARPhxruMM66WKABdN4bL6JwRINsCjRmGgQ0CsrbS21r9EELox1z/lKKzs15t2aJVn6YjOigiZDR9C+HQGL7XO18QtfTParED1Wy1UUFyzlnSZMNHZAfuVAjKJPMb5Zi/BeiOT+W3nLh9Pp5iuWQ90OKpGn8Y5IiAhvpLkIzg5qFHsESWKHZwCd/W2Jbg7uO/FI1Z9rUaipii/K7eufxGfvsWahUQnE5U6Lv5qxC8Uip+QnjG1v5doIvLhV/3F3PtGx+qKY/pBkAL5jDgps02WmK4yB2FQ3BR/tw2acZznKz6iGCR1nuNfWy2DwlvwkqSUpQtgKVu7r8j9FzqInX3gK1uZRm7DXk9ynAgUp1Gq7cJdRYomi28oV7qE8+4oWhaVAL8BNUXRfSG/31bWr0Pz8kEBu+8RHXRcY98eFSDxiDTKav+ao1dx8TG5Foq0bh481kjVnxNXSr/1/SLQFniIicDrkNmVnKAUdpq5M2/mNt4bHDuL6TmR4CwBZJV9hwr62u3F7dRuDALvNGg0yLPCr8Mrs1eXMsdeWzxVKl3fRRsC0bzzYCVPX4Kh3jAE3FWlQL0N1FvqhTn/d33eBAXEGkRm90qBavFBrXHfrhQkEgQU/YOQgOAu0a36IPZ+jEYagykHLbHSkrO+mpPyUzcipYSiu5VmKHNPjFEmizlT4SONPJn4LPoZH/6wvXG31kaPTWL3a/RiYruPnJScF+JgHiNYJMNEzsALs7re2JJUln/vxA50lJLzhvdLD8cGQsViqcv6eyuR0W5fxxwm5LJ7WPYTU3DrROs349X5uIodW6wgldMekE/8Lnep4VnC0AVnY4OfhCve4M3ktqIFVkdwU5RWdtzV4lI9Dalv9rBIDIy/aa7deXtmSpzXSWsePi82Ws5tEHQNAf735GIQ3AtsHTzx+nYhFRk1UP6Bs6/ty4ZcfUA6HSB/yHww4vCQRTFUOXAEagJASUl5EqyKlefdNPVmCyQezgGGi/1PRQpDf9BLzb1tObPsaCKxVr7E9x4J5vaM5sY83ZNkYCiIKdeo5HSaXTc9OHvDTDLNBa/ptgmW5YsC2TsaFc0YTwTa+3AGG3hye4G6SvJrAy1SPsDx1r1hBL7KS6n8TdJWjfRlsZQ44Gc+5jRW739gBVCHAVAKNIZWMFfCNygZE/FLbMGwBdTyQRHf7J1hEYdTALi5/T1cEl7Iw/kfVWHFpNUDhHahfwI6A5Ak13w741yv7vNF9e1fNsZ8UaWYgCdwasETqMh77eXsT5nEnSvHiw1R1abk0spp6QfV0CxV2SankAySUXyrfFyiXUPrvUWuh0Qd+9KUzNFi961+qkcusHtTcWnaagacaOK4J+EhKC4eBlkogRPGNNnf0XvoFBkbHWZWaEhYGDnI6WH8H4hfoWcwnS/W68y4P1zz/Shx0+ow3+03X9p/qopqdum5txlsN+C/wx7Z6NoWQtPVkASCm1CRIkHvY+3cOuN+oe0L6mYcORkRse3qtBps6JdKVQZcPF9gvarpdfNxc9Vyb6Kv24cu/uDc80urk/C0GSm+APxRl0hekPTrg/EBi3JP04vY4+aZ1wKy0vjyvQWrbCxe31YbJxzff7BLle1hP4r8rzTAm1+5XcUo4LQOba7vCbsrcUSjc+L98sd83NGszE7egajW8Vss836kErPgU0wswbisAddh/jKtEEHqO5Ct7ePgjzmjARDtlIA1dZFbSTkreqeGzUcITltNlejYjkLaOOFSd6UQIYFgEFNJvTJghgHik1GwtGEWIkC+vsh3C8jYkCSQpRPmz58tWMxJwR5dP6/664D9KxF8p2mc7PLO+h4tTrySCfAsIAXfZZ05aOIV2ElPsZ7HDLCPkZ3okf1/zJDRwnP43IwXSlKXPzIgU5zFueTy7BRf66eZ2s2Cq995+5JqqT24F0CZGHJ9zo9NcY77Hhq2eHQc4r+0dhxobo2ohHfiGY3pv7Y84srWE1ZnoolgAfghcL6u8780LmPeKIN/7VNzg2pCCLnshqFNqjKbT9HIBgsqX6dyHeKpvWxQ8UuRNrrEBsHJ6TNkqNg4ZpuPXRk2YP6ajPvhiUAkUi2EFsmCuD2X22tRZa2bk1104wXElynquPA/xIwTfH28WA+MdnqxTkLMMUCui+geobSn+WnzWXLP3/qlY3UoPM9CSixCR9wf/T4JhYEI1UeL0QLiw/aB4ayDW+QBjU7WqphJ1VyWlrHpyaIOGbDpEn7yKMBHiVZ18zRKmbky+Hsb/3menr3s8RJqSPLfnU9HKvJ9f7MfBULYBRc0jpDhmoZVbBJFlfLbjoVBhU2CUlzIZTZn1wow6+ikYPfFe8EKxLPhSlK3nERVJjYT5d8e7by4OQHVyQ4EEq5D/O9PPpfC6RAwtMVTUG/Frv3/irQRrOpht1Aw47d+PsdsPOVS+SAKIKoxVQQPO6gXIS9joEJ+cDHYGcWiSJvZ7j1LhxDgunAMQRwotD0/vBhvvz69Vzl62gEGdRCZD1mNkWiXjwQeHKbCny4aGXz0NKEqEzAZDjDCg3p5ZjyoFStnjN553OVm6oqXxsRRnipDWqFuWFY7rQG8l6VsCYBSHI6bhFrYoB1UHHSSidmmg79M1q6uyQ1k8JtVpxw4eB019tNrLUpzwyNhETIlURvhdGAr8TIgBo1KGAIMnXDIXoY4g/yqWkn/NUAHWeaG1B4hFDV2zKFBxkuR7KbPctXa75snrfYn1IRiDLEYmIC/htn2rgnDLdcfTX0RRgf1Ol8Gg4rNfnGyLQtFNLc7OEOON+QWXQOzYCF0wsQhmR83QjbiZN0mKkPgf7WAfnPcWg9dtlMmuIwDozYeIdFmhgngvmLIJTvFdqMF/oGamhWFv70gOLvZdnDwxre1BQHlofL71Lmp2NvcfZercHCPSqkvXR+tVRjEtU12GuMJnTjP2yW2GlDbAxUf30DaIjjnWEO2QRcwsU/9R2+jnxUqEKK+/ClX67L7qPr6i+K8IH8Lx1A9a7vincuo8BmzOUH1NjidBAsnwMpJBh8clr6bc4WfIU5UbHyI68F70MKGjihG+TBtwSu9uGuSZ26jJLtSM1+HhmYSYdcc1NgHxC7TngDA2hmsoLBbLKorwPwltG+F35dlzhvKW+BIIPaMZvREKyWHbMcXAmGOse5azW/Ig+KSUW/5HE2zsBc27OVAHLHf6O5RiVjkYmJDvzMmHBPAzUQPGKTjXbQ3Xqx/iYEuGqJB6ouEi1AsUra9eSZTzUQY9rJ9ZQeAV7dqOJ714W9/liPRgwx54rAI9ZCNRmp+I4UXeBmAniWNqraK+TzkIB0xEc97c50IjZdeSBelIu9HwN+qMbk7DsuyGdJ0Ogj0x1vQwAEw/Wny/J4Yzz0sQ01r1+5tFZxQlCfnoNLGtWd8r0U7XgtpdxiyiTCKUse0hK/oCyRqH4pbE+5Ww0C/1KbNOUaczeJbSNk9WojxRBfWhOU6NCppYFBMGeQzLR1nM1IXgrhQ+F1tFwHLkxO+X5ufKY+MVyeD8mnKJ46OXOODoUM4/7GORkBndB4mxk8EF+4Xu1U5TNB8I90T/QJ/dQmn+eUPeLJ8Z4OIKciA70zpOEPEps9ESzv1wkd2K9TB5eHCyrbZJtHtygnITbWeii1kVC0V9FjZ2oL7T50B4I2QsQeaVkwqcqeU/nXnqOS5n9z8eFu3GXxfQtXdlmTPAAu+3kBn7c2Pw6VoNZ/iUpbl5Qb1B326hqw40WfegHe41WNchNVAipV3I1UCTeMomydQWQmqi2Z1xHEFDjM/JN3Uyn1xsrSfLUa+PkfAshV3ISG0+5erb0wwd4EBFSa7
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>feeling</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>6月15日</title>
    <url>/2018/06/15/2018-6-15-successive/</url>
    <content><![CDATA[<p>6月了，距离考研初试，也只剩下不到200天了， 从我决定考研到现在也已经过了半年了，偶尔会有心情烦躁，不想看书，不能专心的时候，会想放松，会想打电动，想找人聊天。</p>
<p>但总体还是坚持了下来，也学到了不少东西，高数从一开始的做题就懵逼，到现在有些题目一看到就能知道应该用什么方式去解。英语也开始认真的用墨墨去背，每天坚持签到，也花了50买了4400的单词量，希望自己能用完，不，应该是继续买。😜😜😜</p>
<p>每天中午迷迷糊糊趴桌上的半小时，总觉得自己提笔在背单词，怕是书虫上脑了。</p>
]]></content>
      <categories>
        <category>feeling</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Further Education</title>
    <url>/2018/03/13/2018-3-12-helloGRE/</url>
    <content><![CDATA[<p>寒假过去了，新的学期开始了。</p>
<a id="more"></a>

<p>因为上个学期末不规律的饮食习惯，导致得了胃溃疡，吃药吃了很久。开学第一个星期过的还不错，因为排课少了，所以一个星期有至少5整天没课，所以现在哪怕没课也都是8点到食堂吃早饭，吃完早饭就去自习室安静复习，每天复习数学、做做课后习题，然后剩下点时间背背单词，捡捡语法，做做英语笔记。刚开学就买了很多的英语相关的书：旋元佑的《语法俱乐部》，新东方的《超实用15000分类速记》（因为觉得这种单词分类方式，对记单词和写作文之类的都有帮助，还推荐给了别人，甚至还买来送给了一同考研的老同学），《牛津英语同义词学习词典》（英语的很多词汇翻译出来的中文意思很类似，就是有些用的场景、对象和细节不一样，弄懂了多个单词的区别，也会更容易一起记住这一类词，也是一件很快乐的事，而且考研也会有类似的题目，当然不仅是因为考试需要，更是为了弄懂究竟为什么）。</p>
<img src="1.jpg" width="50%">

<p>甚至还有我妹妹送我的生日礼物，一套三本的《跟着美剧学英语》，从上个学期追到现在的《纸牌屋》，超级好看的美国政治争斗剧，不仅让我了解了美国白宫国会的运作模式，大到总统小到国会议员的选举方式，同样也让我学到了单词和口语的句子。</p>
<p>That’s politics. 这就是政治。为了拥有权力，什么都可以舍弃。</p>
<img src="2.png" width="50%">

<p>每天复习都是什么时候想着复习什么就复习什么，太没有章法了，所有还抽空定了下复习时间，我倒是想把早上时间再定早点，这样可以有个早读，但愿以后能实现吧。 good luck</p>
<img src="3.jpg" width="50%">

<p>因为最近英语复习的很多，然后又经常看美剧啥的，就对学英语有了兴趣，觉得比打代码有意思，当然我原先就觉得打代码挺有意思的，特别是在解决难题、做出成品的时候，特别有成就感。 I mean it.</p>
<p>就想找几本英文原版来看看，特别去网上找了推荐书籍，特把链接放在这里</p>
<ul>
<li><a href="https://www.jianshu.com/p/03c379f8759d" target="_blank" rel="noopener">怎样通过读英文原版小说提高英语水平</a></li>
<li><a href="https://www.zhihu.com/question/19929256" target="_blank" rel="noopener">有哪些原版英文书籍值得推荐？</a></li>
</ul>
<p>最后选了一本 《FLIPPED》（《怦然心动》）,打算好好把这本书啃下来。</p>
<img src="4.jpg" width="50%">

<p>最后把之前寒假没看完的《未来简史》看看玩。</p>
<img src="5.jpg" width="50%">

<p>I will move on</p>
]]></content>
      <categories>
        <category>feeling</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>Further Education Feeling</title>
    <url>/2017/11/22/2017-11-23-further-education/</url>
    <content><![CDATA[<blockquote>
<p>离明年考研还有1年一个月，但我总是静不下心来看看书。</p>
</blockquote>
<a id="more"></a>

<p>在寝室里，室友还总是在打游戏，我很难静下心来看看书，打打代码，记记博客还是没什么问题的，说实话我还是很容易受到干扰的，难以静下心来从书上学点新的知识。</p>
<p>而且就算开始了，也还是会有放弃的念头不经意跑出来，想着干嘛要考研呢，看那些枯燥的书本，还不如快快乐乐学点技术，然后马上就出去找实习单位了。</p>
<p>虽然我也不知道到底哪个对我来说更适合，就像当年高考填志愿，我也不知道我的兴趣是什么，更不知道哪个专业适合我，但我还是一股脑全部填了计算机的专业，而且不接受调剂。</p>
<p><img src="1.jpeg" alt="沉迷学习，日渐消瘦"></p>
<p>既然做出了决定，就好好努力吧，</p>
<p>上次有个讲座，上面的老师问道何为努力：或许就是逼自己做自己不愿意做的事。</p>
<blockquote>
<p>之前java老师也说过，如果你一直写让你很舒服的代码，你是不会进步，只有写那些让你很难过的代码才能让你有进步。</p>
</blockquote>
<hr>
<p>我知道考研很难，很辛苦，在此也祝愿那些考研的同学都能心想事成！！！</p>
<p>也祝愿自己能够坚持下来，不忘初心</p>
<p><img src="2.png" alt="什么叫周末，不都是换个地方学习"></p>
]]></content>
      <categories>
        <category>feeling</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-SQLAlchemy 操作</title>
    <url>/2017/11/22/2017-11-22-Flask-SQLAlchemy/</url>
    <content><![CDATA[<blockquote>
<p>SQLAlchemy是Python最广泛使用的一个ORM(对象关系映射，简单地说就是把数据库的表即各种操作映射到Python对象上面来)工具。它支持操作PostgreSQL、MySQL、Oracle、Microsoft SQL Server、SQLite等支持SQL的数据库。 👉👉👉 <a href="http://docs.sqlalchemy.org/en/latest/contents.html" target="_blank" rel="noopener">文档地址</a></p>
</blockquote>
<a id="more"></a>

<h1 id="Model-数据表定义"><a href="#Model-数据表定义" class="headerlink" title="Model/数据表定义"></a>Model/数据表定义</h1><h2 id="表定义"><a href="#表定义" class="headerlink" title="表定义"></a>表定义</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 订单类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Indent</span><span class="params">(db.Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表名</span></span><br><span class="line">    __tablename__ = <span class="string">'x_indent'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 列对象</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>)</span><br><span class="line">    number = db.Column(db.String(<span class="number">255</span>))</span><br><span class="line">    user_id = db.Column(db.Integer)</span><br><span class="line">    address = db.Column(db.String(<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,number=None,user_id=None,address=None)</span>:</span></span><br><span class="line">        self.number = number</span><br><span class="line">        self.user_id = user_id</span><br><span class="line">        self.address = address</span><br></pre></td></tr></table></figure>

<h2 id="列定义"><a href="#列定义" class="headerlink" title="列定义"></a>列定义</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列类型</span></span><br><span class="line"><span class="comment">## 数字</span></span><br><span class="line">BigInteger	<span class="comment"># 长整型</span></span><br><span class="line">Boolean		<span class="comment"># 布尔值</span></span><br><span class="line">Enum		<span class="comment"># 枚举值，例如class MyEnum(enum.Enum): one=1 two =2. 定义时候Enum(MyEnum)</span></span><br><span class="line">Float</span><br><span class="line">SmallInteger</span><br><span class="line">Integer(unsigned=<span class="keyword">False</span>)		<span class="comment"># 整型</span></span><br><span class="line">Interval</span><br><span class="line">Numeric</span><br><span class="line"></span><br><span class="line"><span class="comment">## 字符</span></span><br><span class="line">JSON</span><br><span class="line">LargeBinary(length=<span class="keyword">None</span>)	<span class="comment"># 二进制</span></span><br><span class="line">PickleType	<span class="comment"># pickle类型</span></span><br><span class="line">SchemaType</span><br><span class="line">String(<span class="number">50</span>)	<span class="comment"># 字符串类型，括号里表示长度</span></span><br><span class="line">Text(length=<span class="keyword">None</span>)</span><br><span class="line">Unicode</span><br><span class="line">UnicodeText</span><br><span class="line"></span><br><span class="line"><span class="comment">## 时间</span></span><br><span class="line">Date</span><br><span class="line">DateTime	<span class="comment"># daatetime.datetime()对象</span></span><br><span class="line">Time		<span class="comment"># datetime.time()对象</span></span><br><span class="line">TIMESTAMP	<span class="comment"># 时间戳</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联列属性</span></span><br><span class="line">fullname = column_property(firstname + <span class="string">' '</span> + lastname)	<span class="comment"># 表示这一列的值由指定的列值确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列属性</span></span><br><span class="line">primary_key=<span class="keyword">True</span>	<span class="comment"># 是否是主键</span></span><br></pre></td></tr></table></figure>

<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询表</span></span><br><span class="line">query = session.query(User)</span><br><span class="line">query		<span class="comment"># 打印sql语句</span></span><br><span class="line">query.count()</span><br><span class="line">query.statement	<span class="comment"># 同上</span></span><br><span class="line">query.all()		<span class="comment"># 获取所有数据</span></span><br><span class="line">session.query(Indent.id).distinct().all()</span><br><span class="line">query.limit(<span class="number">2</span>).all()</span><br><span class="line">query.offset(<span class="number">2</span>).all()</span><br><span class="line">query.first()</span><br><span class="line">query.get(<span class="number">2</span>)	<span class="comment"># 根据主键获取</span></span><br><span class="line">query.filter(Indent.id==<span class="number">2</span>, address==<span class="string">'杭州'</span>).first().name</span><br><span class="line">query.filter(<span class="string">'id = 2'</span>).first()	<span class="comment"># 复杂的filter</span></span><br><span class="line">query.order_by(<span class="string">'number'</span>).all()		<span class="comment"># 排序</span></span><br><span class="line">query(func.count(<span class="string">'*'</span>)).all()</span><br><span class="line"><span class="comment"># 查询列</span></span><br><span class="line">session.query(Indent.address)	<span class="comment"># 去除指定列</span></span><br><span class="line">session.query(Indent.id, Indent.number)</span><br><span class="line"><span class="comment"># 拼接</span></span><br><span class="line">query2 = query.filter(Indent.id &gt; <span class="number">10</span>)	<span class="comment"># 拼接相当于AND</span></span><br><span class="line">query2.filter(or_(Indent.id == <span class="number">1</span>))	<span class="comment"># or操作</span></span><br></pre></td></tr></table></figure>

<h2 id="连表查询"><a href="#连表查询" class="headerlink" title="连表查询"></a>连表查询</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data = db.session.query(IndentProduct.product_id,Indent.address).\</span><br><span class="line">            join(Indent, Indent.id == IndentProduct.indent_id).\</span><br><span class="line">            filter(IndentProduct.indent_id==indentId).\</span><br><span class="line">            all()</span><br><span class="line">print(jsonify(data))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在连表查询的时候如果不做处理，最后返回的不是带键值对的 <code>dict</code>。</p>
</blockquote>
<img src="1.png" width="50%">

<p>列表中的项并不是标准的 Python tuple，<code>&lt;class &#39;sqlalchemy.util._collections.result&#39;&gt;</code>，它是一个 <a href="https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/util/_collections.py#L22" target="_blank" rel="noopener">AbstractKeyedTuple</a> 对象，拥有一个 keys() 方法，这样可以很容易将其转换成 dict ：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list = [dict(zip(result.keys(), result)) <span class="keyword">for</span> result <span class="keyword">in</span> data]</span><br><span class="line">print(jsonify(list))</span><br></pre></td></tr></table></figure>

<img src="2.png" width="50%">

<h2 id="筛选字段"><a href="#筛选字段" class="headerlink" title="筛选字段"></a>筛选字段</h2><blockquote>
<p>除了一开始在 <code>query()</code> 指定需要的字段，还可以使用 <code>SQLAlchemy</code> 提供的  <a href="http://docs.sqlalchemy.org/en/latest/orm/query.html#sqlalchemy.orm.query.Query.with_entities" target="_blank" rel="noopener">with_eitities()</a> 方法</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data = db.session.query(IndentProduct).\</span><br><span class="line">            join(Indent, Indent.id == IndentProduct.indent_id).\</span><br><span class="line">            filter(IndentProduct.indent_id==indentId).\</span><br><span class="line">            with_entities(IndentProduct.product_id,Indent.address).\</span><br><span class="line">            all()</span><br><span class="line">print(jsonify(list))</span><br></pre></td></tr></table></figure>

<p>==注意filter()里面的表示两个相等的是 ==，不是 ===</p>
<h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">    db.session.add(indent)</span><br><span class="line">    db.session.commit()</span><br></pre></td></tr></table></figure>

<h1 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(id)</span>:</span></span><br><span class="line">    db.session.query.filter(Indent.id==id).first()</span><br><span class="line">    db.session.delete(indent)</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteById</span><span class="params">(id)</span>:</span></span><br><span class="line">    db.session.query(Indent).filter(Indent.id == id).delete()</span><br><span class="line">    db.session.commit()</span><br></pre></td></tr></table></figure>

<h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self,IndentId,address)</span>:</span></span><br><span class="line">    db.session.query(Indent).\</span><br><span class="line">        filter(Indent.id==IndentId).\</span><br><span class="line">        update(&#123;Indent.address: address&#125;)</span><br><span class="line">        </span><br><span class="line">    session.flush()	<span class="comment"># 写数据库，不提交</span></span><br></pre></td></tr></table></figure>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">session.rollback()	<span class="comment"># 回滚：把未提交的数据都回滚</span></span><br><span class="line">session.commit()	<span class="comment"># 提交</span></span><br></pre></td></tr></table></figure>

<h1 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h1><ul>
<li><a href="https://haofly.net/sqlalchemy/" target="_blank" rel="noopener">SQLAlchemy手册 | 豪翔天下</a></li>
<li><a href="https://blog.zengrong.net/post/2656.html" target="_blank" rel="noopener">在 Flask-SQLAlchemy 中联表查询</a></li>
</ul>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>flask对象列表序列化</title>
    <url>/2017/11/22/2017-11-22-flask-json-serialize/</url>
    <content><![CDATA[<p>之前不管是java还是php，从数据库取出数据库对象之后，转换成json字符串总是很方便的。</p>
<p>但是在python的 flask框架却是没这么简单</p>
<a id="more"></a>

<h2 id="flask对象列表序列化"><a href="#flask对象列表序列化" class="headerlink" title="flask对象列表序列化"></a>flask对象列表序列化</h2><p>就拿根据用户id取出订单为例：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># database.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Indent</span><span class="params">(db.Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表名</span></span><br><span class="line">    __tablename__ = <span class="string">'x_indent'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 列对象</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>)</span><br><span class="line">    number = db.Column(db.String(<span class="number">255</span>))</span><br><span class="line">    user_id = db.Column(db.Integer)</span><br><span class="line">    price = db.Column(db.String(<span class="number">255</span>))</span><br><span class="line">    address = db.Column(db.String(<span class="number">255</span>))</span><br><span class="line">    add_time = db.Column(db.Integer)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number=None,user_id=None,price=None,address=None,add_time=None)</span>:</span></span><br><span class="line">        self.number = number</span><br><span class="line">        self.user_id = user_id</span><br><span class="line">        self.price = price</span><br><span class="line">        self.address = address</span><br><span class="line">        self.add_time = add_time</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 插入记录</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        db.session.add(indent)</span><br><span class="line">        db.session.commit()</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app_url.py</span></span><br><span class="line"><span class="comment"># 订单接口</span></span><br><span class="line"><span class="meta">@mod.route('/indent',methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">indent</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 从url里取出参数</span></span><br><span class="line">    userId = request.args.get(<span class="string">'userId'</span>)</span><br><span class="line">    <span class="comment"># 从数据库取出订单数据</span></span><br><span class="line">    indent = Indent.query.filter_by(user_id=userId).all()</span><br><span class="line">    <span class="keyword">return</span> json.dumps(indent)</span><br></pre></td></tr></table></figure>

<ul>
<li>json.dumps()  编码json数据</li>
<li>json.loads()  解码json数据</li>
</ul>
<p>但如果简单这样写的话，是会报错的，</p>
<p><img src="2.png" alt></p>
<p>Flask还有个内置的 <code>jsonify()</code>，</p>
<blockquote>
<p>其中，jsonify的作用是，把dict或list转换为string(类似于json.dumps())。</p>
</blockquote>
<p>在 <code>database.py</code>的 <code>Indent</code>类中加入这个方法</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'number'</span>: self.number,</span><br><span class="line">        <span class="string">'user_id'</span>: self.user_id,</span><br><span class="line">        <span class="string">'price'</span>: self.price,</span><br><span class="line">        <span class="string">'address'</span>: self.address,</span><br><span class="line">        <span class="string">'add_time'</span>: self.add_time,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>然后使用 <strong><em>列表推导</em></strong> 将对象列表转换为可序列化值列表:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app_url.py</span></span><br><span class="line"><span class="meta">@mod.route('/indent',methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">indent</span><span class="params">()</span>:</span></span><br><span class="line">    userId = request.args.get(<span class="string">'userId'</span>)</span><br><span class="line">    indent = Indent.query.filter_by(user_id=userId).all()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> jsonify(</span><br><span class="line">        indent = [i.serialize() <span class="keyword">for</span> i <span class="keyword">in</span> indent])</span><br></pre></td></tr></table></figure>

<p>获得的json字符串</p>
<p><img src="1.png" alt></p>
<h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><blockquote>
<p>列表推导式可以使用非常简洁的方式对列表或其他可迭代对象的元素进行遍历和过滤，快速生成满足特定需求的列表，代码具有非常强的可读性，是Python程序开发时应用最多的技术之一。Python的内部实现对列表推导式做了大量优化，可以保证很快的运行速度，也是推荐使用的一种技术。列表推导式的语法形式为：</p>
</blockquote>
<p>[表达式 for 变量 in 序列或迭代对象 if 条件表达式]</p>
<p>列表推导式在逻辑上等价于一个循环语句，只是形式上更加简洁。例如，</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">aList = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"></span><br><span class="line">aList = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">aList.append(x*x)</span><br></pre></td></tr></table></figure>

<h2 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h2><ul>
<li><a href="http://www.developerq.com/article/1494141355" target="_blank" rel="noopener">Flask jsonify一个对象列表</a></li>
<li><a href="http://qkxue.net/info/115754/Python" target="_blank" rel="noopener">详解Python列表推导式</a></li>
</ul>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel5接入阿里云短信验证码服务</title>
    <url>/2017/11/20/2017-11-20-aliyun-sms/</url>
    <content><![CDATA[<h3 id="阿里云开通短信服务"><a href="#阿里云开通短信服务" class="headerlink" title="阿里云开通短信服务"></a>阿里云开通短信服务</h3><p>要申请两个东西</p>
<ul>
<li>短信签名</li>
<li>短信模板</li>
</ul>
<h4 id="申请短信签名"><a href="#申请短信签名" class="headerlink" title="申请短信签名"></a>申请短信签名</h4><p><img src="1.png" alt></p>
<p>申请完，审核时间一般两个小时以内，挺快的。</p>
<p><img src="2.png" alt></p>
<p>审核状态变为通过，即为审核成功。</p>
<h4 id="申请短信模板"><a href="#申请短信模板" class="headerlink" title="申请短信模板"></a>申请短信模板</h4><p><img src="3.png" alt></p>
<p>里面的 ${code} 在之后调研api的时候是需要传进去的。</p>
<p><img src="4.png" alt></p>
<p>模板里的code也是调用api的时候要使用到的。</p>
<h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><p>调用短信服务的api，还需要两个参数</p>
<ul>
<li>AccessKeyId</li>
<li>AccessKeySecret</li>
</ul>
<p>因此还需要去访问控制里创建一个用户，并分配 <strong>AliyunDysmsFullAccess 管理短信服务(SMS)的权限</strong></p>
<p><img src="5.png" alt></p>
<p>创建好的时候记得保存 <strong>AccessKeySecret</strong>，之后就没机会再查看了。</p>
<h3 id="整合到Laravel框架"><a href="#整合到Laravel框架" class="headerlink" title="整合到Laravel框架"></a>整合到Laravel框架</h3><h4 id="手动整合"><a href="#手动整合" class="headerlink" title="手动整合"></a>手动整合</h4><p>👉👉👉 <a href="https://help.aliyun.com/document_detail/55359.html?spm=5176.doc55491.2.8.evWxXE" target="_blank" rel="noopener">SDK及DEMO下载</a></p>
<blockquote>
<p>之前尝试过用python版本，因为我的后台是flask，但是在flask框架里用的是python3的，官方的sdk不支持python3，改来改去，也还是有各种问题，因此采用了别的建议，这个接口单独用php的Laravel5框架来实现。<br>Laravel整合的时候 也碰到各种各样的问题。</p>
</blockquote>
<p><img src="7.png" alt></p>
<p>把下载的包里面的 <code>api_sdk/lib/Core</code> 和 <code>api_sdk/lib/Api</code>复制一份放到项目 <code>app/libs/Aliyun</code> 下，没有 <code>libs</code> 文件夹就新建。</p>
<img src="6.png" width="50%">

<p>然后打开项目根目录下的 <code>composer.json</code> 文件，找到下面的位置 <code>classmap</code>，加上图示代码</p>
<img src="8.png" width="70%">

<p>然后终端(Terminal)进入项目根目录，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer dumpautoload</span><br></pre></td></tr></table></figure>

<p>执行后若出现如下图所示，则表示更新成功</p>
<p><img src="9.png" alt="composer dumpautoload"></p>
<p>然后就可以直接使用sdk里面导入包的方式了。</p>
<p><img src="10.png" alt></p>
<hr>
<p>真正做的时候也不是这样一帆风顺的，官方的sdk和demo本身也有些问题。</p>
<h5 id="Invalid-argument-supplied-for-foreach"><a href="#Invalid-argument-supplied-for-foreach" class="headerlink" title="Invalid argument supplied for foreach()"></a>Invalid argument supplied for foreach()</h5><p><img src="11.png" alt></p>
<p>直接把Demo复制过来，就会出现这样的问题</p>
<p>查了很多地方，发现是少了一句demo里少了一行代码</p>
<p>在 <code>SmsController.getAcsClient()</code> 里补上(原来是没的)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EndpointConfig::<span class="keyword">load</span>();</span><br></pre></td></tr></table></figure>

<p><img src="12.png" alt></p>
<h5 id="Can-not-find-endpoint-to-access"><a href="#Can-not-find-endpoint-to-access" class="headerlink" title="Can not find endpoint to access."></a>Can not find endpoint to access.</h5><p>天真的以为问题都解决了，结果马上出来另外一个问题。</p>
<p><img src="13.png" alt></p>
<p>找来源发现问题在这里 <code>app/libs/Aliyun/Core/DefaultAcsClient.doActionImpl()</code>，是程序主动抛出的错误。</p>
<p><img src="15.png" alt></p>
<p>回去看看这个 <code>$domain</code> 是什么，结果官方注释说 $domain是产品域名,开发者无需替换。我都没替换，你报个什么错啊。</p>
<p><img src="14.png" alt> </p>
<p>算了，既然不需要，那就直接这里吧 <code>$domain</code> 写死好了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">domain = <span class="string">'dysmsapi.aliyuncs.com'</span>;</span></span><br></pre></td></tr></table></figure>

<p><img src="16.png" alt></p>
<h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>我就把 <strong>smsDemo</strong> 里的几个方法都移到 <code>SmsController</code> 里了，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">DB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Aliyun</span>\<span class="title">Core</span>\<span class="title">Config</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Aliyun</span>\<span class="title">Core</span>\<span class="title">Profile</span>\<span class="title">DefaultProfile</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Aliyun</span>\<span class="title">Core</span>\<span class="title">DefaultAcsClient</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Aliyun</span>\<span class="title">Api</span>\<span class="title">Sms</span>\<span class="title">Request</span>\<span class="title">V20170525</span>\<span class="title">SendSmsRequest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Aliyun</span>\<span class="title">Api</span>\<span class="title">Sms</span>\<span class="title">Request</span>\<span class="title">V20170525</span>\<span class="title">QuerySendDetailsRequest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Aliyun</span>\<span class="title">Core</span>\<span class="title">Regions</span>\<span class="title">EndpointConfig</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmsController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可供调用的发送验证码api</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">        header(<span class="string">'Content-Type: text/plain; charset=utf-8'</span>);</span><br><span class="line">        $phone = $request-&gt;input(<span class="string">'phone'</span>);</span><br><span class="line">        $code = <span class="keyword">$this</span>::randomKeys(); <span class="comment">// 随机生成6位数字验证码</span></span><br><span class="line">        $response = SmsController::sendSms(</span><br><span class="line">            <span class="string">"富春江app"</span>, <span class="comment">// 短信签名</span></span><br><span class="line">            <span class="string">"SMS_111785732"</span>, <span class="comment">// 短信模板编号</span></span><br><span class="line">            $phone, <span class="comment">// 短信接收者</span></span><br><span class="line">            <span class="keyword">Array</span>(  <span class="comment">// 短信模板中字段的值</span></span><br><span class="line">              <span class="string">"code"</span>=&gt;<span class="keyword">$this</span>::randomKeys(),</span><br><span class="line">            ),</span><br><span class="line">            <span class="string">"123456"</span>   <span class="comment">// 流水号,选填</span></span><br><span class="line">        );</span><br><span class="line">        $row = [];</span><br><span class="line">        <span class="keyword">if</span>($response-&gt;Code==<span class="string">'OK'</span>)&#123;</span><br><span class="line">            $row = [<span class="string">'status'</span>=&gt;<span class="number">1</span>,<span class="string">'code'</span>=&gt;$code];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $row = [<span class="string">'status'</span>=&gt;<span class="number">0</span>,<span class="string">'code'</span>=&gt;$response-&gt;Code,<span class="string">'message'</span>=&gt;$response-&gt;Message];</span><br><span class="line">        &#125;        </span><br><span class="line">        $row = [<span class="string">'status'</span>=&gt;<span class="number">1</span>,<span class="string">'code'</span>=&gt;$code];</span><br><span class="line">        <span class="keyword">return</span> json_encode($row);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 随机生成6位数字验证码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">randomKeys</span><span class="params">($length = <span class="number">6</span>)</span></span>&#123;</span><br><span class="line">        $key=<span class="string">''</span>;</span><br><span class="line">        $pattern=<span class="string">'1234567890'</span>;</span><br><span class="line">        <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$length;++$i)&#123;</span><br><span class="line">            $key .= $pattern&#123;mt_rand(<span class="number">0</span>,<span class="number">9</span>)&#125;;    <span class="comment">// 生成php随机数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> $acsClient = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得AcsClient</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DefaultAcsClient</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getAcsClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//产品名称:云通信流量服务API产品,开发者无需替换</span></span><br><span class="line">        $product = <span class="string">"深呼吸app"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//产品域名,开发者无需替换</span></span><br><span class="line">        $domain = <span class="string">"dysmsapi.aliyuncs.com"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 此处需要替换成开发者自己的AK (https://ak-console.aliyun.com/)</span></span><br><span class="line">        $accessKeyId = <span class="string">"LTAIp5j2DxU47O42"</span>; <span class="comment">// AccessKeyId</span></span><br><span class="line"></span><br><span class="line">        $accessKeySecret = <span class="string">"EY9OdjeinAnEOeDyFNZb2OiT3Xg4ep"</span>; <span class="comment">// AccessKeySecret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 暂时不支持多Region</span></span><br><span class="line">        $region = <span class="string">"cn-hangzhou"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 服务结点</span></span><br><span class="line">        $endPointName = <span class="string">"cn-hangzhou"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">static</span>::$acsClient == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//初始化acsClient,暂不支持region化</span></span><br><span class="line">            $profile = DefaultProfile::getProfile($region, $accessKeyId, $accessKeySecret);</span><br><span class="line"></span><br><span class="line">            EndpointConfig::load();</span><br><span class="line">            <span class="comment">// 增加服务结点</span></span><br><span class="line">            DefaultProfile::addEndpoint($endPointName, $region, $product, $domain);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化AcsClient用于发起请求</span></span><br><span class="line">            <span class="keyword">static</span>::$acsClient = <span class="keyword">new</span> DefaultAcsClient($profile);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$acsClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $signName &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 必填, 短信签名，应严格"签名名称"填写，参考：&lt;a href="https://dysms.console.aliyun.com/dysms.htm#/sign"&gt;短信签名页&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $templateCode &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 必填, 短信模板Code，应严格按"模板CODE"填写, 参考：&lt;a href="https://dysms.console.aliyun.com/dysms.htm#/template"&gt;短信模板页&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     * (e.g. SMS_0001)</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $phoneNumbers 必填, 短信接收号码 (e.g. 12345678901)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array|null $templateParam &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 选填, 假如模板中存在变量需要替换则为必填项 (e.g. Array("code"=&gt;"12345", "product"=&gt;"阿里通信"))</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string|null $outId [optional] 选填, 发送短信流水号 (e.g. 1234)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string|null $smsUpExtendCode [optional] 选填，上行短信扩展码（扩展码字段控制在7位或以下，无特殊需求用户请忽略此字段）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> stdClass</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sendSms</span><span class="params">($signName, $templateCode, $phoneNumbers, $templateParam = null, $outId = null, $smsUpExtendCode = null)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化SendSmsRequest实例用于设置发送短信的参数</span></span><br><span class="line">        $request = <span class="keyword">new</span> SendSmsRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必填，设置雉短信接收号码</span></span><br><span class="line">        $request-&gt;setPhoneNumbers($phoneNumbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必填，设置签名名称</span></span><br><span class="line">        $request-&gt;setSignName($signName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必填，设置模板CODE</span></span><br><span class="line">        $request-&gt;setTemplateCode($templateCode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可选，设置模板参数</span></span><br><span class="line">        <span class="keyword">if</span>($templateParam) &#123;</span><br><span class="line">            $request-&gt;setTemplateParam(json_encode($templateParam));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可选，设置流水号</span></span><br><span class="line">        <span class="keyword">if</span>($outId) &#123;</span><br><span class="line">            $request-&gt;setOutId($outId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选填，上行短信扩展码</span></span><br><span class="line">        <span class="keyword">if</span>($smsUpExtendCode) &#123;</span><br><span class="line">            $request-&gt;setSmsUpExtendCode($smsUpExtendCode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发起访问请求</span></span><br><span class="line">        $acsResponse = <span class="keyword">static</span>::getAcsClient()-&gt;getAcsResponse($request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印请求结果</span></span><br><span class="line">        <span class="comment">// var_dump($acsResponse);</span></span><br><span class="line">        <span class="keyword">return</span> $acsResponse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx部署flask</title>
    <url>/2017/11/20/2017-11-20-nginx-flask/</url>
    <content><![CDATA[<blockquote>
<p>以前用的一直都是apache的服务器，加上之前apache部署flask一直失败，就想着用nginx试试，网上也建议用nginx，所有就试试 nginx 来搭建服务器。</p>
</blockquote>
<a id="more"></a>

<p>先把项目传到 <code>/usr/share/nginx</code> 目录下</p>
<h3 id="安装uwsgi"><a href="#安装uwsgi" class="headerlink" title="安装uwsgi"></a>安装uwsgi</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install uwsgin</span><br></pre></td></tr></table></figure>

<p>如果报了 致命错误：Python.h：没有那个文件或目录，就去安装 <code>python-devel</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install python-devel</span><br></pre></td></tr></table></figure>

<p>在项目根目录下创建 <code>uwsgin.ini</code>，里面写入如下配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">socket</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span></span><br><span class="line"><span class="attr">pythonpath</span> = /usr/share/flask1</span><br><span class="line"><span class="attr">socket-timeout</span>=<span class="number">10</span></span><br><span class="line"><span class="attr">module</span> = index</span><br><span class="line"><span class="attr">callable</span> = app</span><br><span class="line"><span class="attr">processes</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">chmod-socket</span> = <span class="number">666</span></span><br><span class="line"><span class="attr">threads</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>socket: 通讯端口，外界可以通过127.0.0.1:8001访问</li>
<li>pythonpath: 项目目录</li>
<li>socket-timeout: </li>
<li>module: 启动文件的文件名，我们可以在本地用python3 index.py启动flask项目。</li>
<li>callable: 程序内启用的application变量名。</li>
<li>processes: 处理器个数。</li>
<li>chmod-socket: 权限</li>
<li>threads: 线程数。</li>
</ul>
<h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><p>打开 nginx 配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/api.conf</span><br></pre></td></tr></table></figure>

<p>加上如下的配置代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name  flask.tangliangdong.me; <span class="comment"># 外部域名</span></span><br><span class="line">    root         /usr/share/nginx/flask; <span class="comment"># 项目根目录</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:8001; <span class="comment"># uwsgin.ini 配置的 socket 值</span></span><br><span class="line">        uwsgi_param UWSGI_PYHOME /usr/share/flask1/index; <span class="comment"># 项目启动文件 index.py</span></span><br><span class="line">        uwsgi_param UWSGI_CHDIR /usr/share/flask1; <span class="comment"># 项目根目录</span></span><br><span class="line">        uwsgi_param UWSGI_SCRIPT run:app; </span><br><span class="line">        <span class="comment"># proxy_pass http://127.0.0.1:80; # 反向代理 Gunicorn 本地的服务地址</span></span><br><span class="line">        <span class="comment"># proxy_set_header Host $host;</span></span><br><span class="line">        <span class="comment"># proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>uwsgi_pass需要和上面的socket保持一致。</p>
</blockquote>
<hr>
<p>重启 nginx </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>进入项目根目录执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uwsgi uwsgi.ini</span><br></pre></td></tr></table></figure>

<p>这样运行起来后，如果访问flask里的请求，会报这个错误 <code>KeyError: &#39;REQUEST_METHOD&#39;</code></p>
<p>👉👉👉 <a href="http://www.h5w3.com/?p=831" target="_blank" rel="noopener">Nginx/wsgi部署Django：避开502KeyError: u’REQUEST_METHOD’错误</a></p>
<p>因为上面 <code>api.conf</code> 里有 <code>uwsgi_params</code>: <code>include uwsgi_params;</code></p>
<p>因此需要在 <code>/etc/nginx/conf.d</code> 下创建 <code>uwsgi_params</code> 文件，里面加上如下的内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uwsgi_param QUERY_STRING        <span class="variable">$query_string</span>;</span><br><span class="line">uwsgi_param REQUEST_METHOD      <span class="variable">$request_method</span>;</span><br><span class="line">uwsgi_param CONTENT_TYPE        <span class="variable">$content_type</span>;</span><br><span class="line">uwsgi_param CONTENT_LENGTH      <span class="variable">$content_length</span>;</span><br><span class="line"></span><br><span class="line">uwsgi_param REQUEST_URI         <span class="variable">$request_uri</span>;</span><br><span class="line">uwsgi_param PATH_INFO           <span class="variable">$document_uri</span>;</span><br><span class="line">uwsgi_param DOCUMENT_ROOT       <span class="variable">$document_root</span>;</span><br><span class="line">uwsgi_param SERVER_PROTOCOL     <span class="variable">$server_protocol</span>;</span><br><span class="line">uwsgi_param UWSGI_SCHEME        <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">uwsgi_param REMOTE_ADDR         <span class="variable">$remote_addr</span>;</span><br><span class="line">uwsgi_param REMOTE_PORT         <span class="variable">$remote_port</span>;</span><br><span class="line">uwsgi_param SERVER_PORT         <span class="variable">$server_port</span>;</span><br><span class="line">uwsgi_param SERVER_NAME         <span class="variable">$server_name</span>;</span><br></pre></td></tr></table></figure>

<p>再执行，就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br><span class="line"></span><br><span class="line">uwsgi uwsgi.ini</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>flask</tag>
        <tag>nginx</tag>
        <tag>centos7</tag>
        <tag>python3</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置</title>
    <url>/2017/11/20/2017-11-20-nginx/</url>
    <content><![CDATA[<h2 id="centos-yum-安装"><a href="#centos-yum-安装" class="headerlink" title="centos yum 安装"></a>centos yum 安装</h2><p>Nginx 的稳定版包含在 CentOS 7 的软件仓库里，所以可以直接用 yum 去安装它:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install nginx -y</span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"><span class="comment"># 自启动nginx</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"><span class="comment"># 关闭自启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> nginx.service</span><br><span class="line"><span class="comment"># 查看 nginx 的状态</span></span><br><span class="line">systemctl status nginx</span><br><span class="line"><span class="comment"># 关闭nginx</span></span><br><span class="line">systemctl stop nginx.service</span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>直接通过网站ip访问，出现图下所示，即为安装成功。</p>
<p><img src="1.png" alt></p>
<hr>
<p>nginx 配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>nginx默认网站根路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/share/nginx</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="nginx压缩包编译安装"><a href="#nginx压缩包编译安装" class="headerlink" title="nginx压缩包编译安装"></a>nginx压缩包编译安装</h2><h3 id="下载解压安装"><a href="#下载解压安装" class="headerlink" title="下载解压安装"></a>下载解压安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载nginx压缩包</span></span><br><span class="line">wget https://nginx.org/download/nginx-1.17.7.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf nginx-1.17.7.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到 nginx-1.17.7</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.17.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># --prefix 指定安装的目录</span></span><br><span class="line"><span class="comment"># /usr/local/nginx 是nginx安装目录，不能和自己下载的文件目录重了</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译安装</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<ul>
<li><p>安装目录：<code>/usr/local/nginx</code></p>
</li>
<li><p>配置文件：<code>/usr/local/nginx/conf/nginx.conf</code></p>
</li>
<li><p>启动命令：<code>./usr/local/nginx/sbin/nginx</code></p>
</li>
</ul>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><table>
<thead>
<tr>
<th align="left">目录</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">conf</td>
<td align="left">用于存储nginx配置文件</td>
</tr>
<tr>
<td align="left">html</td>
<td align="left">用于存放静态网页</td>
</tr>
<tr>
<td align="left">logs</td>
<td align="left">存放日志</td>
</tr>
<tr>
<td align="left">sbin</td>
<td align="left">用于存放 nginx这种工具</td>
</tr>
</tbody></table>
<hr>
<h2 id="nginx-配置多域名访问"><a href="#nginx-配置多域名访问" class="headerlink" title="nginx 配置多域名访问"></a>nginx 配置多域名访问</h2><div class="note danger">
            <p>下方的文件路径可能有所不同，解压缩安装nginx的方式已不再适用。</p>
          </div>

<p>在 <code>/etc/nginx/conf.d/</code> 目录下新建例如 <code>api.conf</code> 文件，打开写入如下的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80; <span class="comment"># 监听的端口</span></span><br><span class="line">    server_name  zzz.tangliangdong.me; <span class="comment"># 外部域名</span></span><br><span class="line">    root  /usr/share/nginx/demo; <span class="comment"># 文件路径</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        <span class="comment"># proxy_pass http://127.0.0.1:80; # 反向代理 Gunicorn 本地的服务地址</span></span><br><span class="line">        <span class="comment"># proxy_set_header Host $host;</span></span><br><span class="line">        <span class="comment"># proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80; <span class="comment"># 监听的端口</span></span><br><span class="line">    server_name  blog.tangliangdong.me; <span class="comment"># 外部域名</span></span><br><span class="line">    root  /usr/share/nginx/blog; <span class="comment"># 文件路径</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再打开 <code>/etc/nginx/nginx.conf</code>，检查是否有如下的代码，如果没有则需要引入，不然上面新增的 <code>api.conf</code> 无法起作用，需要被引入到主配置文件才能生效。</p>
<p><img src="2.png" alt></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://yidao620c.github.io/2017/01/08/web/nginx01.html" target="_blank" rel="noopener">nginx笔记 - 配置和使用</a></li>
</ul>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>flask-cors实现CORS跨域请求</title>
    <url>/2017/11/16/2017-11-16-flask-cors/</url>
    <content><![CDATA[<p>在做ionic登录的时候碰到的跨域请求的问题，因为缺少 <code>Access-Control-Allow-Origin</code>，</p>
<p>可以通过安装 <code>flask-cors</code> 来解决问题</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> flask-cors</span><br></pre></td></tr></table></figure>

<p>在出现 <code>app = Flask(__name__)</code> 这段的地方加上如下代码。即可实现跨域请求</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">from flask_cors import CORS</span><br><span class="line">app = Flask(<span class="name">__name__</span>)</span><br><span class="line">CORS(<span class="name">app</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>flask</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python3的md5加密</title>
    <url>/2017/11/15/2017-11-15-flask-md5/</url>
    <content><![CDATA[<blockquote>
<p>登录注册时，密码存储不能用明文，可以选用md5加密算法。</p>
</blockquote>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genearteMD5</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="comment"># 创建md5对象</span></span><br><span class="line">    m = hashlib.md5()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Tips</span></span><br><span class="line">    <span class="comment"># 此处必须声明encode</span></span><br><span class="line">    <span class="comment"># 否则报错为：hl.update(str)    </span></span><br><span class="line">    <span class="comment"># Unicode-objects must be encoded before hashing</span></span><br><span class="line">    m.update(str.encode(encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'MD5加密前为 ：'</span> + str)</span><br><span class="line">    print(<span class="string">'MD5加密后为 ：'</span> + m.hexdigest())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Fight for Advanced Study</title>
    <url>/2017/11/12/2017-11-12-advanced-study/</url>
    <content><![CDATA[<h3 id="考研"><a href="#考研" class="headerlink" title="考研"></a>考研</h3><blockquote>
<p>今天我准备以后好好准备考研了，曾经的我，未曾考虑过要考研，因为英语一直都是我的软肋，曾经四级都过不了的我，现在信誓旦旦要参加难度甚至超过6级的考研英语时，是不是有点痴人说梦的意味呢。</p>
</blockquote>
<a id="more"></a>

<p>但在我去年的突击努力下，花了半个月的时候过了四级，虽然我因此没时间准备期末考试，和二等奖学金失之交臂，但我也不后悔，至少这证明了，就算只靠我一个人，哪怕是从小困扰我的英语也不在话下。作为未来的软件工程师，英语好是必须的，所以，哪怕我最后不能考上，但是英语的提高是必须的、也是必要的。</p>
<p><img src="1.jpg" alt="学习"></p>
<p>去杭州电子科技大学研招网看了招硕士研究生的信息，初试考四门科目，都是我不擅长的科目，好吧，正好我也可以复习下那些地方。</p>
<p><img src="2.jpg" alt></p>
<p>查了知乎，关于计算机考研的可以准备什么，有一条写到，复试的口试环节，要和考官交流，一方面是测试你英语口语的水平，另一方面是交谈你的一些信息，如果说之前有做过什么项目或者是参加了什么竞赛拿奖了，都可以说出来，会是加分项，我竞赛参加了很多次，虽然没拿什么奖，但至少还有项目可以拿出来，再怎么不济，也是做过四个商业项目的人了。至少在这点上还是让我比较有信心的，但起码我得先过了初试才有机会。</p>
<p><img src="3.jpg" alt></p>
<p>在计算机这个最不看重的学历的专业，我不知道到底是本科毕业直接参加实习好呢，还是读硕士继续深造更好，不过既然现在已经做出了选择，那就不要瞎想了，做好现在，迎接未来，我会在未来等你。</p>
<p><img src="4.jpg" alt></p>
<blockquote>
<p>God helps those who help themselves.</p>
</blockquote>
]]></content>
      <categories>
        <category>feeling</category>
      </categories>
  </entry>
  <entry>
    <title>安装python3版本的flask</title>
    <url>/2017/11/11/2017-11-11-flask-python3/</url>
    <content><![CDATA[<p>Mac 默认安装的是 python2.7的版本，我额外安装了python，通过 <code>python3</code> 命令执行python3的。</p>
<a id="more"></a>

<p>我安装的 python3 默认安装的是 <code>easy_install-3.6</code></p>
<p>通过 <code>easy_install</code> 安装 pip</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">easy_install-3</span><span class="selector-class">.6</span> <span class="selector-tag">pip</span></span><br></pre></td></tr></table></figure>

<p>我安装好后支持 <code>python3</code> 的是 <code>pip3</code></p>
<p>安装 flask</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtualenv flask1</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> flask1</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> bin/activate</span><br><span class="line"></span><br><span class="line">pip3 install flask</span><br></pre></td></tr></table></figure>

<p>在根目录创建一个最简单的应用 <code>index.py</code>，里面输入如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>终端执行命令</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> <span class="built_in">index</span>.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>flask</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>ionic scroll水平滚动</title>
    <url>/2017/11/11/2017-11-11-ionic-scroll/</url>
    <content><![CDATA[<p>官方的写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-scroll</span> <span class="attr">scrollX</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-scroll</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-scroll</span> <span class="attr">scrollY</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-scroll</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-scroll</span> <span class="attr">scrollX</span>=<span class="string">"true"</span> <span class="attr">scrollY</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-scroll</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>如果要使用横向滚动，必须在 <code>&lt;ion-scroll&gt;</code>标签上添加如下属性方可有效</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">ion-scroll &#123;white-space：nowrap;&#125;</span><br></pre></td></tr></table></figure>

<p>不需要给 <code>ion-scroll</code> 添加 <code>width</code> 属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-scroll</span> <span class="attr">scrollX</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/imgs/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-scroll</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ion-scroll</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line"></span><br><span class="line">    img&#123;</span><br><span class="line">        <span class="selector-tag">height</span>: 300<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">width</span>: 300<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel5.5 使用注意点</title>
    <url>/2017/10/22/2017-10-22-laravel5-use/</url>
    <content><![CDATA[<h1 id="laravel-5-5"><a href="#laravel-5-5" class="headerlink" title="laravel 5.5"></a>laravel 5.5</h1><h2 id="1-blade模板使用-section"><a href="#1-blade模板使用-section" class="headerlink" title="1. blade模板使用 @section"></a>1. blade模板使用 @section</h2><p>laravel自带有blade模板引擎，需在后缀前面加上 <code>.blade</code></p>
<p>先创建一个布局视图 <code>app.blade.php</code>,</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- 文件保存于 resources/views/layouts/app.blade.php --&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;应用程序名称 - @<span class="keyword">yield</span>(<span class="string">'title'</span>)&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        @section(<span class="string">'header'</span>)</span><br><span class="line">            &lt;div class="footer"&gt;这是头部&lt;/div&gt;</span><br><span class="line">        @show</span><br><span class="line"></span><br><span class="line">        &lt;div class="container"&gt;</span><br><span class="line">            &lt;!--  @<span class="keyword">yield</span>功能 类似占位符 --&gt;</span><br><span class="line">            @<span class="keyword">yield</span>(<span class="string">'content'</span>)</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        @section(<span class="string">'footer'</span>)</span><br><span class="line">            &lt;div class="footer"&gt;这是尾部&lt;/div&gt;</span><br><span class="line">        @show</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>再新建一个模板 继承该布局</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- 文件保存于 resources/views/layouts/index.blade.php --&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        @section(<span class="string">'title'</span>)</span><br><span class="line">            你好 laravel5</span><br><span class="line">        @endsection</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;!-- 为子视图指定应该 「继承」 的布局 --&gt;</span><br><span class="line">        @extends(<span class="string">'layouts.app'</span>)</span><br><span class="line"></span><br><span class="line">        &lt;!-- 继承 Blade 布局的视图可使用 @section 命令将内容注入于布局的 @section 中 --&gt;</span><br><span class="line">        @section(<span class="string">'header'</span>)</span><br><span class="line"></span><br><span class="line">        &lt;!-- 主」布局中使用 @<span class="keyword">yield</span> 的地方会显示这些子视图中的 @section 间的内容 --&gt;</span><br><span class="line">        @section(<span class="string">'content'</span>)</span><br><span class="line">            Hello world</span><br><span class="line">        @endsection</span><br><span class="line"></span><br><span class="line">        @section(<span class="string">'footer'</span>)</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里有个注意点，比如header 只是想用模板的，不需要在进行定制，就直接写一个 <code>@section(&#39;header&#39;)</code>这个就行了，不需要额外加别 <em>@</em> 的进行闭合。如果需要在里面进行个性化定制，则需要加上 <code>@endsection</code> 进行闭合</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@section(<span class="string">'header'</span>)</span><br><span class="line">    &lt;p&gt;这是头部&lt;/p&gt;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样写会把之前的全部替换掉，如果是想在原来的基础上添加内容，则加上 <code>@parent</code></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@section(<span class="string">'header'</span>)</span><br><span class="line">    @<span class="keyword">parent</span></span><br><span class="line">    &lt;p&gt;这是头部&lt;/p&gt;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure>

<h2 id="2-配置-BrowserSync"><a href="#2-配置-BrowserSync" class="headerlink" title="2. 配置 BrowserSync"></a>2. 配置 BrowserSync</h2><blockquote>
<p>Browsersync能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试。</p>
</blockquote>
<p>因此为了更快更方便的开发网页，我们可以用上 BrowserSync，laravel框架也有集成这个工具。</p>
<h3 id="1-先进入laravel项目根目录-安装-browser-sync"><a href="#1-先进入laravel项目根目录-安装-browser-sync" class="headerlink" title="1. 先进入laravel项目根目录 安装 browser-sync"></a>1. 先进入laravel项目根目录 安装 browser-sync</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">npm install --save-dev browser-<span class="keyword">sync</span> browser-<span class="keyword">sync</span>-webpack-plugin</span><br></pre></td></tr></table></figure>

<h3 id="2-配置-webpack-mix-js"><a href="#2-配置-webpack-mix-js" class="headerlink" title="2. 配置 webpack.mix.js"></a>2. 配置 webpack.mix.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> BrowserSyncPlugin = <span class="built_in">require</span>(<span class="string">'browser-sync-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line">mix.webpackConfig(&#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> BrowserSyncPlugin(&#123;</span><br><span class="line">            files: [</span><br><span class="line">                <span class="string">'resources/views/**/*.php'</span>,</span><br><span class="line">            ]</span><br><span class="line">        &#125;, &#123; <span class="attr">reload</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> watch</span></span><br></pre></td></tr></table></figure>

<h3 id="4-修改-blade"><a href="#4-修改-blade" class="headerlink" title="4. 修改 blade"></a>4. 修改 blade</h3><p><img src="laravel-use.png" alt="添加代码"></p>
<p>Terminal有提示在 页面中添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script id=&quot;__bs_script__&quot;&gt;//&lt;![CDATA[</span><br><span class="line">    document.write(&quot;&lt;script async src=&apos;http://HOST:3000/browser-sync/browser-sync-client.js?v=2.18.13&apos;&gt;&lt;\/script&gt;&quot;.replace(&quot;HOST&quot;, location.hostname));</span><br><span class="line">//]]&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-解决-跨站请求伪造-CSRF"><a href="#3-解决-跨站请求伪造-CSRF" class="headerlink" title="3. 解决 跨站请求伪造 (CSRF)"></a>3. 解决 跨站请求伪造 (CSRF)</h2><p>在获取菜单列表的时候，ajax提交post请求，突然返回个419的错误，之前从没有碰到过，查了下，原来是laravel的 CSRF的原因。</p>
<blockquote>
<p>CSRF（Cross-site request forgery跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，并且攻击方式几乎相左。XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。</p>
<p>Laravel 会自动为每个活跃用户的会话生成一个 CSRF「令牌」。该令牌用于验证经过身份验证的用户是否是向应用程序发出请求的用户。</p>
</blockquote>
<p>任何情况下当你在应用程序中定义 HTML 表单时，都应该在表单中包含一个隐藏的 CSRF 令牌字段，以便 CSRF 保护中间件可以验证该请求。可以使用辅助函数 csrf_field 来生成令牌字段：</p>
<h3 id="1-准备提交的表单"><a href="#1-准备提交的表单" class="headerlink" title="1. 准备提交的表单"></a>1. 准备提交的表单</h3><p>使用 <code>csrf_field()</code> 来生成令牌字段，提交的时候一并提交上去。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form method=<span class="string">"POST"</span> action=<span class="string">"/profile"</span>&gt;</span><br><span class="line">    &#123;&#123; csrf_field() &#125;&#125;</span><br><span class="line">    ...</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>他会生成如下的标签</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"hidden"</span> <span class="attribute">name</span>=<span class="string">"_token"</span> <span class="attribute">value</span>=<span class="string">"r1rvi8vZSHorERVAERKdm9DcyrWV8U1G9TIR3HH4"</span>&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p>如果是ajax提交的，有一种做法，在页面上某个角落加入 <code>{{ csrf_field() }}</code>，然后获取input里的value值，再传上去。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> token = $(<span class="string">'input[name=_token]'</span>).val();</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"&#123;&#123;url('menu/getDishes')&#125;&#125;"</span>,</span><br><span class="line">    type: <span class="string">'POST'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      _token: token,</span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-把url加入CSRF的白名单"><a href="#2-把url加入CSRF的白名单" class="headerlink" title="2. 把url加入CSRF的白名单"></a>2. 把url加入CSRF的白名单</h3><p>你可以把这类路由放到 <code>routes/web.php</code> 外</p>
<p>或者 你也可以通过将这类 URI 添加到 <code>VerifyCsrfToken</code> 中间件中的 <code>$except</code> 属性来排除对这类路由的 <code>CSRF</code> 保护</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Http/Controller/Middleware/VerifyCsrfToken.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">VerifyCsrfToken</span> <span class="title">as</span> <span class="title">Middleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerifyCsrfToken</span> <span class="keyword">extends</span> <span class="title">Middleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The URIs that should be excluded from CSRF verification.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $except = [</span><br><span class="line">        <span class="string">'menu/*'</span>,</span><br><span class="line">        <span class="string">'menu'</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>url路由写法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes/web.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只接受 post 请求</span></span><br><span class="line">Route::post(<span class="string">'/menu/getDishes'</span>, <span class="string">'MenuController@menu_dishes'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="blade添加静态资源和url"><a href="#blade添加静态资源和url" class="headerlink" title="blade添加静态资源和url"></a>blade添加静态资源和url</h2><h3 id="引入静态资源-asset"><a href="#引入静态资源-asset" class="headerlink" title="引入静态资源 asset()"></a>引入静态资源 <code>asset()</code></h3><p>静态资源就放在 <code>public/</code> 下</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;asset('js/jquery.min.js')&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><img src="laravel-use2.png" alt="public/js/jquery.min.js"></p>
<h3 id="请求的url地址-url"><a href="#请求的url地址-url" class="headerlink" title="请求的url地址 url()"></a>请求的url地址 <code>url()</code></h3><p>在 <code>{{}}</code> 里使用 <code>url()</code>方法写上 <code>routes</code> 里写的路由就行了，</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel5服务器配置</title>
    <url>/2017/10/19/2017-10-19-laravel5/</url>
    <content><![CDATA[<p>Laravel 服务器配置问题：</p>
<a id="more"></a>

<h3 id="1-配置Apache访问laravel目录"><a href="#1-配置Apache访问laravel目录" class="headerlink" title="1. 配置Apache访问laravel目录"></a>1. 配置Apache访问laravel目录</h3><p>打开apache的配置文件 <code>vim /etc/httpd/conf/httpd.conf</code> ，添加如下配置</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;Directory "/var/www/dcxt"&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">Options</span></span> Indexes FollowSymLinks</span><br><span class="line">    <span class="attribute">AllowOverride</span> <span class="literal">All</span></span><br><span class="line">    <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>/var/www/dcxt</code> 这是laravel 根路径</p>
</li>
<li><p><code>AllowOverride All</code> 开放使用 <code>.htaccess</code></p>
<p>因为laravel5 的访问路径都是 <code>https://zzz.tangliangdong.me/dcxt/public/</code>，会有带个public，因此我们进入 laravel根目录下的 <code>public</code>文件夹，新建 <code>.htaccess</code>文件，添加如下内容：</p>
</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;IfModule mod_rewrite.c&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">Options</span></span> -MultiViews</span><br><span class="line">    <span class="attribute"><span class="nomarkup">RewriteEngine</span></span> <span class="literal">On</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">RewriteCond</span></span> <span class="variable">%&#123;REQUEST_FILENAME&#125;</span> !-d</span><br><span class="line">    <span class="attribute"><span class="nomarkup">RewriteCond</span></span> <span class="variable">%&#123;REQUEST_FILENAME&#125;</span> !-f</span><br><span class="line">    <span class="attribute"><span class="nomarkup">RewriteRule</span></span> ^ index.php<span class="meta"> [L]</span></span><br><span class="line"><span class="section">&lt;/IfModule&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当然要确保 <code>.htaccess</code> 有效，还得确定Apahce开启了 <code>mod_rewrite</code>模块。</p>
</blockquote>
<hr>
<h3 id="2-laravel5访问权限问题"><a href="#2-laravel5访问权限问题" class="headerlink" title="2. laravel5访问权限问题"></a>2. laravel5访问权限问题</h3><p><img src="laravel5.png" alt="laravel访问权限问题"></p>
<p>刚从本地部署到服务器时，总会碰到点权限的问题，虽然本地也是由Mac开发完成的。</p>
<p>查了下资料，整个laravel文件夹权限都保持 755 没问题，唯独有个文件夹比较特殊，需要把他以及其子文件的权限升到 777，</p>
<ul>
<li><code>chmod -R 777 app/storage</code> # for laravel &lt; 5.4</li>
<li><code>chmod -R 777 storage/</code> # for laravel &gt;= 5.4</li>
</ul>
<blockquote>
<p>storage文件夹里包含有日志文件。</p>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>apache http转换成https</title>
    <url>/2017/10/12/2017-10-12-http-to-https/</url>
    <content><![CDATA[<h1 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h1><p>有个注意点：</p>
<blockquote>
<p>这是因为SSL握手协议过程中,是通过IP+Port来进行通信，一个IP的一个端口只能返给客户一张SSL证书（即使有多张证书，也只能返回第一张，因为无法分辨用户会需要返回哪张证书）</p>
</blockquote>
<p>除非申请的是多域名证书或者通配符证书才行。</p>
<p>然额 图省钱只能用阿里云免费的单域名证书。</p>
<a id="more"></a>

<h2 id="申请SSL证书-1"><a href="#申请SSL证书-1" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h2><p><img src="https.png" alt="阿里云证书管理平台"></p>
<p>在 管理控制台-&gt;安全（云盾）-&gt;CA证书服务（数据安全） 右上角的购买按钮</p>
<p><img src="https2.png" alt="阿里云证书选购"></p>
<p>选择 免费型DV SSL，然后支付下就行了，反正又不要钱，随便付。😏😏😏</p>
<p><img src="https3.png" alt="补全SSL证书"></p>
<p>购买成功后 回到证书管理平台，补全购买的证书</p>
<p><img src="https4.png" alt="补全SSL证书"></p>
<p>需要填写加上二级域名的，而且这个域名需要在域名解析里有解析过。如下：</p>
<p><img src="https6.png" alt="域名解析"></p>
<p><img src="https5.png" alt="补全SSL证书"></p>
<p>这里其他都填上自己的信息，就三个圈出来的地方按照这样来写。</p>
<p>没什么问题 直接下一步，就可以提交审核了。大概等个几十分钟到几个小时不等吧，也挺快的，会有邮件提示。</p>
<h2 id="下载SSL证书"><a href="#下载SSL证书" class="headerlink" title="下载SSL证书"></a>下载SSL证书</h2><p>在证书控制台 证书状态显示已签发 说明就可以使用该SSL证书了。然后我们去下载该证书。</p>
<p><img src="https7.png" alt="下载证书"></p>
<p>可以选择不同类型的服务器。</p>
<p>下载下来的压缩包里有四个文件：</p>
<ul>
<li>214274821730744.key</li>
<li>214274821730744.pem</li>
<li>chain.pem</li>
<li>public.pem</li>
</ul>
<p>然后我们就可以去配置我们的apache服务器了。</p>
<h1 id="配置apache服务器"><a href="#配置apache服务器" class="headerlink" title="配置apache服务器"></a>配置apache服务器</h1><p><strong>重要的事情说三遍</strong></p>
<blockquote>
<p>这里讲的是yum下载安装的apache如何配置ssl证书的方法！！！<br>这里讲的是yum下载安装的apache如何配置ssl证书的方法！！！<br>这里讲的是yum下载安装的apache如何配置ssl证书的方法！！！</p>
</blockquote>
<p>之前网上搜了很多资料，大多讲的是apache是通过编译安装的，刚才阿里云上的教程也是针对的是编译安装的apache，形如这样的：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># wget http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.23.tar.bz2</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># tar xf httpd-2.4.23.tar.bz2</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># cd httpd-2.4.23</span></span><br><span class="line">[root<span class="symbol">@localhost</span> httpd<span class="number">-2.4</span><span class="number">.23</span>]<span class="meta"># ./configure --prefix=/usr/local/apache2 --sysconfdir=/usr/local/conf/apache2.conf</span></span><br></pre></td></tr></table></figure>

<p>但我当初安装apache是通过</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> httpd</span><br></pre></td></tr></table></figure>

<p>结构和编译安装的不一样。</p>
<p>第一步安装 <code>mod_ssl</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> mod_ssl</span><br></pre></td></tr></table></figure>

<p>安装完后 <code>/etc/httpd/conf.d/</code> 下会有一个ssl.conf的文件,</p>
<ul>
<li>我的apache安装路径在 <code>/etc/httpd</code></li>
<li>apache配置文件在 <code>/etc/httpd/conf/httpd.conf</code></li>
<li>ssl配置文件在 <code>/etc/httpd/conf.d/ssl.conf</code>，相当于编译安装的 <code>.../apache/conf/extra/httpd-ssl.conf</code></li>
</ul>
<p>我们先把之前下载的证书上传到服务器apache根目录下 <code>/etc/httpd/cert/</code> （新建cert文件夹）</p>
<h2 id="配置-ssl-conf"><a href="#配置-ssl-conf" class="headerlink" title="配置 ssl.conf"></a>配置 ssl.conf</h2><p><code>/etc/httpd/conf.d/ssl.conf</code></p>
<p>在文件中找到下面的信息，并修改成你刚才上传上来的文件路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DocumentRoot "/var/www"  #网站根路径</span><br><span class="line">ServerName zzz.tangliangdong.me  #域名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果被注释，就解除注释</span></span><br><span class="line">SSLCertificateFile /etc/httpd/cert/214274821730744.pem</span><br><span class="line">SSLCertificateKeyFile /etc/httpd/cert/214274821730744.key</span><br></pre></td></tr></table></figure>

<p>在 <code>&lt;VirtualHost *:443&gt;&lt;/VirtualHost&gt;</code>里面的就是一个虚拟主机的配置。</p>
<blockquote>
<p>因为一个ip只能绑一个SSL，因此这里就算在写了两份<code>&lt;VirtualHost *:443&gt;...&lt;/VirtualHost&gt;</code>，也还是会读取第一个SSL。</p>
</blockquote>
<h2 id="配置-httpd-conf"><a href="#配置-httpd-conf" class="headerlink" title="配置 httpd.conf"></a>配置 httpd.conf</h2><p><code>/etc/httpd/conf/httpd.conf</code></p>
<p>在原先配置好apache的前提下，要修改一些数据</p>
<p>和之前配置域名一样，只是之前的端口是80，现在https用的是443的端口，没关系，不用动原来的80端口设置的虚拟主机，在后面追加虚拟主机即可</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *:443&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www</span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> zzz.tangliangdong.me</span><br><span class="line">    <span class="section">&lt;Directory "/var/www"&gt;</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">Options</span></span> FollowSymLinks</span><br><span class="line">        <span class="attribute">AllowOverride</span> <span class="literal">all</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">Order</span></span> allow,deny</span><br><span class="line">        <span class="attribute"><span class="nomarkup">Allow</span></span> from <span class="literal">all</span></span><br><span class="line">    <span class="section">&lt;/Directory&gt;</span></span><br><span class="line">        <span class="attribute">SSLEngine</span> <span class="literal">on</span></span><br><span class="line">        <span class="attribute">SSLProtocol</span> TLSv1 TLSv1.1 TLSv1.2 SSLv3</span><br><span class="line">        <span class="attribute">SSLCipherSuite</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4</span><br><span class="line">        <span class="attribute">SSLCertificateFile</span> cert/public.pem</span><br><span class="line">        <span class="attribute">SSLCertificateKeyFile</span> cert/214274821730744.key</span><br><span class="line">        <span class="attribute">SSLCertificateChainFile</span> cert/chain.pem</span><br><span class="line">    <span class="attribute">ErrorLog</span> <span class="string">"/mnt/bidianer_error.log"</span></span><br><span class="line">    <span class="attribute">CustomLog</span> <span class="string">"/mnt/bidianer_runtime.log"</span> common</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SSLEngine on   开启证书</li>
<li>SSLCertificateFile   证书公钥</li>
<li>SSLCertificateKeyFile   证书私钥</li>
<li>SSLCertificateKeyFile   根证书</li>
</ul>
<p>然后重启apache服务</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl restart httpd</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="配置http强制跳转https"><a href="#配置http强制跳转https" class="headerlink" title="配置http强制跳转https"></a>配置http强制跳转https</h1><p>既然配好了Https，自然就要用起来了，现在一般输入url，默认还是用http。</p>
<p>如果只是某个域名跳转https，那么如下配置即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    &lt;Directory /var/www&gt;</span><br><span class="line">        AllowOverride All</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">    Serveradmin 18868748898@163.com</span><br><span class="line">    ServerName zzz.tangliangdong.me</span><br><span class="line">    DocumentRoot /var/www/</span><br><span class="line">    Redirect permanent / https://zzz.tangliangdong.me/</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>直接添加 <code>Redirect permanent / https://zzz.tangliangdong.me/</code> 这句即可实现,</p>
<p><code>http://zzz.tangliangdong.me</code> 跳转到 <code>https://zzz.tangliangdong.me</code></p>
<p>要用到Apache的 Rewrite</p>
<h2 id="启用-htaccess"><a href="#启用-htaccess" class="headerlink" title="启用 .htaccess"></a>启用 <code>.htaccess</code></h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要求是网站根目录</span></span><br><span class="line"><span class="section">&lt;Directory "/var/www"&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">options</span></span> Indexes FollowSymLinks</span><br><span class="line">    <span class="attribute">AllowOverride</span> <span class="literal">all</span></span><br><span class="line">    <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>AllowOverride all</code> 原来是none,要改成all，这样就可以启用<code>.htaccess</code></p>
<h2 id="配置Rewrite规则"><a href="#配置Rewrite规则" class="headerlink" title="配置Rewrite规则"></a>配置Rewrite规则</h2><p>在 <code>/var/www</code>网站根目录下新建 <code>.htaccess</code> 文件，里面写入</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute"><span class="nomarkup">RewriteEngine</span></span> <span class="literal">On</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">RewriteCond</span></span> <span class="variable">%&#123;SERVER_PORT&#125;</span> 80  # 80端口都跳转</span><br><span class="line"><span class="comment">#RewriteCond %&#123;HTTP_HOST&#125; ^zzz.tangliangdong.me [NC]  # zzz.tangliangdong.me都跳转</span></span><br><span class="line"><span class="comment">#RewriteCond %&#123;SERVER_PORT&#125; !^443$  # 非443端口都跳转</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">RewriteRule</span></span> ^(.*)$ https://<span class="variable">%&#123;SERVER_NAME&#125;</span>/<span class="number">$1</span><span class="meta"> [L,R=301]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>!</code> 放在最开头代表 <strong>非</strong> 的意思</p>
</blockquote>
<h3 id="RewriteEngine"><a href="#RewriteEngine" class="headerlink" title="RewriteEngine"></a>RewriteEngine</h3><blockquote>
<p>启用或禁用运行时重写引擎</p>
</blockquote>
<p>RewriteEngine是总开关，用来控制是否启用url rewrite。</p>
<h3 id="RewriteCond"><a href="#RewriteCond" class="headerlink" title="RewriteCond"></a>RewriteCond</h3><blockquote>
<p>定义将进行重写的条件</p>
</blockquote>
<p>RewriteCond 是过滤条件，当URL满足RewriteCond配置的条件的情况，就会执行RewriteCond下面紧邻的RewriteRule语句</p>
<p>RewriteCond <code>%{待测试项目}</code> 正则表达式条件</p>
<p><code>%{HTTP_HOST}</code>👉👉👉<a href="http://httpd.apache.org/docs/current/expr.html#vars" target="_blank" rel="noopener">可用的变量列表</a></p>
<h3 id="RewriteRule"><a href="#RewriteRule" class="headerlink" title="RewriteRule"></a>RewriteRule</h3><blockquote>
<p>定义重写引擎的规则</p>
</blockquote>
<p>详细请参见👉👉👉<a href="http://httpd.apache.org/docs/current/mod/mod_rewrite.html" target="_blank" rel="noopener">Apache模块mod_rewrite</a></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取教务网站数据</title>
    <url>/2017/10/07/2017-10-7-php-crawler/</url>
    <content><![CDATA[<h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7服务器 配置Tomcat和mysql</title>
    <url>/2017/09/22/2017-9-22-server-tomcat-mysql/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote>
<ul>
<li>搜索有关配置服务器的信息时<ul>
<li>一定要指明服务器系统的类别（Window,Centos,Ubuntu），</li>
<li>还要指明系统的版本号（Centos6,Centos7），不同的版本的系统之间的差别也很大。</li>
</ul>
</li>
<li>最好搜索最近一年的，太久远的博文可能就滞后了。</li>
</ul>
</blockquote>
<a id="more"></a>

<p>还要稍早写的一篇 👉👉👉 <a href="http://tangliangdong.github.io/2017/09/22/2017-9-22-centos-configuration/" target="_blank" rel="noopener">centos7配置apache，添加域名</a></p>
<h2 id="centos7-安装、配置mysql数据库"><a href="#centos7-安装、配置mysql数据库" class="headerlink" title="centos7 安装、配置mysql数据库"></a>centos7 安装、配置mysql数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> mysql</span><br><span class="line">yum <span class="keyword">install</span> mysql-<span class="keyword">server</span></span><br><span class="line">yum <span class="keyword">install</span> mysql-devel</span><br></pre></td></tr></table></figure>

<p>安装mysql和mysql-devel都成功，但是安装mysql-server失败</p>
<p>CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了</p>
<p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> mariadb-<span class="keyword">server</span> mariadb</span><br></pre></td></tr></table></figure>

<p>mariadb数据库的相关命令是：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">systemctl</span> start <span class="keyword">mariadb </span> // 启动<span class="keyword">MariaDB</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">systemctl </span>stop <span class="keyword">mariadb </span> // 停止<span class="keyword">MariaDB</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">systemctl </span>restart <span class="keyword">mariadb </span> // 重启<span class="keyword">MariaDB</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">systemctl </span>enable <span class="keyword">mariadb </span> // 设置开机启动</span><br></pre></td></tr></table></figure>

<p>启动数据库后，就可以正常使用了</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql -u root -p</span></span><br></pre></td></tr></table></figure>

<p>为了方便使用，需要在本地使用 Navicat 连接服务器上的数据库。</p>
<ol>
<li>可能会碰到没有权限的问题，可能需要firewall 防火墙开放3306端口</li>
</ol>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld  <span class="string">//</span> 开启防火墙</span><br><span class="line"></span><br><span class="line">firewall-cmd <span class="params">--zone=public</span> <span class="params">--add-port=3306/tcp</span> <span class="params">--permanent</span> <span class="string">//</span> 将3306端口添加到防火墙</span><br><span class="line"></span><br><span class="line">firewall-cmd <span class="params">--reload</span>  <span class="string">//</span> 防火墙重新配置</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>还可能碰到这个问题 </li>
</ol>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">Host <span class="string">'xxx.xx.xxx.xxx'</span> <span class="keyword">is</span> <span class="keyword">not</span> allowed <span class="keyword">to</span> connect <span class="keyword">to</span> <span class="keyword">this</span> MySQL server</span><br></pre></td></tr></table></figure>

<p><img src="server-mysql-tomcat.png" alt="Nacicat 连接数据库失败"></p>
<blockquote>
<p>可能是一种安全预防措施，可以尝试添加新的管理员帐户：admin 123456</p>
</blockquote>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE USER <span class="string">'admin'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line">mysql&gt; GRANT <span class="literal">ALL</span> PRIVILEGES <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'admin'</span>@<span class="string">'localhost'</span> <span class="keyword">WITH</span> GRANT OPTION;</span><br><span class="line">mysql&gt; CREATE USER <span class="string">'admin'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line">mysql&gt; GRANT <span class="literal">ALL</span> PRIVILEGES <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'admin'</span>@<span class="string">'%'</span> <span class="keyword">WITH</span> GRANT OPTION;</span><br></pre></td></tr></table></figure>

<p>这样就可以用新的管理员账号连接mysql了。</p>
<p><img src="server-mysql-tomcat2.png" alt="Navicat 配置数据库连接信息"></p>
<h2 id="centos7-安装、配置-Tomcat"><a href="#centos7-安装、配置-Tomcat" class="headerlink" title="centos7 安装、配置 Tomcat"></a>centos7 安装、配置 Tomcat</h2><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>安装Tomcat之前需要确保已经安装了 JDK</p>
<p>输入 <code>java -version</code> 来判断是否已经安装了java</p>
<p>如果没有安装，则本地先下载JDK，再上传到服务器的 <code>/usr/local/</code> 目录</p>
<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载jdk-8u144-linux-x64.rpm</a></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行 rpm包安装</span></span><br><span class="line">rpm -ivh jdk<span class="number">-8</span>u111-linux-x64.rpm</span><br></pre></td></tr></table></figure>

<p>检查java版本</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<h3 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h3><ul>
<li><p>下载 <a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">apache-tomcat-8.0.46</a>，解压之后，再上传到 <code>/usr/local/</code> 目录</p>
</li>
<li><p>创建用户组，并添加用户到用户组</p>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">groupadd tomcat</span><br><span class="line">usermod -<span class="selector-tag">a</span> -G tomcat root</span><br></pre></td></tr></table></figure>

<ul>
<li>修改权限</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">chown</span> <span class="selector-tag">-R</span> <span class="selector-tag">tomcat</span><span class="selector-pseudo">:root</span> <span class="selector-tag">apache-tomcat-8</span><span class="selector-class">.5</span><span class="selector-class">.9</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动Tomcat</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/apache-tomcat-8.0.46/</span>bin<span class="regexp">/startup.sh</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当然每次启动Tomcat都要进入这个文件夹，很麻烦，我们可以将Tomcat配置为系统服务，直接通过 <code>systemctl start/stop/restart tomcat</code> 操作Tomcat。</p>
</blockquote>
<p>详细请参考👉👉👉 <a href="http://blog.csdn.net/zuoshoucuoai/article/details/53610558" target="_blank" rel="noopener">Centos7下添加Tomcat为系统服务</a></p>
<ul>
<li>配置 Tomcat端口号</li>
</ul>
<p>在 <code>/usr/local/apache-tomcat-8.0.46/conf/server.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Tomcat的端口号的，默认是8080，因为服务器的默认端口是80，这里我们就改成80 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"80"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>我前一篇写 <a href="http://tangliangdong.github.io/2017/09/22/2017-9-22-centos-configuration/" target="_blank" rel="noopener">centos7配置apache，添加域名</a> 里面的Apache也是80端口，两个现在一起无法一起启动，因为端口冲突了，所有先把Apache先关闭。</p>
</blockquote>
<p>就算配置Tomcat是8080端口，两个一起启动，Apache的配置文件里 也不能加监听8080端口的代码 <code>Listen 8080</code> 。</p>
<ul>
<li>配置 Tomcat绑定多个域名</li>
</ul>
<p>编辑 <code>server.xml</code>，在 <code>&lt;Service&gt;&lt;/Service&gt;</code> 标签中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"zzz.tangliangdong.me"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">　　  <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span>=<span class="string">"/usr/local/apache-tomcat-8.0.46/webapps"</span>/&gt;</span></span><br><span class="line">　　  <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span> <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span> <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"www.tangliangdong.me"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">　　  <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span>=<span class="string">"/usr/local/apache-tomcat-8.0.46/webapps/myhomepage"</span>/&gt;</span></span><br><span class="line">　　  <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span> <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span> <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>只需要改两个地方：</p>
<ul>
<li>name  ——  绑定的域名</li>
<li>docBase  ——  域名映射的绝对路径</li>
</ul>
<p>这样我们就可以通过 域名来访问服务器对应的路径了</p>
<blockquote>
<p>当然这个域名需要经过 域名解析的，不然配置了也没用。</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p>本文部分摘录自以下博客，特别写出来，以表感谢。</p>
</blockquote>
<ul>
<li><a href="https://www.cnblogs.com/starof/p/4680083.html" target="_blank" rel="noopener">centos7 mysql数据库安装和配置</a></li>
<li><a href="https://stackoverflow.com/questions/1559955/host-xxx-xx-xxx-xxx-is-not-allowed-to-connect-to-this-mysql-server" target="_blank" rel="noopener">主机’xxx.xx.xxx.xxx’不允许连接到这个MySQL服务器</a></li>
<li><a href="http://blog.csdn.net/zuoshoucuoai/article/details/53610558" target="_blank" rel="noopener">Centos7 下添加Tomcat为系统服务</a></li>
<li><a href="https://www.bbsmax.com/A/Vx5M10yg5N/" target="_blank" rel="noopener">tomcat实现多端口、多域名访问</a></li>
</ul>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7配置apache，添加域名</title>
    <url>/2017/09/22/2017-9-22-centos-configuration/</url>
    <content><![CDATA[<p>首先可以用本机的终端通过ssh远程登录主机</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">root</span>@<span class="keyword">127</span>.<span class="keyword">0</span>.<span class="keyword">0</span>.<span class="keyword">1</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>再输入 root 的登录密码</p>
<h3 id="下载安装Apache"><a href="#下载安装Apache" class="headerlink" title="下载安装Apache"></a>下载安装Apache</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> httpd</span><br></pre></td></tr></table></figure>

<p>安装成功后，操作Apache服务器的命令</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">systemctl start httpd      <span class="comment">// 启动apache</span></span><br><span class="line">systemctl <span class="keyword">stop</span> httpd       <span class="comment">// 停止apache</span></span><br><span class="line">systemctl restart httpd    <span class="comment">// 重启apache</span></span><br><span class="line"></span><br><span class="line">systemctl reload httpd     <span class="comment">// 重新加载（使用新的配置文件）</span></span><br><span class="line">systemctl status httpd     <span class="comment">// 查看服务器状态</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="keyword">enable</span> httpd     <span class="comment">// 设置apache开机启动</span></span><br></pre></td></tr></table></figure>

<p>操作apache的命令依然可以使用service指令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#<span class="built_in"> service network </span>restart</span><br><span class="line">Restarting<span class="built_in"> network </span>(via systemctl):                        [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#<span class="built_in"> service </span>httpd restart</span><br><span class="line">Redirecting <span class="keyword">to</span> /bin/systemctl restart  httpd.service</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#<span class="built_in"> service </span>sshd restart</span><br><span class="line">Redirecting <span class="keyword">to</span> /bin/systemctl restart  sshd.service</span><br></pre></td></tr></table></figure>

<p>但是系统会自动重定向该指令到新的指令 /bin/systemctl 来执行，并给出提示，因此直接使用 <code>systemctl</code>。</p>
<hr>
<p>成功启动 <em>Apache</em> 以后，可以通过直接浏览器输入服务器的ip进行访问，如果出现下图的页面，说明 <em>Apache</em> 安装成功了。</p>
<p><img src="apache.png" alt></p>
<p>上面写着推荐防止网页的内容的路径 <code>/var/www/html/</code></p>
<h3 id="配置Apache-httpd-conf"><a href="#配置Apache-httpd-conf" class="headerlink" title="配置Apache  [httpd.conf]"></a>配置Apache  [httpd.conf]</h3><p>Apache的配置文件在如下路径，直接打开编辑</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/httpd/<span class="keyword">conf</span>/httpd.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>

<p>httpd.conf 需要修改一些地方</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">line</span> 86: 改变管理员的邮箱地址</span></span><br><span class="line">ServerAdmin root@<span class="number">163</span>.com</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">line</span> 95: 改变域名信息</span></span><br><span class="line"><span class="built_in">ServerName</span> www.tangliangdong.me:<span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>配置WEB站点（可以绑定多个域名）</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启虚拟主机并确定其监听的主机名与端口，* 表示省略，80为网页默认端口</span></span><br><span class="line"><span class="attribute">NameVirtualHost</span> *:80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入单个虚拟主机信息 </span></span><br><span class="line"><span class="section">&lt;VirtualHost ip&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www/</span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span>  ip</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost ip&gt;</span></span><br><span class="line">    <span class="attribute">Serveradmin</span> root@163.com</span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> www.tangliangdong.me</span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www/tangliangdong</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ip的位置填写你服务器的ip地址</p>
</blockquote>
<ul>
<li>Serveradmin —— 填写你的邮箱</li>
<li>ServerName ——  主机名（域名或公网IP）</li>
<li>ServerAlias —— 别名（二级域名或其他域名或IP） </li>
<li>DocumentRoot —— 文件目录（表示将域名映射至该文件目录）</li>
</ul>
<h3 id="下载安装-VSFTP"><a href="#下载安装-VSFTP" class="headerlink" title="下载安装 VSFTP"></a>下载安装 VSFTP</h3><blockquote>
<p>我们可以用ftp工具直接通过拖拽的形式就能向服务器上传文件，很方便。</p>
</blockquote>
<p>打开 vsftpd 的配置文件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/vsftpd/vsftpd.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>

<p>将配置文件中 <code>anonymous_enable=YES</code> 改为 <code>anonymous_enable=NO</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取消如下配置前的注释符号：</span></span><br><span class="line"><span class="attr">local_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">write_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">chroot_local_user</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">chroot_list_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">chroot_list_file</span>=/etc/vsftpd.chroot_list</span><br></pre></td></tr></table></figure>

<p>打开 <code>/etc/vsftpd/user_list</code> 将ftp的登录账号添加进去</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>vsftpd<span class="regexp">/user_list</span></span><br></pre></td></tr></table></figure>

<h4 id="操作-vsftpd-服务"><a href="#操作-vsftpd-服务" class="headerlink" title="操作 vsftpd 服务"></a>操作 vsftpd 服务</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">systemctl start vsftpd<span class="selector-class">.service</span>  <span class="comment">// 开启vsftpd 服务</span></span><br><span class="line">systemctl stop vsftpd<span class="selector-class">.service</span>  <span class="comment">// 关闭vsftpd 服务</span></span><br><span class="line"></span><br><span class="line">chkconfig vsftpd on  <span class="comment">// 默认开启vsftpd 服务</span></span><br></pre></td></tr></table></figure>

<p><img src="apache1.png" alt="Transmit.app"></p>
<p>启动vsftpd 服务后，就可以通过ftp客户端进行登录。</p>
<p>把我们的web站点上传到服务器的对应路径。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p>本文部分摘录自以下博客，特别写出来，以表感谢。</p>
</blockquote>
<ul>
<li><a href="https://cnzhx.net/blog/centos-7-rhel-7-systemd-commands/" target="_blank" rel="noopener">CentOS 7 / RHEL 7 systemd 指令</a></li>
<li><a href="http://www.jb51.net/article/98100.htm" target="_blank" rel="noopener">CentOS服务器apache绑定多个域名的方法</a></li>
<li><a href="http://www.centoscn.com/image-text/config/2015/0322/4959.html" target="_blank" rel="noopener">CentOS下对vsftp安装、配置、卸载</a></li>
</ul>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>react-module 组件化</title>
    <url>/2017/09/22/2017-9-22-react-module/</url>
    <content><![CDATA[<h3 id="组件化的使用React组件"><a href="#组件化的使用React组件" class="headerlink" title="组件化的使用React组件"></a>组件化的使用React组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;PCNewsImageBlock count=&#123;<span class="number">10</span>&#125; type=<span class="string">"guoji"</span> width=<span class="string">"400px"</span></span><br><span class="line">     cartTitle=<span class="string">"国际新闻"</span> imageWidth=<span class="string">"112px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">PCNewsImageBlock</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ul>
<li>count: 图片的数量</li>
<li>type: 申请新闻接口的类别</li>
<li>width: 标签的长度</li>
<li>cartTitle: 标签的名称</li>
<li>imageWidth: 组件里每张图片的宽度</li>
</ul>
<p><img src="react-module.png" alt="react 组件化"></p>
<blockquote>
<p>每一个附加在组件上的属性均可以通过 <code>this.props.count</code> 来获取，我们需要定制什么属性，都可以把接口暴露出来，在调用组件的时候就可以实现组件的高度定制。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Card&#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;BrowserRouter, Route, Link&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>; <span class="comment">// 引入路由 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PCNewsDetail <span class="keyword">from</span> <span class="string">'./pc_news_detail'</span>;</span><br><span class="line"><span class="keyword">var</span> pcCss = <span class="built_in">require</span>(<span class="string">'../../sass/pc.scss'</span>); <span class="comment">// 引入CSS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PCNewsImageBlock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props); <span class="comment">// 调用父类的构造函数</span></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      news: <span class="string">''</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 组件加载完毕之后立即执行</span></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    fetch(<span class="string">'http://newsapi.gugujiankong.com/Handler.ashx?action=getnews'</span>+</span><br><span class="line">        <span class="string">'&amp;type='</span> + <span class="keyword">this</span>.props.type + <span class="string">'&amp;count='</span> + <span class="keyword">this</span>.props.count, &#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      mode: <span class="string">'cors'</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> response.json()).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;<span class="attr">news</span>: json&#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 继承自React.component 每个组件必须实现的方法</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// inline style 采用驼峰(camelCased)写法</span></span><br><span class="line">    <span class="comment">// 通过表达式写入到标签里 style=&#123;styleImage&#125;</span></span><br><span class="line">    <span class="keyword">const</span> styleImage = &#123;</span><br><span class="line">      display: <span class="string">'block'</span>,</span><br><span class="line">      width: <span class="keyword">this</span>.props.imageWidth, <span class="comment">// 图片的宽度</span></span><br><span class="line">      height: <span class="string">'90px'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> styleH3 = &#123;</span><br><span class="line">      width: <span class="keyword">this</span>.props.imageWidth,</span><br><span class="line">      whiteSpace: <span class="string">'nowrap'</span>,</span><br><span class="line">      overflow: <span class="string">'hidden'</span>,</span><br><span class="line">      textOverflow: <span class="string">'ellipsis'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> &#123;news&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">const</span> newsList = news.length</span><br><span class="line">      ? news.map(<span class="function">(<span class="params">newsItem, index</span>) =&gt;</span> (</span><br><span class="line">        &lt;div key=&#123;index&#125; <span class="class"><span class="keyword">class</span></span>=&#123;pcCss.image_block&#125;&gt;</span><br><span class="line">          &lt;Link to=&#123;<span class="string">`details/<span class="subst">$&#123;newsItem.uniquekey&#125;</span>`</span>&#125; target=<span class="string">"_blank"</span>&gt;</span><br><span class="line">            &lt;div className=<span class="string">"custom-image"</span>&gt;</span><br><span class="line">              &lt;img src=&#123;newsItem.thumbnail_pic_s&#125; style=&#123;styleImage&#125; alt=&#123;newsItem.title&#125;/&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="custom-card"&gt;</span></span><br><span class="line"><span class="regexp">              &lt;h3 style=&#123;styleH3&#125;&gt;&#123;newsItem.title&#125;&lt;/</span>h3&gt;</span><br><span class="line">              &lt;p&gt;&#123;newsItem.author_name&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">          &lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      ))</span><br><span class="line">      : <span class="string">"没有加载到任何新闻"</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 返回JSX的元素</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"topNewsList"</span>&gt;</span><br><span class="line">        &lt;BrowserRouter&gt;</span><br><span class="line">          &lt;Card title=&#123;<span class="keyword">this</span>.props.cartTitle&#125; bordered=&#123;<span class="literal">true</span>&#125; style=&#123;&#123;</span><br><span class="line">            width: <span class="keyword">this</span>.props.width</span><br><span class="line">          &#125;&#125;&gt;</span><br><span class="line">            &#123;newsList&#125;</span><br><span class="line">          &lt;<span class="regexp">/Card&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>BrowserRouter&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="React-官方对-Inline-Style-的-介绍"><a href="#React-官方对-Inline-Style-的-介绍" class="headerlink" title="React 官方对 Inline Style 的 介绍"></a>React 官方对 Inline Style 的 介绍</h3><ol>
<li>采用驼峰(camelCased)写法，对于 backgroundImage 渲染后成为 <code>background-image</code>；</li>
<li>可以不用写 px 直接采用数字 1 取代 1px，React 会自动加上 px，有些 CSS 样式属性不会自动加上 px，请参考不会自动添加 px 的样式属性； WebkitTransition 和 msTransition 中，Webkit 和 ms</li>
<li>是 JS前缀(JavaScript prefix)，解决跨平台，更多参考Modernizr Prefixed;</li>
</ol>
<h3 id="组件化的优势"><a href="#组件化的优势" class="headerlink" title="组件化的优势"></a>组件化的优势</h3><ol>
<li>可扩展</li>
<li>可复用</li>
<li>高内聚/低耦合 - 我们无需关心该组件内部的实现细节</li>
</ol>
<blockquote>
<p>部分借鉴自👉👉👉<a href="http://robinchen.me/tech/2016/08/09/tech-Refactor-CSS-into-JS.html" target="_blank" rel="noopener">使用 JS 写 CSS 与 React 内联样式</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>css-loader css模块化</title>
    <url>/2017/09/21/2017-9-21-css-loader/</url>
    <content><![CDATA[<h3 id="CSS全局作用域的问题："><a href="#CSS全局作用域的问题：" class="headerlink" title="CSS全局作用域的问题："></a>CSS全局作用域的问题：</h3><ul>
<li>一旦项目很大了，那很可能出现css重名的情况，因此为了避免这个问题，只能把css类名取的很长，有时候还会乱七八糟的取。</li>
<li>而且多人协作的话，这个问题就更加显著了。</li>
</ul>
<blockquote>
<p>通过 CSS Modules 可以解决CSS全局作用域的问题，</p>
</blockquote>
<p>保证单个组件的所有样式：</p>
<ol>
<li>集中在同一个地方</li>
<li>只应用于该组件</li>
</ol>
<a id="more"></a>

<p>在需要的地方用 import 引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">"./styles.css"</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>选择用Webpack来实现 CSS Modules，在webpack.config.js中加上如下配置，使得webpack将CSS文件作为CSS模块来看待：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  entry:</span> <span class="string">'./src/js/root.jsx'</span><span class="string">,</span></span><br><span class="line"><span class="attr">  output:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    filename:</span> <span class="string">'bundle-[chunkhash].js'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">path.resolve(__dirname,</span> <span class="string">'dist'</span><span class="string">)</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">  resolve:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    extensions:</span> <span class="string">['.js','.jsx','.scss','css']</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">  module:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    rules:</span> <span class="string">[</span></span><br><span class="line">      <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        test:</span> <span class="string">/\.css$/,</span></span><br><span class="line"><span class="attr">        use:</span> <span class="string">[&#123;</span></span><br><span class="line"><span class="attr">          loader:</span> <span class="string">"style-loader"</span></span><br><span class="line">        <span class="string">&#125;,</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">          loader:</span> <span class="string">"css-loader"</span><span class="string">,</span></span><br><span class="line"><span class="attr">          options:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">            modules:</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">            importLoaders:</span> <span class="number">1</span><span class="string">,</span></span><br><span class="line"><span class="attr">            localIdentName:</span> <span class="string">'[path][name]__[local]--[hash:base64:5]'</span><span class="string">,</span></span><br><span class="line">          <span class="string">&#125;</span></span><br><span class="line">        <span class="string">&#125;]</span></span><br><span class="line">      <span class="string">&#125;,</span></span><br><span class="line">    <span class="string">]</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure>

<h4 id="css-loader-参数"><a href="#css-loader-参数" class="headerlink" title="css-loader 参数"></a>css-loader 参数</h4><h5 id="modules-是否开启CSS模块化"><a href="#modules-是否开启CSS模块化" class="headerlink" title="modules 是否开启CSS模块化"></a>modules 是否开启CSS模块化</h5><p>开启css模块话后:</p>
<p>scss</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mobileHeader</span>&#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f6f6f6</span>;</span><br><span class="line">  <span class="selector-tag">header</span>&#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="variable">$headerColor</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打包生成的css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">._2sNr12LUYLzeia7ixOVvZ2</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f6f6f6</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">._2sNr12LUYLzeia7ixOVvZ2</span> <span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#2bb7f5</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打包生成的html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"_2sNr12LUYLzeia7ixOVvZ2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="localIdentName-配置生成的标识符"><a href="#localIdentName-配置生成的标识符" class="headerlink" title="localIdentName 配置生成的标识符"></a>localIdentName 配置生成的标识符</h5><p><code>localIdentName: &#39;[path][name]__[local]--[hash:base64:5]&#39;</code></p>
<p>scss</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mobileHeader</span>&#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f6f6f6</span>;</span><br><span class="line">  <span class="selector-tag">header</span>&#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="variable">$headerColor</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打包生成的css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.src-sass-mobile__mobileHeader--2sNr1</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f6f6f6</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.src-sass-mobile__mobileHeader--2sNr1</span> <span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#2bb7f5</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打包生成的html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"src-sass-mobile__mobileHeader--2sNr1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="CSS-Modules后覆盖antd组件样式"><a href="#CSS-Modules后覆盖antd组件样式" class="headerlink" title="CSS Modules后覆盖antd组件样式"></a>CSS Modules后覆盖antd组件样式</h3><p>之前在使用 react ➕ andtd 的时候，有些地方需要覆盖和添加antd的样式，但是直接写在scss文件里面，打包出来后，因为css模块化的缘故，导致css类名改变无法覆盖原来的样式。</p>
<p>因此就去找如何才能让 class不被编译为哈希字符串。</p>
<p>用 <strong>:global()</strong> 包裹就行了，这样声明的 <code>class</code> 是全局的CSS，语法： <code>:global(.className)</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">:global(.ant-carousel .slick-slider) &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#364d79</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CSS Modules 提供了两种作用域：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 局部作用域，</span><br><span class="line"><span class="selector-tag">local</span>(<span class="selector-class">.title</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 全局作用域</span><br><span class="line"><span class="selector-pseudo">:global(.title)</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>css-loader</tag>
      </tags>
  </entry>
  <entry>
    <title>解决antd Tabs高度占满整个屏幕</title>
    <url>/2017/09/21/2017-9-21-antd-tabs/</url>
    <content><![CDATA[<p><img src="antd.png" alt="Tabs高度占满整个屏幕"></p>
<p>官方演示事例：</p>
<p><img src="antd2.png" alt="官方演示Tabs事例"></p>
<p><img src="antd3.png" alt="css属性"></p>
<p>发现里面有个 <code>height: 100%</code> 的属性，想要 height的百分比生效有几种办法，</p>
<ul>
<li>父元素设置固定高度</li>
<li>给所有父元素都设置<code>height: 100%</code>，直到html 和 body也设置<code>height: 100%</code>;</li>
</ul>
<p>但在这里都失效了，查了下原来react的入口文件<code>index.html</code>需要有 <code>&lt;!DOCTYPE html&gt;</code> 这个标记</p>
<p><img src="antd4.png" alt></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>antd</tag>
        <tag>Tabs</tag>
      </tags>
  </entry>
  <entry>
    <title>react-router 路由</title>
    <url>/2017/09/20/2017-9-20-react-router/</url>
    <content><![CDATA[<h4 id="下载react-router-dom"><a href="#下载react-router-dom" class="headerlink" title="下载react-router-dom"></a>下载react-router-dom</h4><blockquote>
<p>react-router和react-router-dom只需要一个就行了，后者比前者多出了<link> <browserrouter>这样的 DOM 类组件，所以选择引入 react-router-dom</browserrouter></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save react-router-dom</span></span><br></pre></td></tr></table></figure>

<h4 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h4><p>下面引入的Router是 BrowserRouter，之前老的react-router把history分为三类（history是用来兼容不同浏览器或者环境下的历史记录管理的，当我跳转或者点击浏览器的后退按钮时，history就必须记录这些变化）</p>
<ul>
<li>hashHistory 老版本浏览器的history</li>
<li>browserHistory h5的history</li>
<li>memoryHistory node环境下的history，存储在memory中</li>
</ul>
<p>4.0之前版本的react-router针对三者分别实现了createHashHistory、createBrowserHistory和create MemoryHistory三个方法来创建三种情况下的history</p>
<p>到了4.0版本，在react-router-dom中直接将这三种history作了内置，于是我们看到了BrowserRouter、HashRouter、MemoryRouter这三种Router</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom'</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Link, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./sass/style.scss'</span>);</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">'./component/list'</span>;</span><br><span class="line"><span class="keyword">import</span> Detail <span class="keyword">from</span> <span class="string">'./component/detail'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;BrowserRouter&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/list/111"</span>&gt;</span>list<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/detail"</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path='/</span>list/:id<span class="string">' component=&#123;List&#125;/&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path='</span>/detail<span class="string">' component=&#123;Detail&#125;/&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/BrowserRouter&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Router的path里冒号”:” 后的部分是依次匹配Link的to后面的值，在组件里可以通过 <code>this.props.match.params.id</code> 来获取传递的值。</p>
</blockquote>
<p><strong>BrowserRouter只允许有一个子元素，存在多个会报错</strong></p>
<h4 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom'</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; Link, Switch, Route, BrowserRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./sass/style.scss'</span>);</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">'./component/list'</span>;</span><br><span class="line"><span class="keyword">import</span> Detail <span class="keyword">from</span> <span class="string">'./component/detail'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/list/111"</span>&gt;</span>list<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/detail"</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path='/</span>list/:id<span class="string">' component=&#123;List&#125;/&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path='</span>/detail<span class="string">' component=&#123;Detail&#125;/&gt;</span></span><br><span class="line"><span class="string">        &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h3><p>之后用React做主页跳转的详情页时，碰到一个问题：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;PCIndex&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/details/:uniquekey"</span> <span class="attr">component</span>=<span class="string">&#123;PCNewsDetail&#125;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就这样的一个页面，在首页点击详情连接一直无法跳转。</p>
<p>发现是如果不加 exact 这个参数，会把已 <code>/</code>这个开头的url全部匹配上，所有必须加上 <code>exact</code> 进行精确匹配。</p>
<h4 id="exact"><a href="#exact" class="headerlink" title="exact"></a>exact</h4><blockquote>
<p>只会匹配和 location.pathname 完全相同的路径</p>
</blockquote>
<table>
<thead>
<tr>
<th>path</th>
<th>location.pathname</th>
<th>exact</th>
<th>matches?</th>
</tr>
</thead>
<tbody><tr>
<td>/one</td>
<td>/one/two</td>
<td>true</td>
<td>No</td>
</tr>
<tr>
<td>/one</td>
<td>/one/two</td>
<td>false</td>
<td>Yes</td>
</tr>
</tbody></table>
<h4 id="strict"><a href="#strict" class="headerlink" title="strict"></a>strict</h4><blockquote>
<p>如果path末尾有一个斜线，则会匹配到尾部的斜线为止，如果后面还有其他的url段，对后面的url段就不起作用了。</p>
</blockquote>
<table>
<thead>
<tr>
<th>path</th>
<th>Location.pathname</th>
<th>mathces?</th>
</tr>
</thead>
<tbody><tr>
<td>/one/</td>
<td>/one</td>
<td>No</td>
</tr>
<tr>
<td>/one/</td>
<td>/one/</td>
<td>Yes</td>
</tr>
<tr>
<td>/one/</td>
<td>/one/two</td>
<td>Yes</td>
</tr>
</tbody></table>
<hr>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>用 <code>webpack-dev-server</code> 刷新子页面的时候 <code>http://localhost:8081/details/161028202106247</code>，页面会有404错误,</li>
</ol>
<p>可以在运行 <code>webpack-dev-server</code> 的时候后面加上参数 <code>--history-api-fallback</code></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --devtool eval --progress --colors --content-base build --history-api-fallback"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;&amp; exit 1"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<blockquote>
<p>直接在命令行在根目录运行 <code>npm run dev</code> 就可以运行 <strong>package.json中预设的指令</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>svg path 使用</title>
    <url>/2017/09/20/2017-9-20-svg/</url>
    <content><![CDATA[<h4 id="path-命令"><a href="#path-命令" class="headerlink" title="path 命令"></a>path 命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>M/m (x,y)+</td>
<td>移动当前位置</td>
</tr>
<tr>
<td>L/l (x,y)+</td>
<td>从当前位置绘制线段到指定位置</td>
</tr>
<tr>
<td>H/h (x)+</td>
<td>从当前位置绘制⽔水平线到达指定的 x 坐标</td>
</tr>
<tr>
<td>V/v (x)+</td>
<td>从当前位置绘制竖直线到达指定的 y 坐标</td>
</tr>
<tr>
<td>Z/z</td>
<td>闭合当前路径</td>
</tr>
<tr>
<td>C/c (x1,y1,x2,y2,x,y)+</td>
<td>从当前位置绘制三次⻉贝塞尔曲线到指定位置</td>
</tr>
<tr>
<td>S/s (x2,y2,x,y)+</td>
<td>从当前位置光滑绘制三次⻉贝塞尔曲线到指定位置</td>
</tr>
<tr>
<td>Q/q (x1,y1,x,y)+</td>
<td>从当前位置绘制⼆二次⻉贝塞尔曲线到指定位置</td>
</tr>
<tr>
<td>T/t (x,y)+</td>
<td>从当前位置光滑绘制⼆二次⻉贝塞尔曲线到指定位置</td>
</tr>
<tr>
<td>A/a (rx,ry,xr,laf,sf,x,y)</td>
<td>从当前位置绘制弧线到指定位置</td>
</tr>
</tbody></table>
<a id="more"></a>

<h5 id="命令基本规律"><a href="#命令基本规律" class="headerlink" title="命令基本规律"></a>命令基本规律</h5><ul>
<li>区分大小写：大写表示坐标参数为绝对位置，小写则为相对位置</li>
<li>最后的参数表示最终要到达的位置  </li>
<li>上一个命令结束的位置就是下一个命令开始的位置</li>
<li>命令可以重复 </li>
</ul>
<h5 id="移动和直线命令"><a href="#移动和直线命令" class="headerlink" title="移动和直线命令"></a>移动和直线命令</h5><ul>
<li>M  (x,  y)+  移动画笔，后面如果有重复参数，会当做是  L  命令处理</li>
<li>L  (x,  y)+  绘制直线到指定位置  </li>
<li>H  (x)+  绘制水平线到指定的  x  位置 </li>
<li>V  (y)+  绘制竖直线到指定的  y  位置</li>
<li>m、l、h、v  使用相对位置绘制</li>
</ul>
<h5 id="弧线命令"><a href="#弧线命令" class="headerlink" title="弧线命令"></a>弧线命令</h5><ul>
<li>A  (rx, ry, xr, laf, sf, x, y)  -  绘制弧线  </li>
<li><strong>最复杂的命令</strong><ul>
<li>rx  - （radius-x）弧线所在椭圆的 x 半轴长  </li>
<li>ry  - （radius-y）弧线所在椭圆的 y 半轴长</li>
<li>xr  - （xAxis-rotation）弧线所在椭圆的长轴角度（旋转弧线）</li>
<li>laf  - （large-arc-flag）0：较短弧，1：较长弧</li>
<li>sf  - （sweep-flag）0：从起点出发逆时针方向的弧，1：从起点出发顺时针的弧</li>
<li>x, y  -  弧的终点位置</li>
</ul>
</li>
</ul>
<h6 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h6><p><img src="svg.png" alt="弧线命令"></p>
<blockquote>
<p>在已知半径的和角度的情况下，两个不同的点是可以确定两个椭圆，因此两点间的弧线就会有四条。</p>
</blockquote>
<ul>
<li>laf 0：较短的两条弧，1：较长的两条弧</li>
<li>sf 0：从起点出发逆时针方向的弧，1：从起点出发顺时针的弧</li>
</ul>
<p><img src="svg2.png" alt="弧线命令"></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>svg</tag>
      </tags>
  </entry>
  <entry>
    <title>ionic3 http请求</title>
    <url>/2017/09/17/2017-9-17-ionic3-http/</url>
    <content><![CDATA[<p>在ionic中不管是登录还是请求列表信息，都会需要使用http请求。</p>
<a id="more"></a>

<ul>
<li>想要使用Http请求，就需要先<strong>App.module.ts</strong>中注册HttpModule</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入Angular 的 HttpModule</span></span><br><span class="line"><span class="keyword">import</span> &#123; HttpModule&#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    HttpModule</span><br><span class="line">  ],</span><br><span class="line">  declarations: [ MyApp ],</span><br><span class="line">  bootstrap:    [ IonicApp ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注册好之后，就可以使用了，先把home.html页面表单写好</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span> <span class="attr">padding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to Ionic!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span> <span class="attr">fixed</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-input</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"User.username"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span> <span class="attr">fixed</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-input</span> <span class="attr">type</span>=<span class="string">"password"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"User.passwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ion-button</span> <span class="attr">color</span>=<span class="string">"red"</span> (<span class="attr">click</span>)=<span class="string">"submit($event)"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="四种数据绑定的形式"><a href="#四种数据绑定的形式" class="headerlink" title="四种数据绑定的形式"></a>四种数据绑定的形式</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--插值表达式    显示组件的hero.name属性的值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--属性绑定    把父组件selectedHero的值传到子组件的hero属性中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hero-detail</span> [<span class="attr">hero</span>]=<span class="string">"selectedHero"</span>&gt;</span><span class="tag">&lt;/<span class="name">hero-detail</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事件绑定    用户点击英雄的名字时调用组件的selectHero方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> (<span class="attr">click</span>)=<span class="string">"selectHero(hero)"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--双向绑定    数据属性值通过属性绑定从组件流到输入框。用户的修改通过事件绑定流回组件，把属性值设置为最新的值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"hero.name"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>再写home.ts文件，提交表单数据</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NavController &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http,Response,Jsonp &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'page-home'</span>,</span><br><span class="line">  templateUrl: <span class="string">'home.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HomePage &#123;</span><br><span class="line">  <span class="comment">// 申明成员变量</span></span><br><span class="line">  User = &#123;</span><br><span class="line">    username: <span class="string">''</span>,</span><br><span class="line">    passwd: <span class="string">''</span>,</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 依赖注入</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> navCtrl: NavController,<span class="keyword">private</span> http: Http,<span class="keyword">public</span> jsonp: Jsonp</span>) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  submit(event)&#123;</span><br><span class="line">    <span class="comment">// 使用jsonp请求，是解决跨域问题的一种办法</span></span><br><span class="line">    <span class="keyword">this</span>.http.request(<span class="string">'http://localhost:9090/app/login?account='</span>+<span class="keyword">this</span>.User.username+<span class="string">'&amp;passwd='</span>+<span class="keyword">this</span>.User.passwd)</span><br><span class="line">      .subscribe(<span class="function">(<span class="params">res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.listData = res.json();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>this.http.request()</li>
<li>this.http.get()</li>
<li>this.http.post()</li>
</ul>
<hr>
<h5 id="但这样会造成如下跨域的问题"><a href="#但这样会造成如下跨域的问题" class="headerlink" title="但这样会造成如下跨域的问题"></a>但这样会造成如下跨域的问题</h5><p><img src="cross-domain.png" alt></p>
<p>可以先用Jsonp来解决，</p>
<p>同样需要先在App.module.ts中注册JsonpModule的模块</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HttpModule,JsonpModule&#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomePage &#125; <span class="keyword">from</span> <span class="string">'../pages/home/home'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    MyApp,</span><br><span class="line">    HomePage,</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    HttpModule,</span><br><span class="line">    JsonpModule,</span><br><span class="line">    IonicModule.forRoot(MyApp)</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [IonicApp],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>修改home.ts中的代码</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NavController &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http,Jsonp &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'page-home'</span>,</span><br><span class="line">  templateUrl: <span class="string">'home.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HomePage &#123;</span><br><span class="line">  User = &#123;</span><br><span class="line">    username: <span class="string">''</span>,</span><br><span class="line">    passwd: <span class="string">''</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> navCtrl: NavController,<span class="keyword">private</span> http: Http,<span class="keyword">public</span> jsonp: Jsonp</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  submit(event)&#123;</span><br><span class="line">    <span class="keyword">this</span>.jsonp.request(<span class="string">'http://localhost:9090/app/login?account='</span>+<span class="keyword">this</span>.User.username+<span class="string">'&amp;passwd='</span>+<span class="keyword">this</span>.User.passwd+<span class="string">'&amp;jsonp=callback&amp;callback=JSONP_CALLBACK'</span>, &#123; method: <span class="string">'Get'</span> &#125;)</span><br><span class="line">      .subscribe(</span><br><span class="line">        (data) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">            <span class="comment">// data.json() 将获取的json字符串转换成对象</span></span><br><span class="line">            <span class="built_in">console</span>.log(data.json());</span><br><span class="line">        &#125;,</span><br><span class="line">        (error) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Promise写法"><a href="#Promise写法" class="headerlink" title="Promise写法"></a>Promise写法</h3><blockquote>
<p>如果想在网络错误的情况下也提供解决的方式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> headers = <span class="keyword">new</span> Headers();</span><br><span class="line">    headers.append(<span class="string">"Accept"</span>, <span class="string">'application/json'</span>);</span><br><span class="line">    headers.append(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line"><span class="keyword">let</span> options = <span class="keyword">new</span> RequestOptions(&#123; <span class="attr">headers</span>: headers &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.http.post(<span class="string">'http://localhost:9090/app/login?'</span>+</span><br><span class="line">    <span class="string">'account='</span>+<span class="keyword">this</span>.User.username +</span><br><span class="line">    <span class="string">'&amp;passwd='</span>+<span class="keyword">this</span>.User.passwd,)</span><br><span class="line">  .toPromise()</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="keyword">this</span>.listData = res.json(); &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="built_in">console</span>.error(err) &#125;); <span class="comment">// 错误的时候返回的</span></span><br></pre></td></tr></table></figure>

<p><code>this.http.post(URL,postParams,headerOptions)</code> 接收三个参数，也可以只传两个参数 <code>(URL,headerOptions)</code>，想要传输的参数就拼在url里。如果想通过 <code>postParams</code>传参，则需要这么写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> postParams = &#123;</span><br><span class="line">    phone: <span class="number">18362132311</span>,</span><br><span class="line">    password: <span class="number">123456</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这样的参数是会出现在 <code>RequestPayload</code> 里的，python 后台无法通过 <code>request.form[&#39;phone&#39;]</code> 来获取参数，因此只能通过参数跟在 <strong>url</strong> 里的形式，如</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">let URL = <span class="string">'http://localhost:5000/app/login?'</span></span><br><span class="line">    + <span class="string">'phone='</span>+this<span class="selector-class">.User</span><span class="selector-class">.phone</span></span><br><span class="line">    + <span class="string">'&amp;password='</span>+this<span class="selector-class">.User</span><span class="selector-class">.password</span></span><br></pre></td></tr></table></figure>

<p>有个疑问，明明这里指定了 <code>Content-Type</code> 为 <code>application/x-www-form-urlencoded</code> 但是实际请求的时候却是无效的，显示的依旧是 <code>text/html; charset=utf-8</code>。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>ionic3</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot aop 面向切面编程</title>
    <url>/2017/09/14/2017-9-14-springboot-aop/</url>
    <content><![CDATA[<ul>
<li>在pom.xml文件中引入AOP依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<hr>
<ul>
<li>使用@Aspect注解将一个java类定义为切面类</li>
<li>使用@Pointcut定义一个切入点，可以是一个规则表达式，比如下例中某个package下的所有函数，也可以是一个注解等。</li>
<li>根据需要在切入点不同位置的切入内容<ul>
<li>使用<strong>@Before</strong>在切入点开始处切入内容</li>
<li>使用<strong>@After</strong>在切入点结尾处切入内容</li>
<li>使用<strong>@AfterReturning</strong>在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）</li>
<li>使用<strong>@Around</strong>在切入点前后切入内容，并自己控制何时执行切入点自身的内容</li>
<li>使用<strong>@AfterThrowing</strong>用来处理当切入内容部分抛出异常之后的处理逻辑</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskAop</span> </span>&#123;</span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* flybear.hziee.app.service.TaskService.save*(..)) &amp;&amp;"</span>+<span class="string">"args(task,..)"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addlog</span><span class="params">(Task task)</span></span>&#123;</span><br><span class="line">		HttpServletRequest request = ((ServletRequestAttributes) </span><br><span class="line">	        RequestContextHolder.getRequestAttributes()).getRequest();    </span><br><span class="line">	    HttpSession session = request.getSession();</span><br><span class="line">	    Row user=(Row) session.getAttribute(<span class="string">"userinfo"</span>);</span><br><span class="line">	    String content= user.getString(<span class="string">"username"</span>)+<span class="string">"创建了"</span>+task.getName();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）</span></span><br><span class="line">	<span class="meta">@AfterReturning</span>(pointcut=<span class="string">"execution(* flybear.hziee.app.service.UserService.Userinfo*(..)) "</span>, returning=<span class="string">"retVal"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginlog</span><span class="params">(Object retVal)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>Spring AOP无法拦截内部方法调用解决办法</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TaskService &#123;</span><br><span class="line">    <span class="comment">// 获取代理 截取内部方法</span></span><br><span class="line">    <span class="keyword">private</span> TaskService getService()&#123;  </span><br><span class="line">        <span class="keyword">return</span> AopContext.currentProxy() != <span class="keyword">null</span> ? </span><br><span class="line">            (TaskService)AopContext.currentProxy() : <span class="keyword">this</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> submit(<span class="keyword">int</span> taskId, <span class="keyword">int</span> status, String info) &#123;</span><br><span class="line">        <span class="keyword">Task</span> <span class="keyword">task</span> = findById(taskId);</span><br><span class="line">        <span class="keyword">task</span>.setStatus(status);</span><br><span class="line">        <span class="comment">// 用内部方法时，先调用该方法</span></span><br><span class="line">        <span class="keyword">int</span> i = getService().update(<span class="keyword">task</span>);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>springboot在application.java 入口加入注解</li>
</ul>
<p><code>@EnableAspectJAutoProxy(proxyTargetClass = true,exposeProxy = true)</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Application.java</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="literal">true</span>,exposeProxy = <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span>&#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">		SpringApplication.run(Application.<span class="keyword">class</span>, args);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax跨域请求</title>
    <url>/2017/08/05/2017-07-11-ajax-cross-domain/</url>
    <content><![CDATA[<p>早些时候就听学长说关于跨域的事，虽然一直没遇到过这类问题，但是对跨域却是早有耳闻。</p>
<p>跨域问题的出现是因为浏览器同源政策。</p>
<ul>
<li>协议相同</li>
<li>域名相同</li>
<li>端口相同</li>
</ul>
<a id="more"></a>

<hr>
<p>这次暑假留校，做类似智能家居的app，为了降低开发成本，采用h5开发app，并且使用的是jQuery Mobile的框架。连接后台的方式倒是和一般网页一致。</p>
<p>app端全部采用ajax的方式提交以及获取数据。第一次获取数据时，就出现了跨域的问题。</p>
<p><img src="1.png" alt="跨域问题"></p>
<p>然后 去网上找资料，ajax如何跨域，有大牛写的挺全面， <a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">浏览器同源政策及其规避方法</a>  我这就只记录下 通过jsonp的形式请求spring的后台，并返回jsonp格式的数据。</p>
<blockquote>
<p>首先很重要的一点是 jsonp 只接受 GET 请求。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"localhost:9090/app/login"</span>,</span><br><span class="line">    type: <span class="string">'GET'</span>,</span><br><span class="line">    jsonp: <span class="string">"callback"</span>,</span><br><span class="line">    dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        account: account,</span><br><span class="line">        passwd: passwd</span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data.status===<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'登录成功'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'登录失败'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>返回的数据类型 <code>datatype</code> 是 <code>jsonp</code>。</li>
<li>然后通过 <code>jsonp</code> 来指定回调函数。</li>
<li><code>type</code> 指定为 <code>GET</code> 请求。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"login"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span>  <span class="comment">// 转换为指定格式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 获取回调函数</span></span><br><span class="line">   String callback = req.getParameter(<span class="string">"callback"</span>);</span><br><span class="line">   String account = req.getParameter(<span class="string">"account"</span>);</span><br><span class="line">   String passwd = req.getParameter(<span class="string">"passwd"</span>);</span><br><span class="line">   User user = userService.checkLogin(account,passwd);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 将java对象转换成json字符串，这里用的是fastjson里的方法。</span></span><br><span class="line">   String jsonString = JSONObject.toJSONString(user);</span><br><span class="line">   <span class="comment">// 因为返回的数据类型是jsonp而不是json，因此需要转换下，</span></span><br><span class="line">   <span class="comment">// 在json字符串外 套上获取的回调函数</span></span><br><span class="line">   <span class="keyword">return</span> callback + <span class="string">"("</span> + jsonString + <span class="string">")"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果直接返回json字符串，会直接进入ajax的error的方法里，因为传回的数据格式和指定的不一致。</p>
</blockquote>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是返回的response的内容</span></span><br><span class="line"><span class="comment">// jQuery183014047024586768142_1499770090335 是随机生成的回调函数名。</span></span><br><span class="line">jQuery183014047024586768142_1499770090335(&#123;</span><br><span class="line">    <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">"username"</span>:<span class="string">"admin"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="react-jsonp实现跨域请求"><a href="#react-jsonp实现跨域请求" class="headerlink" title="react jsonp实现跨域请求"></a>react jsonp实现跨域请求</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="keyword">fetch</span>-jsonp</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fetchJsonp <span class="keyword">from</span> <span class="string">'fetch-jsonp'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表单异步提交</span></span><br><span class="line">handleSubmit(e) &#123;</span><br><span class="line">    fetchJsonp(<span class="string">'http://localhost:9090/app/login?account=admin&amp;passwd=123456'</span>)</span><br><span class="line">       .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> response.json();</span><br><span class="line">       &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123; <span class="comment">// 转成json字符串</span></span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'parsed json'</span>, json)</span><br><span class="line">       &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">ex</span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'parsing failed'</span>, ex)</span><br><span class="line">       &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>ajax</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>fetch spring前后端解决跨域问题</title>
    <url>/2017/08/05/2017-8-3-fetch-cross-domain/</url>
    <content><![CDATA[<p>初次学习的react的表单提交，选择用新的技术 fetch 来实现异步表单提交。</p>
<p>fetch在旧版本的浏览器上兼容性不佳，特别是IE系的浏览器。但是现在有第三方插件可以很好的提升浏览器的兼容性。</p>
<p>因为浏览器的同源政策，这里也同样遇到了跨域的问题，之前是通过jsonp来解决的，这次通过设置服务器的CORS（跨域资源共享）来解决跨域问题。</p>
<a id="more"></a>

<h3 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React表单异步提交</span></span><br><span class="line">handleSubmit(e) &#123;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">let</span> myHeaders = <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">        <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>, </span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    fetch(<span class="string">'http://localhost:9090/app/login?account=admin&amp;passwd=123456'</span>, &#123;</span><br><span class="line">        method: <span class="string">'POST'</span>,</span><br><span class="line">        headers: myHeaders,</span><br><span class="line">        mode: <span class="string">'cors'</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> response.json()).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(json);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h3><p>spring MVC 4 解决方案</p>
<h4 id="全局实现"><a href="#全局实现" class="headerlink" title="全局实现"></a>全局实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flybear.hziee.app.conf;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 该注解不一定需要，看环境是如何配置的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义一个类继承 WebMvcConfigurerAdapter</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123; </span><br><span class="line">    	registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line">        .allowedHeaders(<span class="string">"*"</span>)</span><br><span class="line">        .allowedMethods(<span class="string">"*"</span>)</span><br><span class="line">        .allowedOrigins(<span class="string">"*"</span>);</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>环境配置的不同，这里可能还需要将该类加入到bean容器中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"flybear.hziee.app.conf.WebMvcConfig"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="使用注解，单个方法"><a href="#使用注解，单个方法" class="headerlink" title="使用注解，单个方法"></a>使用注解，单个方法</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(origins = <span class="meta-string">"*"</span>)</span> <span class="comment">// 在方法名前使用该注解</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给单个方法设置CORS</span></span><br><span class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"*"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> jsonString; <span class="comment">// 返回json字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="一般做法"><a href="#一般做法" class="headerlink" title="一般做法"></a>一般做法</h4><p>一般的解决方式就是配置一个Filter过滤器，将需要跨域的请求拦截下来，给请求头加上必要信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myCORSFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123; </span><br><span class="line">        HttpServletResponse httpResponse = (HttpServletResponse) response; </span><br><span class="line">        httpResponse.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>); </span><br><span class="line">        httpResponse.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, OPTIONS, DELETE"</span>); </span><br><span class="line">        httpResponse.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>); </span><br><span class="line">        httpResponse.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"x-requested-with,Authorization"</span>); </span><br><span class="line">        httpResponse.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>,<span class="string">"true"</span>); </span><br><span class="line">        filterChain.doFilter(request, response); </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再在web.xml中进行设置</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;filter&gt;</span> </span><br><span class="line">    <span class="params">&lt;filter-name&gt;</span>cors<span class="params">&lt;/filter-name&gt;</span> </span><br><span class="line">    <span class="params">&lt;filter-class&gt;</span>·CLASS_PATH·.myeCORSFilter<span class="params">&lt;/filter-class&gt;</span> </span><br><span class="line"><span class="params">&lt;/filter&gt;</span> </span><br><span class="line"><span class="params">&lt;filter-mapping&gt;</span> </span><br><span class="line">    <span class="params">&lt;filter-name&gt;</span>cors<span class="params">&lt;/filter-name&gt;</span> </span><br><span class="line">    <span class="params">&lt;url-pattern&gt;</span><span class="meta-keyword">/api/</span>*<span class="params">&lt;/url-pattern&gt;</span> </span><br><span class="line"><span class="params">&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样设置之后ajax不需要修改，直接请求就行了，fetch也一样，甚至不需要额外设置header，就能正常请求到服务器的数据。</p>
<p>设置服务器CORS的方式对前后端的代码改动较少，且相对jsonp来说支持POST提交的方式，是一种很好的解决跨域问题的解决方式。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>fetch</tag>
      </tags>
  </entry>
  <entry>
    <title>sass学习小记</title>
    <url>/2017/07/17/2017-7-17-sass/</url>
    <content><![CDATA[<p>sass存在两种后缀的文件，一种是早些的.sass，是以缩进和换行来区分代码块，不是很方便。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// .sass</span><br><span class="line">$color: red</span><br><span class="line"></span><br><span class="line">.button</span><br><span class="line">    color: $color;</span><br></pre></td></tr></table></figure>

<p>另一种是.scss，是后来的sass版本出现的新的语法，和css的写法很类似，用<code>{}</code>来包含代码块。我们甚至可以直接把后缀<code>.css</code>的文件直接转成<code>.scss</code>也能使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// .scss</span><br><span class="line">$color:red;</span><br><span class="line"></span><br><span class="line">.button&#123;</span><br><span class="line">    color: $color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>sass提供四种编译风格的选项。</p>
<ul>
<li>nested：嵌套缩进的css代码</li>
<li>expanded：没有缩进的、扩展的css代码。默认值</li>
<li>compact：简洁格式的css代码。</li>
<li>compressed：压缩后的css代码。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// nested   嵌套缩进的css代码</span><br><span class="line">nav ul &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  list-style: none; &#125;</span><br><span class="line"></span><br><span class="line">// expanded   嵌套输出方式，默认值</span><br><span class="line">nav ul &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// compact  简洁格式的css代码。</span><br><span class="line">nav ul &#123; margin: 0; padding: 0; list-style: none; &#125;</span><br><span class="line"></span><br><span class="line">// compressed  没有缩进的、扩展的css代码。适合生产环境</span><br><span class="line">nav ul &#123;margin:0;padding:0;list-style:none&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="sass语法"><a href="#sass语法" class="headerlink" title="sass语法"></a>sass语法</h3><h4 id="可嵌套"><a href="#可嵌套" class="headerlink" title="可嵌套"></a>可嵌套</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.header&#123;</span><br><span class="line"></span><br><span class="line">    .button&#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a&#123;</span><br><span class="line">        // 伪类嵌套</span><br><span class="line">        // &amp;是父元素选择器</span><br><span class="line">        &amp;: hover&#123;</span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 属性嵌套</span><br><span class="line">    h1&#123;</span><br><span class="line">        font:&#123;</span><br><span class="line">            size: 12px;</span><br><span class="line">            weight: bold;</span><br><span class="line">            family: &apos;Consolas&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="混合宏-mixin"><a href="#混合宏-mixin" class="headerlink" title="混合宏 @mixin"></a>混合宏 @mixin</h4><blockquote>
<p>如果需要给类传参数，就可以选择混合宏。</p>
</blockquote>
<h5 id="不带参数混合宏"><a href="#不带参数混合宏" class="headerlink" title="不带参数混合宏"></a>不带参数混合宏</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@mixin border-radius&#123;</span><br><span class="line">    -webkit-border-radius: 5px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用混合宏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">button &#123;</span><br><span class="line">    @include border-radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="带参数混合宏，且参数带有默认值。"><a href="#带参数混合宏，且参数带有默认值。" class="headerlink" title="带参数混合宏，且参数带有默认值。"></a>带参数混合宏，且参数带有默认值。</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@mixin border($radius)&#123;</span><br><span class="line">    border-radius: $radius;</span><br><span class="line">&#125;</span><br><span class="line">@mixin border-radius($radius: 5px)&#123;</span><br><span class="line">    border-radius: $radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用带参数混合宏的两种方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.btn&#123;</span><br><span class="line">    @include border(3px);</span><br><span class="line">&#125;</span><br><span class="line">.button &#123;</span><br><span class="line">    // 默认是5</span><br><span class="line">    @include border-radius();</span><br><span class="line">&#125;</span><br><span class="line">.button2 &#123;</span><br><span class="line">    // 输出是10px;</span><br><span class="line">    @include border-radius(10px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="传多个参数"><a href="#传多个参数" class="headerlink" title="传多个参数"></a>传多个参数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@mixin box-shadow($shadows...)&#123;</span><br><span class="line">  @if length($shadows) &gt;= 1 &#123;</span><br><span class="line">    box-shadow: $shadows;</span><br><span class="line">  &#125; @else &#123;</span><br><span class="line">    $shadows: 0 0 2px rgba(#000,.25);</span><br><span class="line">    box-shadow: $shadow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="继承-extend"><a href="#继承-extend" class="headerlink" title="继承 @extend"></a>继承 @extend</h4><blockquote>
<p>继承适用于被继承的小组件也需要使用的情况下，因为被继承的组件也会输出到.css中。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.btn &#123;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.btn-primary &#123;</span><br><span class="line">    // 继承.btn的属性</span><br><span class="line">    @extend .btn;</span><br><span class="line">    background-color: #f36;</span><br><span class="line">    color: #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="占位符"><a href="#占位符" class="headerlink" title="占位符 %"></a>占位符 %</h4><blockquote>
<p>如果一个类只是用来给别的类继承的，就可以用占位符，不用继承。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 下方这块代码如果没有被 @extend调用，就不会产生任何代码块。</span><br><span class="line">%color5 &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.btn &#123;</span><br><span class="line">  @extend %color5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释，只能在scss文件中可见，编译后被省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多行注释，在编译后的.css文件也可见，除了compressed压缩编译之外 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">    重要注释，即使是压缩模式，也会保留这段注释，一般用于声明版权信息。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h3><p>插入外部的css文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import &quot;path/filename.scss&quot;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack 3.3.0 学习小记</title>
    <url>/2017/07/16/2017-07-16-webpack-learn/</url>
    <content><![CDATA[<p>暑假打算借着留校的机会 学下react，在学react之前，想学下webpack，之后有空可以再细看gulp这类打包工具。初学，记一篇博文，也算巩固下所学。</p>
<hr>
<a id="more"></a>

<p>先附上<a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack官网</a></p>
<p>进入项目目录，我们用npm包管理器</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> init</span><br><span class="line"></span><br><span class="line"><span class="built_in">npm</span> install webpack --save-dev</span><br></pre></td></tr></table></figure>

<p>然后在根路径下新建<code>webpack.config.js</code> （webpack配置文件）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,                  <span class="comment">// 入口文件</span></span><br><span class="line">  output: &#123;                                 <span class="comment">// 打包输出配置</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,                  <span class="comment">// 输出文件名</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)   <span class="comment">// 必须用绝对路径</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里要提下， <code>output-&gt;path</code> 的值，老版本的webpack里是可以用相对路径的，但在新版本中要官方要求用绝对路径，不然打包会报错，但是绝对路径也不能写死，我们就在文件头部引入 path，如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br></pre></td></tr></table></figure>

<p>path是node的内置模块，直接引入就能使用了，然后在通过</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">path</span><span class="selector-class">.resolve</span>(__dirname, <span class="string">'dist'</span>)</span><br></pre></td></tr></table></figure>

<p>获取到根路径下的<code>/dist</code>文件路径。</p>
<p><code>output-&gt;filename</code>有很多变量可以加入，例如<code>[name]-[chunkhash:5].js</code></p>
<table>
<thead>
<tr>
<th>template</th>
<th>Desciption</th>
</tr>
</thead>
<tbody><tr>
<td>[hash]</td>
<td>模块标识符的hash（每次构建都不同）</td>
</tr>
<tr>
<td>[chunkhash]</td>
<td>chunk内容的hash（只有当文件打包的内容发生改变，才会不同）</td>
</tr>
<tr>
<td>[name]</td>
<td>模块名称</td>
</tr>
<tr>
<td>[id]</td>
<td>模块标识符</td>
</tr>
<tr>
<td>[file]</td>
<td>模块文件名称</td>
</tr>
<tr>
<td>[filebase]</td>
<td>模块的basename</td>
</tr>
<tr>
<td>[query]</td>
<td>模块的query</td>
</tr>
</tbody></table>
<hr>
<p>webpack插件 plugin</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> CleanPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: <span class="string">'./src/index.js'</span>,</span><br><span class="line">        join: <span class="string">'./src/join.js'</span>,</span><br><span class="line">        vendor: [<span class="string">'jquery'</span>, <span class="string">'mustache'</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 可以将确定的第三方文件都打包到主入口文件中，</span></span><br><span class="line">        <span class="comment">// 这样就不需要在别的模块引入公用的文件。例如jquery</span></span><br><span class="line">        <span class="comment">// 在entry（入口） vendor中加入公用的第三方文件的名称</span></span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            name: [<span class="string">"vendor"</span>],</span><br><span class="line">            minChunks: <span class="number">2</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 可以使用我们自己的模板，并自动把打包好的js文件引入模板。</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'index.html'</span>,     <span class="comment">// 导出的文件名</span></span><br><span class="line">            template: <span class="string">'./index.html'</span>,   <span class="comment">// 模板位置</span></span><br><span class="line">            inject: <span class="string">'body'</span>,     <span class="comment">// 插入js的位置 header|body</span></span><br><span class="line">            minify: &#123;</span><br><span class="line">                removeComments: <span class="literal">true</span>,   <span class="comment">// 删除注释</span></span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,   <span class="comment">// 删除空格</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="comment">//根据模板插入css/js等生成最终HTML</span></span><br><span class="line">            filename: <span class="string">'join.html'</span>, <span class="comment">//生成的html存放路径，相对于path</span></span><br><span class="line">            template: <span class="string">'./join.html'</span>, <span class="comment">//html模板路径</span></span><br><span class="line">            inject: <span class="string">'body'</span>, <span class="comment">//js插入的位置，true/'head'/'body'/false</span></span><br><span class="line">            minify: &#123; <span class="comment">//压缩HTML文件  </span></span><br><span class="line">                removeComments: <span class="literal">true</span>, <span class="comment">//移除HTML中的注释</span></span><br><span class="line">                collapseWhitespace: <span class="literal">false</span> <span class="comment">//删除空白符与换行符</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 每次打包之前，先清空导出的文件夹</span></span><br><span class="line">        <span class="keyword">new</span> CleanPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>因为webpack只能处理js，我们需要引入很多loader来处理诸如.css、.scss、.less、.png、.jsx…..</p>
<p>具体需要如何配置也可以去<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm官网</a>搜索</p>
<h4 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a><a href="https://www.npmjs.com/package/babel-loader" target="_blank" rel="noopener">babel-loader</a></h4><p>第一个我们需要<code>babel-loader</code>来转化我们的js代码，让我们能够用上最新的javascript的语法，而不用等待浏览器支持。</p>
<p>我们需要先在项目根目录下运行命令行，</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span>--save-dev <span class="keyword">babel-loader </span><span class="keyword">babel-core </span><span class="keyword">babel-preset-env </span>webpack</span><br></pre></td></tr></table></figure>

<p>在webpack.config.js中配置<code>module</code></p>
<p>这是最新的loader配置的写法，有些博客写的webpack版本老，写法不太一样。但只要参照<a href="https://webpack.js.org/loaders/babel-loader/" target="_blank" rel="noopener">官网的配置方式</a>肯定没问题。所以学会一门技术，最好的方式就是直接去查看官方文档，而且现在技术迭代很快，半年可能就会有个大版本更新，一般的博文都会有滞后的问题。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        <span class="built_in">index</span>: <span class="string">'./src/index.js'</span>,</span><br><span class="line">        <span class="keyword">join</span>: <span class="string">'./src/join.js'</span>,</span><br><span class="line">        vendor: [<span class="string">'jquery'</span>, <span class="string">'mustache'</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    outpu<span class="variable">t:</span> &#123;</span><br><span class="line">        filename: production ? <span class="string">'js/[name]-[hash].js'</span> : <span class="string">'js/[name]-bundle.js'</span>,</span><br><span class="line">        path: path.<span class="built_in">resolve</span>(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: path.<span class="built_in">resolve</span>(__dirname, <span class="string">'dist/builds'</span>),</span><br><span class="line">        chunkFilename: <span class="string">'js/[name].[chunkhash:5].chunk.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">       rule<span class="variable">s:</span> [&#123;</span><br><span class="line">           tes<span class="variable">t:</span> /\.js$/,   </span><br><span class="line">           exclude: /(node_modules|bower_components)/, </span><br><span class="line">           include: path.<span class="built_in">resolve</span>(__dirname, <span class="string">'src/Components/js'</span>),</span><br><span class="line">           use: &#123;</span><br><span class="line">               loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">               option<span class="variable">s:</span> &#123;</span><br><span class="line">                   preset<span class="variable">s:</span> [<span class="string">'env'</span>]</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>module-&gt;rules</code>里可以配置多个loader。解释下里面的一些主要配置信息：</p>
<ul>
<li><p><code>text</code> 正则匹配需要loader处理的文件</p>
</li>
<li><p><code>exclude</code> 排除需要处理的文件夹或文件，因为每次loader都会查找项目下所有匹配的文件，很耗时，有些文件我们不需要loader处理，就在这里进行排除。</p>
</li>
<li><p><code>include</code> 对应的 这是只处理我们需要loader处理的文件或文件夹</p>
</li>
<li><p><code>use</code>具体使用的loader信息及配置，可同时配置多个loader来处理同一种文件类型。</p>
</li>
<li><p><a href="https://www.npmjs.com/package/style-loader" target="_blank" rel="noopener">style-loader</a> 将css以style标签引入到网页中。</p>
</li>
<li><p><a href="https://www.npmjs.com/package/css-loader" target="_blank" rel="noopener">css-loader</a> 转换css到js文件里。</p>
</li>
<li><p><a href="https://www.npmjs.com/package/postcss-loader" target="_blank" rel="noopener">postcss-loader</a> 可以自动为一些属性加上浏览器前缀。</p>
</li>
</ul>
<p><code>postcss-loader</code>的配置需要提下，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">   use: [</span><br><span class="line">     &#123;</span><br><span class="line">       loader: <span class="string">'style-loader'</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       loader: <span class="string">'css-loader'</span>,</span><br><span class="line">       options: &#123;</span><br><span class="line">           modules: <span class="literal">true</span>, <span class="comment">// 启动css模块</span></span><br><span class="line">           importLoaders: <span class="number">1</span>, <span class="comment">// 在 css-loader 前应用的 loader 的数量</span></span><br><span class="line">           localIdentName: <span class="string">'[path][name]__[local]--[hash:base64:5]'</span>, <span class="comment">// 配置生成的标识符</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">       options: &#123;</span><br><span class="line">         config: &#123;</span><br><span class="line">           path: <span class="string">'./postcss.config.js'</span> <span class="comment">// 和webpack.config.js同目录的配置文件</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>) <span class="comment">// 自动添加浏览器前缀的插件</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.npmjs.com/package/sass-loader" target="_blank" rel="noopener">sass-loader</a></li>
<li><a href="https://www.npmjs.com/package/file-loader" target="_blank" rel="noopener">file-loader</a> 可以处理照片类的文件。</li>
<li><a href="https://www.npmjs.com/package/url-loader" target="_blank" rel="noopener">url-loader</a> 和file-loader功能类似，还能设置<code>limit</code>，可以将少于这个大小的文件转换成Base64编码直接嵌入网页中，可以减少http请求，但是会增加网页的大小。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span>  <span class="comment">// 单位是B，字节</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.npmjs.com/package/html-loader" target="_blank" rel="noopener">html-loader</a></li>
</ul>
<hr>
<h3 id="require-ensure-按需加载"><a href="#require-ensure-按需加载" class="headerlink" title="require.ensure() 按需加载"></a>require.ensure() 按需加载</h3><p><code>require.ensure(dependencies: String[], callback: function(require), errorCallback: function(error), chunkName: String)</code></p>
<p>有些组件不是一开始就需要的，而且一开始就加载会影响加载速度，影响用户体验，因此我们可以使用按需加载的形式，等需要了再通过ajax将模块加载进来。</p>
<blockquote>
<p>之前很多博客提到第三个参数是设定块的名称，但实际上在新版本使用时，第四个参数才是设定块(chunk)的名称。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.ensure([], () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 引入Button组件</span></span><br><span class="line">    <span class="keyword">const</span> Button = <span class="built_in">require</span>(<span class="string">'./Components/Button'</span>);</span><br><span class="line">    <span class="keyword">const</span> button = <span class="keyword">new</span> Button(<span class="string">'google.com'</span>);</span><br><span class="line"></span><br><span class="line">    button.render(<span class="string">'a'</span>);</span><br><span class="line">&#125;, () =&gt; &#123;&#125;, <span class="string">'button'</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>phonegap 使用方法</title>
    <url>/2017/07/12/2017-7-12-phonegap/</url>
    <content><![CDATA[<blockquote>
<p>提醒广大的Mac党，如果执行命令的时候 遇到问题，在每个命令的最前面加上 <code>sudo</code>，以管理员权限运行可以解决很多因权限不够产生的问题。</p>
</blockquote>
<a id="more"></a>

<h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><p>开始之前，有几个基本软件需要提前安装：</p>
<ul>
<li>Node.js – JavaScript 运行时工具，用于编译 JavaScript 代码</li>
<li>git – PhoneGap CLI 使用它在后台下载需要的资源。它已经预装在某些系统里面，你可以输入“git”命令查看是否已经被安装。</li>
</ul>
<h2 id="二、安装-PhoneGap-CLI"><a href="#二、安装-PhoneGap-CLI" class="headerlink" title="二、安装 PhoneGap CLI"></a>二、安装 PhoneGap CLI</h2><p><code>npm install -g phonegap</code></p>
<h2 id="三、创建-PhoneGap-项目"><a href="#三、创建-PhoneGap-项目" class="headerlink" title="三、创建 PhoneGap 项目"></a>三、创建 PhoneGap 项目</h2><p>PhoneGap CLI 为初学者准备了一个默认的 Hello World 项目。通过这个项目，可以简单快捷的理解怎么构建一个移动 PhoneGap 应用。让我们使用 CLI 来创建一个默认项目。</p>
<p>1、在命令窗口执行以下命令：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">phonegap create myApp</span></span><br></pre></td></tr></table></figure>

<p>2、验证命令的执行结果</p>
<p>如果项目创建成功会显示下列信息：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Creating a <span class="keyword">new</span> cordova <span class="keyword">project</span>.</span><br></pre></td></tr></table></figure>

<p>3、进入新建的项目目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> myApp/</span><br></pre></td></tr></table></figure>

<p>4、确认目录下包含以下文件和子目录</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">hooks</span><br><span class="line">platforms</span><br><span class="line">plugins</span><br><span class="line">www</span><br><span class="line"><span class="built_in">config</span>.xml</span><br></pre></td></tr></table></figure>

<p>5、进入 www 目录可以一些文件和子目录，它们就是 app 的内容，其中 index.html 文件是访问入口。后面的开发工作主要就在这个 www 目录下进行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> www/</span><br></pre></td></tr></table></figure>

<h2 id="四、启动预览服务"><a href="#四、启动预览服务" class="headerlink" title="四、启动预览服务"></a>四、启动预览服务</h2><p>PhoneGap CLI 有一个 serve 命令可以启动一个小型的 web 服务器，用于在桌面浏览器和移动设备中预览项目。</p>
<p>进入项目根目录，执行 $ phonegap serve 命令，你将得到用于预览的服务器地址（如 192.168.1.11:3000）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">phonegap</span> <span class="selector-tag">serve</span></span><br><span class="line"><span class="selector-attr">[phonegap]</span> <span class="selector-tag">starting</span> <span class="selector-tag">app</span> <span class="selector-tag">server</span>...</span><br><span class="line"><span class="selector-attr">[phonegap]</span> <span class="selector-tag">listening</span> <span class="selector-tag">on</span> 192<span class="selector-class">.168</span><span class="selector-class">.191</span><span class="selector-class">.1</span><span class="selector-pseudo">:3000</span></span><br><span class="line"><span class="selector-attr">[phonegap]</span> <span class="selector-tag">listening</span> <span class="selector-tag">on</span> 10<span class="selector-class">.0</span><span class="selector-class">.151</span><span class="selector-class">.244</span><span class="selector-pseudo">:3000</span></span><br><span class="line"><span class="selector-attr">[phonegap]</span> <span class="selector-tag">listening</span> <span class="selector-tag">on</span> 192<span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.110</span><span class="selector-pseudo">:3000</span></span><br><span class="line"><span class="selector-attr">[phonegap]</span></span><br><span class="line"><span class="selector-attr">[phonegap]</span> <span class="selector-tag">ctrl-c</span> <span class="selector-tag">to</span> <span class="selector-tag">stop</span> <span class="selector-tag">the</span> <span class="selector-tag">server</span></span><br><span class="line"><span class="selector-attr">[phonegap]</span></span><br></pre></td></tr></table></figure>

<h2 id="六、编译、打包和发布产品"><a href="#六、编译、打包和发布产品" class="headerlink" title="六、编译、打包和发布产品"></a>六、编译、打包和发布产品</h2><p>运行ios <code>phonegap run ios</code></p>
<p>运行android <code>phonegap run android</code></p>
<p>打包ios <code>phonegap build ios</code></p>
<p>打包apk <code>phonegap build android</code></p>
<p>如何找到apk</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">MyApp</span> &gt; platforms &gt; <span class="keyword">android </span>&gt; <span class="keyword">build </span>&gt; outputs &gt; apk &gt; <span class="keyword">android-debug.apk</span></span><br></pre></td></tr></table></figure>

<p><img src="2.png" alt="android apk路径"></p>
<p>如果要修改app的名字之类的信息，需要在根目录下的 <code>config.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">'1.0'</span> encoding=<span class="string">'utf-8'</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">widget</span> <span class="attr">id</span>=<span class="string">"hdu.edu.smartAPP"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/ns/widgets"</span> <span class="attr">xmlns:gap</span>=<span class="string">"http://phonegap.com/ns/1.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- app的名字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SmartAPP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">        空气净化器智能APP</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span> <span class="attr">email</span>=<span class="string">"xiaotang188@gmail.com"</span> <span class="attr">href</span>=<span class="string">"http://zhizhi.tangliangdong.me"</span>&gt;</span></span><br><span class="line">        PhoneGap Team</span><br><span class="line">    <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">content</span> <span class="attr">src</span>=<span class="string">"index.html"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">preference</span> <span class="attr">name</span>=<span class="string">"DisallowOverscroll"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">preference</span> <span class="attr">name</span>=<span class="string">"android-minSdkVersion"</span> <span class="attr">value</span>=<span class="string">"19"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- android app的logo 和 启动页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">platform</span> <span class="attr">name</span>=<span class="string">"android"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">density</span>=<span class="string">"ldpi"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/android/drawable-ldpi-icon.png"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">density</span>=<span class="string">"mdpi"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/android/drawable-mdpi-icon.png"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">density</span>=<span class="string">"hdpi"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/android/drawable-hdpi-icon.png"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">density</span>=<span class="string">"xhdpi"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/android/drawable-xhdpi-icon.png"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">density</span>=<span class="string">"xxhdpi"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/android/drawable-xxhdpi-icon.png"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">density</span>=<span class="string">"xxxhdpi"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/android/drawable-xxxhdpi-icon.png"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"land-ldpi"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/android/drawable-land-ldpi-screen.png"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"land-mdpi"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/android/drawable-land-mdpi-screen.png"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"land-hdpi"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/android/drawable-land-hdpi-screen.png"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"port-ldpi"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/android/drawable-port-ldpi-screen.png"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"port-mdpi"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/android/drawable-port-mdpi-screen.png"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"port-hdpi"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/android/drawable-port-hdpi-screen.png"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"port-xhdpi"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/android/drawable-port-xhdpi-screen.png"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"port-xxhdpi"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/android/drawable-port-xxhdpi-screen.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">platform</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ios app的logo 和 启动页面  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">platform</span> <span class="attr">name</span>=<span class="string">"ios"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"57"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon.png"</span> <span class="attr">width</span>=<span class="string">"57"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"114"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon@2x.png"</span> <span class="attr">width</span>=<span class="string">"114"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"40"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-40.png"</span> <span class="attr">width</span>=<span class="string">"40"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"80"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-40@2x.png"</span> <span class="attr">width</span>=<span class="string">"80"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-50.png"</span> <span class="attr">width</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-50@2x.png"</span> <span class="attr">width</span>=<span class="string">"100"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"60"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-60.png"</span> <span class="attr">width</span>=<span class="string">"60"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"120"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-60@2x.png"</span> <span class="attr">width</span>=<span class="string">"120"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"180"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-60@3x.png"</span> <span class="attr">width</span>=<span class="string">"180"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"72"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-72.png"</span> <span class="attr">width</span>=<span class="string">"72"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"144"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-72@2x.png"</span> <span class="attr">width</span>=<span class="string">"144"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"76"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-76.png"</span> <span class="attr">width</span>=<span class="string">"76"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"152"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-76@2x.png"</span> <span class="attr">width</span>=<span class="string">"152"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"29"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-small.png"</span> <span class="attr">width</span>=<span class="string">"29"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"58"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-small@2x.png"</span> <span class="attr">width</span>=<span class="string">"58"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"87"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/ios/icon-small@3x.png"</span> <span class="attr">width</span>=<span class="string">"87"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">height</span>=<span class="string">"1136"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/ios/Default-568h@2x~iphone.png"</span> <span class="attr">width</span>=<span class="string">"640"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">height</span>=<span class="string">"1334"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/ios/Default-667h.png"</span> <span class="attr">width</span>=<span class="string">"750"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">height</span>=<span class="string">"2208"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/ios/Default-736h.png"</span> <span class="attr">width</span>=<span class="string">"1242"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">height</span>=<span class="string">"768"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/ios/Default-Landscape~ipad.png"</span> <span class="attr">width</span>=<span class="string">"1024"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">height</span>=<span class="string">"1024"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/ios/Default-Portrait~ipad.png"</span> <span class="attr">width</span>=<span class="string">"768"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">height</span>=<span class="string">"960"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/ios/Default@2x~iphone.png"</span> <span class="attr">width</span>=<span class="string">"640"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">height</span>=<span class="string">"480"</span> <span class="attr">platform</span>=<span class="string">"ios"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/ios/Default~iphone.png"</span> <span class="attr">width</span>=<span class="string">"320"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">platform</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- wp8 其实不用管  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">platform</span> <span class="attr">name</span>=<span class="string">"wp8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"99"</span> <span class="attr">platform</span>=<span class="string">"wp8"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/wp8/ApplicationIcon.png"</span> <span class="attr">width</span>=<span class="string">"99"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"159"</span> <span class="attr">platform</span>=<span class="string">"wp8"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/wp8/Background.png"</span> <span class="attr">width</span>=<span class="string">"159"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">height</span>=<span class="string">"1280"</span> <span class="attr">platform</span>=<span class="string">"wp8"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/wp8/screen-portrait.jpg"</span> <span class="attr">width</span>=<span class="string">"768"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">platform</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个也是不用管 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">platform</span> <span class="attr">name</span>=<span class="string">"windows"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"150"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/windows/Square150x150Logo.scale-100.png"</span> <span class="attr">width</span>=<span class="string">"150"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"30"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/windows/Square30x30Logo.scale-100.png"</span> <span class="attr">width</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/windows/StoreLogo.scale-100.png"</span> <span class="attr">width</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/windows/SplashScreen.scale-100.png"</span> <span class="attr">width</span>=<span class="string">"620"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"120"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/windows/StoreLogo.scale-240.png"</span> <span class="attr">width</span>=<span class="string">"120"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"44"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/windows/Square44x44Logo.scale-100.png"</span> <span class="attr">width</span>=<span class="string">"44"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"106"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/windows/Square44x44Logo.scale-240.png"</span> <span class="attr">width</span>=<span class="string">"106"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"70"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/windows/Square70x70Logo.scale-100.png"</span> <span class="attr">width</span>=<span class="string">"70"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"71"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/windows/Square71x71Logo.scale-100.png"</span> <span class="attr">width</span>=<span class="string">"71"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"170"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/windows/Square71x71Logo.scale-240.png"</span> <span class="attr">width</span>=<span class="string">"170"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"360"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/windows/Square150x150Logo.scale-240.png"</span> <span class="attr">width</span>=<span class="string">"360"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"310"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/windows/Square310x310Logo.scale-100.png"</span> <span class="attr">width</span>=<span class="string">"310"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"150"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/windows/Wide310x150Logo.scale-100.png"</span> <span class="attr">width</span>=<span class="string">"310"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">height</span>=<span class="string">"360"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/icon/windows/Wide310x150Logo.scale-240.png"</span> <span class="attr">width</span>=<span class="string">"744"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">splash</span> <span class="attr">height</span>=<span class="string">"1920"</span> <span class="attr">platform</span>=<span class="string">"windows"</span> <span class="attr">src</span>=<span class="string">"www/res/screen/windows/SplashScreenPhone.scale-240.png"</span> <span class="attr">width</span>=<span class="string">"1152"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">platform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">access</span> <span class="attr">origin</span>=<span class="string">"*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">"http://*/*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">"https://*/*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">"tel:*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">"sms:*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">"mailto:*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">"geo:*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">platform</span> <span class="attr">name</span>=<span class="string">"android"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">"market:*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">platform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">platform</span> <span class="attr">name</span>=<span class="string">"ios"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">"itms:*"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">"itms-apps:*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">platform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">engine</span> <span class="attr">name</span>=<span class="string">"ios"</span> <span class="attr">spec</span>=<span class="string">"~4.0.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-battery-status"</span> <span class="attr">spec</span>=<span class="string">"~1.1.1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-camera"</span> <span class="attr">spec</span>=<span class="string">"~2.1.1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-media-capture"</span> <span class="attr">spec</span>=<span class="string">"~1.2.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-console"</span> <span class="attr">spec</span>=<span class="string">"~1.0.2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-contacts"</span> <span class="attr">spec</span>=<span class="string">"~2.0.1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-device"</span> <span class="attr">spec</span>=<span class="string">"~1.1.1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-device-motion"</span> <span class="attr">spec</span>=<span class="string">"~1.2.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-device-orientation"</span> <span class="attr">spec</span>=<span class="string">"~1.0.2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-dialogs"</span> <span class="attr">spec</span>=<span class="string">"~1.2.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-file-transfer"</span> <span class="attr">spec</span>=<span class="string">"~1.5.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-geolocation"</span> <span class="attr">spec</span>=<span class="string">"~2.1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-globalization"</span> <span class="attr">spec</span>=<span class="string">"~1.0.3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-inappbrowser"</span> <span class="attr">spec</span>=<span class="string">"~1.3.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-media"</span> <span class="attr">spec</span>=<span class="string">"~2.2.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-network-information"</span> <span class="attr">spec</span>=<span class="string">"~1.2.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-splashscreen"</span> <span class="attr">spec</span>=<span class="string">"~3.2.1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-statusbar"</span> <span class="attr">spec</span>=<span class="string">"~2.1.2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-vibration"</span> <span class="attr">spec</span>=<span class="string">"~2.1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"cordova-plugin-whitelist"</span> <span class="attr">spec</span>=<span class="string">"~1.2.1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">engine</span> <span class="attr">name</span>=<span class="string">"android"</span> <span class="attr">spec</span>=<span class="string">"~6.1.2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们还需要设置app的图标和启动页，不可能用默认丑丑的图标和启动页，我们就得设置自己的一套logo和app启动页，</p>
<p><img src="1.png" alt="app图标和启动页的路径"></p>
<p>在 <code>www/res</code>路径下应该有两个文件夹：<code>icon</code>(app图标)、<code>screen</code>（app启动页）  <strong>没有就新建</strong></p>
<p>其下应该还有 <code>ios</code>、<code>android</code> 文件夹，就把之前根目录里提到的 app图标和启动页，比如这个</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;icon <span class="attribute">height</span>=<span class="string">"57"</span> <span class="attribute">platform</span>=<span class="string">"ios"</span> <span class="attribute">src</span>=<span class="string">"www/res/icon/ios/icon.png"</span> <span class="attribute">width</span>=<span class="string">"57"</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>路径是 <code>www/res/icon/ios/</code> 且是命名为 <code>icon.png</code>的图片，依次类推，</p>
<p>如果你要打包<code>android app</code> 那么，你就要保证在 <em>config.xml</em> 里被<code>&lt;platform name=&quot;android&quot;&gt;&lt;/platform&gt;</code>包裹的所有<code>&lt;icon&gt;&lt;/icon&gt;</code>和<code>&lt;splash&gt;&lt;/splash&gt;</code>的标签在相应的路径下 都能找到对应的图标或启动页，</p>
<p>不然的话 执行 <code>phonegap build android</code> 或 <code>phonegap build ios</code> 是会报错的，打包失败。</p>
<blockquote>
<p><code>config.xml</code> 里的 <code>&lt;icon&gt;&lt;/icon&gt;</code>对应app图标，<code>&lt;splash&gt;&lt;/splash&gt;</code> 对应app启动页</p>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>phonegap</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket 使用</title>
    <url>/2017/07/12/2017-7-12-websocket/</url>
    <content><![CDATA[<p>websocket 是服务器和客户端能够双向通信的协议。而且是支持跨域的。</p>
<a id="more"></a>

<p>在用jQuery Mobile做app的时候，老师要求在订单页用websocket连接后台。然后就去网上找websocket文档，发现用sockjs来实现的很多，因为websocket对浏览器兼容性不好，IE就只兼容10以上，这是无法接受的。所有就用sockjs来提交websocket的兼容性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成websocket连接的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">//链接SockJS 的endpoint 名称为"/endpointWisely"</span></span><br><span class="line">   <span class="keyword">var</span> socket = <span class="keyword">new</span> SockJS(<span class="string">'/endpointWisely'</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// var socket = new WebSocket("ws://localhost:9090/www");</span></span><br><span class="line">   <span class="comment">//使用stomp子协议的WebSocket 客户端</span></span><br><span class="line">   stompClient = Stomp.over(socket);</span><br><span class="line">   <span class="comment">//链接Web Socket的服务端。</span></span><br><span class="line">   stompClient.connect(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">frame</span>) </span>&#123;</span><br><span class="line">       setConnected(<span class="literal">true</span>);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'Connected: '</span> + frame);</span><br><span class="line">       <span class="comment">//订阅/topic/getResponse 目标发送的消息。这个是在控制器的@SendTo中定义的。</span></span><br><span class="line">       stompClient.subscribe(<span class="string">'/topic/getResponse'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">respnose</span>) </span>&#123;</span><br><span class="line">           showResponse(<span class="built_in">JSON</span>.parse(respnose.body).responseMessage);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为 <code>var socket = new SockJS(&#39;/endpointWisely&#39;);</code> 这句话采用的是ajax请求，但是ajax请求会有跨域的问题。</p>
<p>因此还是选择用最原始的方式来实现websocket。</p>
<hr>
<h3 id="服务端代码-MyWebSocket-java"><a href="#服务端代码-MyWebSocket-java" class="headerlink" title="服务端代码 MyWebSocket.java"></a>服务端代码 <code>MyWebSocket.java</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyWebSocket.java</span></span><br><span class="line"><span class="keyword">package</span> flybear.hziee.app.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/websocket"</span>)</span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSocket</span>  </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;MyWebSocket&gt; webSocketSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyWebSocket instance;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单例模式，获取唯一的websocket。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyWebSocket <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                         <span class="comment">//Single Checked</span></span><br><span class="line">            <span class="keyword">synchronized</span> (MyWebSocket.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                 <span class="comment">//Double Checked</span></span><br><span class="line">                    instance = <span class="keyword">new</span> MyWebSocket();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 与客户端产生连接的时候调用</span></span><br><span class="line">    <span class="meta">@OnOpen</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span> <span class="params">(Session session)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.session = session;  </span><br><span class="line">        webSocketSet.add(<span class="keyword">this</span>);  </span><br><span class="line">        addOnlineCount();  </span><br><span class="line">        System.out.println(<span class="string">"有新链接加入!当前在线人数为"</span> + getOnlineCount());  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 与客户端关闭连接的时候调用</span></span><br><span class="line">    <span class="meta">@OnClose</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span> <span class="params">()</span></span>&#123;  </span><br><span class="line">        webSocketSet.remove(<span class="keyword">this</span>);  </span><br><span class="line">        subOnlineCount();  </span><br><span class="line">        System.out.println(<span class="string">"有一链接关闭!当前在线人数为"</span> + getOnlineCount());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 接收到客户端的消息时调用</span></span><br><span class="line">    <span class="meta">@OnMessage</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span> <span class="params">(String message, Session session)</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"来自客户端的消息:"</span> + message);  </span><br><span class="line">        <span class="comment">// 给客户端群发消息  </span></span><br><span class="line">        <span class="keyword">for</span> ( MyWebSocket item : webSocketSet )&#123;</span><br><span class="line">            item.sendMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 服务器向客户端发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span> <span class="params">(String message)</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.session.getBasicRemote().sendText(message);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回所有的websocket连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CopyOnWriteArraySet&lt;MyWebSocket&gt; <span class="title">getWebSocketSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> webSocketSet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注解<code>@ServerEndpoint(&quot;/websocket&quot;)</code>可以将一个普通Java对象（POJO）使用<code>＠ServerEndpoint</code>作为WebSocket服务器的端点 。</p>
<p>客户端就能通过<code>var ws = new WebSocket(&quot;ws://localhost:9090/websocket&quot;);</code>发起对服务器的websocket连接。</p>
<hr>
<h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 与服务器产生websocket连接</span></span><br><span class="line">    <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:9090/websocket"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过websocket向服务器发送数据</span></span><br><span class="line">    ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        ws.send(<span class="string">"我要发个消息到服务器"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'已经发送'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过websocket接收服务器发送的数据</span></span><br><span class="line">    ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> received_msg = evt.data;</span><br><span class="line">        <span class="comment">//处理你的数据</span></span><br><span class="line">        <span class="built_in">console</span>.log(evt);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 与服务器关闭连接时调用</span></span><br><span class="line">    ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"连接已关闭..."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 发生错误时调用</span></span><br><span class="line">    ws.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"好像发生错误了..."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<p>如果要在别的类，给客户端群发消息，就不能简单把<code>MyWebSocket.java</code>对象<code>new</code>出来，因为每个对象里都有存session。我们只能通过获取 在客户端连接服务器后产生的实例。</p>
<p>因此可以想到用单例模式。</p>
<blockquote>
<p>单例对象的类必须保证只有一个实例存在</p>
</blockquote>
<p>这是我们想要的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendNews</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyWebSocket myWebSocket = MyWebSocket.getSingleton();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        myWebSocket.sendMessage(<span class="string">"你好世界"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就能实现在别的类，给客户端发送消息。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>php CodeIgniter框架</title>
    <url>/2017/05/23/2017-05-24-php-CodeIgniter/</url>
    <content><![CDATA[<h3 id="CodeIgniter框架"><a href="#CodeIgniter框架" class="headerlink" title="CodeIgniter框架"></a>CodeIgniter框架</h3><blockquote>
<p>这个框架具有mvc的思想，而且方法的url映射的方式很类似java spring mvc。</p>
</blockquote>
<p>具体查看可以<a href="http://codeigniter.org.cn/user_guide" target="_blank" rel="noopener">CodeIgniter文档</a></p>
<hr>
<h4 id="base-url和site-url"><a href="#base-url和site-url" class="headerlink" title="base_url和site_url"></a>base_url和site_url</h4><p>如何在页面中使用配置文件中设置的静态文件路径和访问的url，先找到CodeIgniter根目录下 <em>application-&gt;config-&gt;config.php</em></p>
<p><img src="1.png" alt></p>
<p>里面的base_url是自带的，这是在引入静态文件时用的，我们还可以再加入一个<code>site_url</code>配置，用来在提交表单或者ajax异步提交数据时url的根路径。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$config[<span class="string">'base_url'</span>] = <span class="string">'http://localhost/bikeShare'</span>;</span><br><span class="line">$config[<span class="string">'site_url'</span>] = <span class="string">'http://localhost/bikeShare/index.php'</span>;</span><br></pre></td></tr></table></figure>

<hr>
<p>当然如果我们要在页面上使用 <strong>site_url</strong>或 <strong>base_url</strong>，我们需要在使用这两个的地方的控制器里先通过 <code>$this-&gt;load-&gt;helper(array(&#39;url&#39;))</code> 引入。如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// controllers/Login.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">CI_Controller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;load-&gt;helper(<span class="keyword">array</span>(<span class="string">'url'</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;load-&gt;view(<span class="string">'login/login'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登录页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- login/login.php --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form"</span> <span class="attr">method</span>=<span class="string">"post"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">action</span>=<span class="string">"&lt;?=site_url('login/getLogin') ?&gt;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"passwd"</span> <span class="attr">name</span>=<span class="string">"passwd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"submit_btn"</span> <span class="attr">name</span>=<span class="string">"action"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>处理登录的界面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// controllers/Login.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;load-&gt;helper(<span class="string">'url'</span>);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;load-&gt;model(<span class="string">'userModel'</span>);</span><br><span class="line">    $username = <span class="keyword">$this</span>-&gt;input-&gt;post(<span class="string">'username'</span>);</span><br><span class="line">    $passwd = <span class="keyword">$this</span>-&gt;input-&gt;post(<span class="string">'passwd'</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;userModel-&gt;checkLogin($username,$passwd)===<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;load-&gt;view(<span class="string">'home/index'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;load-&gt;view(<span class="string">'login/login'</span>,<span class="keyword">array</span>(<span class="string">'error'</span>=&gt;<span class="string">'用户名或密码错误'</span>));</span><br><span class="line">        <span class="comment">// redirect('/', 'refresh');</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取表单传值"><a href="#获取表单传值" class="headerlink" title="获取表单传值"></a>获取表单传值</h4><p>获取表单项的值可以通过如下的方法，根据 提交的类型是 <em>post</em> 或是 <em>get</em> 来进行选择。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;input-&gt;post(<span class="string">'name'</span>);</span><br><span class="line"><span class="keyword">$this</span>-&gt;input-&gt;get(<span class="string">'name'</span>);</span><br></pre></td></tr></table></figure>

<h4 id="使用model类里的方法"><a href="#使用model类里的方法" class="headerlink" title="使用model类里的方法"></a>使用model类里的方法</h4><p>对数据库的操作都放在 <strong>models</strong>文件夹下，假如需要调用 <strong>UserModel.php</strong>里的方法时，可以通过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;model(<span class="string">'userModel'</span>);</span><br><span class="line"><span class="keyword">$this</span>-&gt;userModel-&gt;getUser();</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="给页面传入数据"><a href="#给页面传入数据" class="headerlink" title="给页面传入数据"></a>给页面传入数据</h4><p>显示 <strong>views</strong>文件夹下的页面，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$this-&gt;load-&gt;view('user/list');</span><br></pre></td></tr></table></figure>

<p>若是想在页面里面传入数据，类似java的Model，可以在<code>view()</code>方法里加入第二个参数,如下，这样就可以将关联数组data传入页面。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$data = <span class="keyword">array</span>(<span class="string">'username'</span>=&gt;<span class="string">'小唐'</span>,<span class="string">'studio'</span>=&gt;<span class="string">'betahouse'</span>);</span><br><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;view(<span class="string">'user/list'</span>,$data);</span><br></pre></td></tr></table></figure>

<h4 id="生成json字符串-json-encode"><a href="#生成json字符串-json-encode" class="headerlink" title="生成json字符串 json_encode"></a>生成json字符串 <code>json_encode</code></h4><blockquote>
<p>由于json只接受utf-8编码的字符，所以json_encode()的参数必须是utf-8编码，否则会得到空字符或者null。当中文使用GB2312编码，或者外文使用ISO-8859-1编码的时候，这一点要特别注意。</p>
</blockquote>
<p>若是需要返回json的字符串，则需要用 <code>json_encode()</code>方法，该方法可以将数组或对象转成json字符串。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接向前端输出json字符串就行</span></span><br><span class="line"><span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">'status'</span>=&gt;<span class="number">1</span>,<span class="string">'num'</span>=&gt;$num));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于javascript不支持关联数组，所以json_encode()只将索引数组（indexed array）转为数组格式，而将关联数组（associative array）转为对象格式。</p>
</blockquote>
<p>1.若是传入索引数组，则 <code>json_encode()</code>会将索引数组转成数组格式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr = <span class="keyword">Array</span>(<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>);　　 </span><br><span class="line"><span class="keyword">echo</span> json_encode($arr);　</span><br><span class="line"><span class="comment">// 输出： ["one","two","three"]</span></span><br></pre></td></tr></table></figure>

<p>2.若是传入的是关联数组，则 <code>json_encode()</code>会将关联数组转成对象格式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr = <span class="keyword">Array</span>(<span class="string">'1'</span>=&gt;<span class="string">'one'</span>, <span class="string">'2'</span>=&gt;<span class="string">'two'</span>, <span class="string">'3'</span>=&gt;<span class="string">'three'</span>); </span><br><span class="line"><span class="keyword">echo</span> json_encode($arr);</span><br><span class="line"><span class="comment">// 输出： &#123;"1":"one","2":"two","3":"three"&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="解析json字符串-json-decode"><a href="#解析json字符串-json-decode" class="headerlink" title="解析json字符串 json_decode()"></a>解析json字符串 <code>json_decode()</code></h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$json = json_decode(<span class="string">'&#123;"info": "nice"&#125;'</span>;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通常情况下，json_decode()总是返回一个PHP对象，而不是数组。</p>
</blockquote>
<p>如果想要强制生成PHP关联数组，json_decode()需要加一个参数true：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$json = &#123;<span class="string">"1"</span>:<span class="string">"one"</span>,<span class="string">"2"</span>:<span class="string">"two"</span>,<span class="string">"3"</span>:<span class="string">"three"</span>&#125;;</span><br><span class="line">json_decode($json,<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>CodeIgniter</tag>
      </tags>
  </entry>
  <entry>
    <title>flying saucer 导出pdf</title>
    <url>/2017/05/22/2017-05-23-html-pdf/</url>
    <content><![CDATA[<h3 id="制作html模板"><a href="#制作html模板" class="headerlink" title="制作html模板"></a>制作html模板</h3><p>引入flying-saucer-pdf jar包，maven工程直接添加如下代码即可。若不是，则去下载对应版本的jar包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xhtmlrenderer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flying-saucer-pdf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="添加页眉页脚页码"><a href="#添加页眉页脚页码" class="headerlink" title="添加页眉页脚页码"></a>添加页眉页脚页码</h4><p>通过 @page 来添加页眉页脚页码，设置每页的长宽。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">page</span> &#123;</span><br><span class="line">    &lt;!-- 每页pdf的长宽，单位为英寸，这里采用的是A4纸的长宽， --&gt;</span><br><span class="line">    <span class="selector-tag">size</span>: 8<span class="selector-class">.27in</span> 11<span class="selector-class">.69in</span>;</span><br><span class="line"></span><br><span class="line">    &lt;!<span class="selector-tag">--</span> 页脚的中间位置 <span class="selector-tag">--</span>&gt;</span><br><span class="line">    @<span class="keyword">bottom</span>-<span class="keyword">center</span>&#123;  </span><br><span class="line">      <span class="selector-tag">content</span>: <span class="selector-tag">counter</span>(<span class="selector-tag">page</span>);</span><br><span class="line">      <span class="selector-tag">font-family</span>: <span class="selector-tag">SimSun</span>;</span><br><span class="line">      <span class="selector-tag">font-size</span>: 16<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    &lt;!<span class="selector-tag">--</span> 页脚的右侧 <span class="selector-tag">--</span>&gt;</span><br><span class="line">    @<span class="keyword">bottom</span>-<span class="keyword">right</span>&#123;</span><br><span class="line">        &lt;!<span class="selector-tag">--</span> 计算页码 <span class="selector-tag">--</span>&gt;</span><br><span class="line">        <span class="selector-tag">content</span>: <span class="selector-tag">counter</span>(<span class="selector-tag">page</span>);</span><br><span class="line">        <span class="selector-tag">font-family</span>: <span class="selector-tag">SimSun</span>;</span><br><span class="line">        <span class="selector-tag">font-size</span>: 9<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &lt;!<span class="selector-tag">--</span> 页眉的左侧 <span class="selector-tag">--</span>&gt;</span><br><span class="line">    @<span class="keyword">top</span>-<span class="keyword">left</span> &#123;</span><br><span class="line">      <span class="selector-tag">font-size</span>: 14<span class="selector-tag">px</span>;</span><br><span class="line">      content: "$&#123;info&#125;$&#123;reportName&#125;";</span><br><span class="line">      font-family:'Arial Unicode MS';</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &lt;!<span class="selector-tag">--</span> 页眉的右侧 <span class="selector-tag">--</span>&gt;</span><br><span class="line">    @<span class="keyword">top</span>-<span class="keyword">right</span> &#123;</span><br><span class="line">      content: "$&#123;header&#125;";</span><br><span class="line">      font-family:'Arial Unicode MS';</span><br><span class="line">      <span class="selector-tag">font-size</span>: 14<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>html结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.page</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">page-break-before</span><span class="selector-pseudo">:always</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span>: 7<span class="selector-class">.7in</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span>: 10<span class="selector-class">.8in</span>;</span></span><br><span class="line"><span class="undefined">    padding: 20px 0 0 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"font-family:'Arial Unicode MS'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">        第一页</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">        第二页</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">        第三页</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为需要严格控制每页的内容，在每页的DOM容器上添加css属性 <code>page-break-before:always;</code> 强制分页。再控制每个容器的长宽略小于page的长宽。</p>
<h4 id="把html模板导出为pdf"><a href="#把html模板导出为pdf" class="headerlink" title="把html模板导出为pdf"></a>把html模板导出为pdf</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数据填入html，然后生成新的html字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> template  指定的html模板名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dataMap  需要填入模板的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  新的html字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">htmlGenerate</span><span class="params">(String template, Map&lt;String,Object&gt; variables)</span> <span class="keyword">throws</span> Exception</span>&#123;     </span><br><span class="line">    Configuration config = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_23);</span><br><span class="line">    config.setDefaultEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">    config.setClassForTemplateLoading(ReportService.class, <span class="string">"../template"</span>);</span><br><span class="line">    Template t = config.getTemplate(template);</span><br><span class="line">    StringWriter stringWriter = <span class="keyword">new</span> StringWriter();</span><br><span class="line">    BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(stringWriter);</span><br><span class="line">    t.process(variables, writer);</span><br><span class="line">    String htmlStr = stringWriter.toString();</span><br><span class="line">    writer.flush();</span><br><span class="line">    writer.close();</span><br><span class="line">    <span class="keyword">return</span> htmlStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成pdf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> htmlStr  生成的html字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> out  输出流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> font  需要引入的文件地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pdfGenerate</span><span class="params">(String htmlStr, OutputStream out,String font)</span> <span class="keyword">throws</span> Exception </span>&#123;     </span><br><span class="line">    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();</span><br><span class="line">    Document doc = builder.parse(<span class="keyword">new</span> ByteArrayInputStream(htmlStr.getBytes()));</span><br><span class="line">    ITextRenderer renderer = <span class="keyword">new</span> ITextRenderer();</span><br><span class="line">    ITextFontResolver fontResolver = renderer.getFontResolver();</span><br><span class="line">    <span class="comment">// 设置显示中文字</span></span><br><span class="line">    fontResolver.addFont(font, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</span><br><span class="line">    renderer.setDocument(doc, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 获取配置文件里保存文件的路径，然后设置图片的相对路径</span></span><br><span class="line">    renderer.getSharedContext().setBaseURL(<span class="string">"file:/"</span>+UploadUtils.getConfig(<span class="string">"FILE_REPOSITORY"</span>)+<span class="string">"/"</span>);</span><br><span class="line">    renderer.layout();</span><br><span class="line">    renderer.createPDF(out);</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出pdf。直接调用这个方法就行了。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> saveDir  pdf保存的目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dataMap  html模板需要的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> font  中文字库的地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reportPDF</span><span class="params">(String saveDir, Map&lt;String,Object&gt; dataMap, String font)</span></span>&#123;</span><br><span class="line">    String fileAddress = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileAddress = saveDir + java.io.File.separator + <span class="string">"betahouse.pdf"</span>;</span><br><span class="line">        String htmlStr = htmlGenerate(<span class="string">"pdf_template.html"</span>, dataMap);</span><br><span class="line">        OutputStream out = <span class="keyword">new</span> FileOutputStream(fileAddress);</span><br><span class="line">        pdfGenerate(htmlStr, out, font);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fileAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加中文支持"><a href="#添加中文支持" class="headerlink" title="添加中文支持"></a>添加中文支持</h4><p>下载 <strong>Arial Unicode MS(ARIALUNI.TTF)</strong>，然后添加到项目的静态文件夹下，</p>
<p><img src="1.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取字体的绝对路径</span></span><br><span class="line">String font = request.getSession().getServletContext().getRealPath(<span class="string">"/"</span>)</span><br><span class="line">        +File.separator+<span class="string">"static"</span>+File.separator+<span class="string">"fonts"</span>+File.separator</span><br><span class="line">        +<span class="string">"ARIALUNI.TTF"</span>;</span><br></pre></td></tr></table></figure>

<p>这里的话已经在<code>pdfGenerate()</code>方法里写好了，如下代码 可以添加中文支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String font = request.getSession().getServletContext().getRealPath(<span class="string">"/"</span>)</span><br><span class="line">        +File.separator+<span class="string">"static"</span>+File.separator+<span class="string">"fonts"</span>+File.separator</span><br><span class="line">        +<span class="string">"ARIALUNI.TTF"</span>;</span><br><span class="line">ITextRenderer renderer = <span class="keyword">new</span> ITextRenderer();</span><br><span class="line">ITextFontResolver fontResolver = renderer.getFontResolver();</span><br><span class="line">fontResolver.addFont(font, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</span><br><span class="line">renderer.setDocument(doc, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<h4 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h4><blockquote>
<p>这里有个bug，我调了很久才发现，查了很多博客才发现，</p>
</blockquote>
<p>想要将html中的图片导出到pdf中，<code>&lt;img src=&quot;&quot; alt=&quot;&quot; /&gt;</code> 标签的图片路径需要图片的相对路径，而且需要在后台预先设置好，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ITextRenderer renderer = <span class="keyword">new</span> ITextRenderer();</span><br><span class="line">renderer.setDocument(doc, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// UploadUtils.getConfig() 是项目里一个读取配置文件的方法</span></span><br><span class="line">renderer.getSharedContext().setBaseURL(<span class="string">"file:/"</span>+UploadUtils.getConfig(<span class="string">"FILE_REPOSITORY"</span>)+<span class="string">"/"</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置图片相对路径时，最前面必须加上”file:/“，然后再加上 图片目录的路径。</p>
</blockquote>
<p>这里有个很坑的地方，之前写网页的时候，写图片路径时用的都是<code>\</code>反斜杠，因此我用的也是<code>\</code>，而且通过程序从本地读出来的文件路径也都是用反斜杠的，后来试了很多次后，发现这里写文件路径时的路径分隔符都必须是<code>/</code>正斜杠，只能用 <code>replaceAll()</code>函数把路径里面的反斜杠全部替换成正斜杠，然后导出就有图片了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">url2 = url2.replaceAll(<span class="string">"\\\\"</span>, <span class="string">"/"</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- coverImgUrl变量里存的是相对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;imgUrl&#125;"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"700px"</span> <span class="attr">class</span>=<span class="string">"cover-img"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="一些常用的-freemarker-语法"><a href="#一些常用的-freemarker-语法" class="headerlink" title="一些常用的 freemarker 语法"></a>一些常用的 freemarker 语法</h3><p>请看<a href="http://zhizhi.tangliangdong.me/2017/05/22/java-report-word/">java通过freemarker导出doc</a></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>flying saucer</tag>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>java通过freemarker导出doc</title>
    <url>/2017/05/22/2017-05-23-java-report-word/</url>
    <content><![CDATA[<h3 id="制作word模板"><a href="#制作word模板" class="headerlink" title="制作word模板"></a>制作word模板</h3><p>用 <em>word</em>制作 <strong>.doc</strong>后缀的 <em>word</em>，也可以用 <strong>.docx</strong>后缀的 <em>word</em>，但是在导出 <strong>xml</strong>的时候需要导出为2003版本的 <strong>xml</strong>格式，切记不要导出为07年以后的 <strong>xml</strong>。</p>
<p>后缀为 <strong>.doc</strong>的 <em>word</em>只能通过03年的 <strong>xml</strong>文件生成，而 <strong>.docx</strong>的word只能通过07年以后的 <strong>xml</strong>生成。</p>
<a id="more"></a>

<p>03年的 <strong>.doc</strong>是通过二进制存储的，而07年以后的 <strong>.docx</strong>是通过 <strong>xml</strong>构建的。虽然都能做模板，但是要生成 <strong>.docx</strong>，导入图片的问题，我还没找到解决方案，但是导出 <strong>.doc</strong>可以将图片装成 <strong>Base64</strong>格式，然后直接加到 <strong>xml</strong>文件的标签里面。如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">w:binData</span> <span class="attr">w:name</span>=<span class="string">"wordml://02000004.png"</span>&gt;</span>$&#123;item.problemImg&#125;<span class="tag">&lt;/<span class="name">w:binData</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt></p>
<h3 id="制作freemarker模板"><a href="#制作freemarker模板" class="headerlink" title="制作freemarker模板"></a>制作freemarker模板</h3><h4 id="使用xml插件格式化代码"><a href="#使用xml插件格式化代码" class="headerlink" title="使用xml插件格式化代码"></a>使用xml插件格式化代码</h4><p>导出成功后，把后缀 <strong>.xml</strong> 改成 <strong>.ftl</strong> 这样就成为freemarker的模板了，再用sublime打开，用Indent xml格式化工具将xml格式化下，没有的话通过 <strong>package control插件</strong> 在线搜索下载 <strong>Indent xml插件</strong>。</p>
<blockquote>
<p>不会装sublime插件的话，可以去看我以前写的一篇博客：<a href="http://zhizhi.tangliangdong.me/2016/07/11/sublime-text-3/">sublime text 3 插件分享</a>。</p>
</blockquote>
<p>然后打开菜单栏里的 <strong>Selection-&gt;Format-&gt;Indent XML</strong>,如下图</p>
<p><img src="2.png" alt></p>
<p>不然代码全部堆在一起根本不能看，格式化代码可以极大的提高效率。</p>
<h4 id="在word中插入图片"><a href="#在word中插入图片" class="headerlink" title="在word中插入图片"></a>在word中插入图片</h4><p>插入文字比较简单，比较容易出问题的就是插入图片。</p>
<p>如果制作的word模板里有图片的话，那导出的xml文件里会有如下图大片的乱码</p>
<p><img src="3.png" alt></p>
<p>直接将这片代码换成freemarker的标记：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">w:pict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">w:binData</span> <span class="attr">w:name</span>=<span class="string">"wordml://03000005.png"</span>&gt;</span>$&#123;Base64_img&#125;<span class="tag">&lt;/<span class="name">w:binData</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v:shape</span> <span class="attr">alt</span>=<span class="string">"C:\Users\18072\AppData\Local\Microsoft\Windows\INetCache\Content.Word\1491978958037.png"</span> <span class="attr">id</span>=<span class="string">"图片 111"</span> <span class="attr">o:spid</span>=<span class="string">"_x0000_s1040"</span> <span class="attr">style</span>=<span class="string">"position:absolute;left:0;text-align:left;margin-left:-1.1pt;margin-top:-110.4pt;width:83.05pt;height:110.25pt;z-index:-15;mso-position-horizontal-relative:text;mso-position-vertical-relative:text"</span> <span class="attr">type</span>=<span class="string">"#_x0000_t75"</span> <span class="attr">wrapcoords</span>=<span class="string">"-195 0 -195 21453 21600 21453 21600 0 -195 0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v:imagedata</span> <span class="attr">o:title</span>=<span class="string">"1491978958037"</span> <span class="attr">src</span>=<span class="string">"wordml://03000005.png"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">w10:wrap</span> <span class="attr">type</span>=<span class="string">"tight"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">v:shape</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">w:pict</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>有个注意点，如果这段代码只出现一次，不需要循环，而且制作模板时这张图片只使用了一次，其他任何地方的图片用的都不是这一张图片，那只要这样写就行了。</li>
<li>如果需要循环输出图片，上面代码有两处需要修改，不然所有循环生成的图片都会变成循环体的最后一张图片。</li>
</ul>
<p>第一个标签的<code>w:name</code> 属性和 <code>src</code> 属性需要保持一致，而且<code>03000005.png</code> 这个图片名称在整个word里需要保持唯一性。所以在循环生成图片的时候，需要在这两个属性里面加上具有唯一性的字段，以防止图片重复。</p>
<p><code>&lt;w:binData w:name=&quot;wordml://03000005.png&quot;&gt;${Base64_img}&lt;/w:binData&gt;</code></p>
<p><code>&lt;v:imagedata o:title=&quot;1491978958037&quot; src=&quot;wordml://03000005.png&quot;/&gt;</code></p>
<p>相反的，当然如果你要让图片重复，只需让其他图片的 <code>&lt;v:imagedata /&gt;</code>这个标签的<code>src属性</code>写出和需要显示的<code>&lt;w:binData /&gt;</code>的 <code>w:name</code> 标签一致就行了。</p>
<hr>
<blockquote>
<p>说到这里，其实很容易就发现：</p>
</blockquote>
<p>下面这个标签是用来在word里保存图片的。出现这个标签，并不会在word里上显示图片</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">w:binData</span> <span class="attr">w:name</span>=<span class="string">"wordml://03000005.png"</span>&gt;</span>$&#123;Base64_img&#125;<span class="tag">&lt;/<span class="name">w:binData</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而下面这个标签则是用来显示图片的，以及保存图片自身的样式，通过 <code>&lt;v:imagedata /&gt;</code> 的 <code>src</code> 属性来显示对应的通过<code>&lt;w:binData&gt;${Base64_img}&lt;/w:binData&gt;</code> 这个标签保存的图片。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v:shape</span> <span class="attr">alt</span>=<span class="string">"C:\Users\18072\AppData\Local\Microsoft\Windows\INetCache\Content.Word\1491978958037.png"</span> <span class="attr">id</span>=<span class="string">"图片"</span> <span class="attr">o:spid</span>=<span class="string">"_x0000_s1040"</span> <span class="attr">style</span>=<span class="string">"position:absolute;left:0;text-align:left;margin-left:-1.1pt;margin-top:-110.4pt;width:83.05pt;height:110.25pt;z-index:-15;mso-position-horizontal-relative:text;mso-position-vertical-relative:text"</span> <span class="attr">type</span>=<span class="string">"#_x0000_t75"</span> <span class="attr">wrapcoords</span>=<span class="string">"-195 0 -195 21453 21600 21453 21600 0 -195 0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v:imagedata</span> <span class="attr">o:title</span>=<span class="string">"1491978958037"</span> <span class="attr">src</span>=<span class="string">"wordml://03000005.png"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">w10:wrap</span> <span class="attr">type</span>=<span class="string">"tight"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v:shape</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>当然仅仅是这样还不行，我们将图片读进程序的时候，需要将图片转成Base64编码格式，然后才能输出到.ftl模板里。</p>
<p>需要导入 <strong>sun.misc.BASE64Decoder.jar</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将图片转换成base64编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> imgFile 图片的绝对路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> base64编码的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getImageStr</span><span class="params">(String imgFile)</span> </span>&#123;  </span><br><span class="line">    InputStream in = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] data = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        in = <span class="keyword">new</span> FileInputStream(imgFile);</span><br><span class="line">        data = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">        in.read(data);</span><br><span class="line">        in.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    BASE64Encoder encoder = <span class="keyword">new</span> BASE64Encoder();  </span><br><span class="line">    <span class="keyword">return</span> encoder.encode(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接调用上面的方法就行了，把图片的绝对路径传入，然后直接把返回值存在变量里，传入freemarker模板，就会显示图片了。</p>
<h4 id="把变量引入模板"><a href="#把变量引入模板" class="headerlink" title="把变量引入模板"></a>把变量引入模板</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_23);</span><br><span class="line">configuration.setDefaultEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">// 设置模板所在的包</span></span><br><span class="line">configuration.setClassForTemplateLoading(<span class="keyword">this</span>.getClass(), <span class="string">"../template"</span>);</span><br><span class="line">Template t = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 读取指定的模板文件</span></span><br><span class="line">    t = configuration.getTemplate(<span class="string">"sxxt.ftl"</span>);</span><br><span class="line">    </span><br><span class="line">    Map&lt;String,Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="comment">// 导入文字</span></span><br><span class="line">    dataMap.put(<span class="string">"title"</span>,<span class="string">"hello betahouse"</span>);</span><br><span class="line">    <span class="comment">// 导入图片</span></span><br><span class="line">    dataMap.put(<span class="string">"Base64_img"</span>,getImageStr(<span class="string">"D:/betahouse.png"</span>));</span><br><span class="line">    <span class="comment">// 导出word的路径</span></span><br><span class="line">    fileAddress = <span class="string">"word.doc"</span>;</span><br><span class="line">    </span><br><span class="line">    File outFile = <span class="keyword">new</span> File(fileAddress);</span><br><span class="line">    Writer out = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    fos = <span class="keyword">new</span> FileOutputStream(outFile);</span><br><span class="line">    OutputStreamWriter oWriter = <span class="keyword">new</span> OutputStreamWriter(fos,<span class="string">"UTF-8"</span>);</span><br><span class="line">    out = <span class="keyword">new</span> BufferedWriter(oWriter);</span><br><span class="line"></span><br><span class="line">    t.process(dataMap, out);</span><br><span class="line">    out.close();</span><br><span class="line">    fos.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="一些常用的freemarker标签"><a href="#一些常用的freemarker标签" class="headerlink" title="一些常用的freemarker标签"></a>一些常用的freemarker标签</h3><h4 id="输出"><a href="#输出" class="headerlink" title="输出 ${}"></a>输出 ${}</h4><p>通过${title}输出变量的内容，如果该表里为空，则会报错，所以可以像下面这么写，如果title为空，则输出后面的”this var is null”。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">$</span><span class="template-variable">&#123;title!"this var is null"&#125;</span><span class="xml"> <span class="comment">&lt;!-- 输出 this var is null --&gt;</span></span></span><br><span class="line"><span class="xml">$</span><span class="template-variable">&#123;title!&#125;</span><span class="xml">  <span class="comment">&lt;!-- 输出空白 --&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>或者先判断该变量是否存在</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">&lt;#<span class="keyword">if</span> title??&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/#<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="循环遍历-lt-list-gt-lt-list-gt"><a href="#循环遍历-lt-list-gt-lt-list-gt" class="headerlink" title="循环遍历 &lt;#list&gt;&lt;/#list&gt;"></a>循环遍历 &lt;#list&gt;&lt;/#list&gt;</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">arr</span> <span class="attr">as</span> <span class="attr">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    $</span><span class="template-variable">&#123;item&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- item的下标 --&gt;</span></span></span><br><span class="line"><span class="xml">    $</span><span class="template-variable">&#123;item_index&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 集合有几个元素 --&gt;</span></span></span><br><span class="line"><span class="xml">    $</span><span class="template-variable">&#123;arr?size&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 判断该item是否是最后一个元素 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">#if</span> !<span class="attr">item_has_next</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 跳出循环 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#break</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="判断-lt-if-gt-lt-if-gt"><a href="#判断-lt-if-gt-lt-if-gt" class="headerlink" title="判断 &lt;#if&gt;&lt;/#if&gt;"></a>判断 &lt;#if&gt;&lt;/#if&gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 判断content是不是空 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">content</span>??&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 字符串比较不需要 .equals()，直接比较就行了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">str</span> == <span class="string">"success"</span>&gt;</span></span><br><span class="line">    xxx</span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>freemarker模板里面不能用 &lt;&gt; 大于小于号，因为会和 xml的格式的尖括号闭合，发生错误。</p>
</blockquote>
<p>因此如果要表示大于小于，需要用符号代替：</p>
<ol>
<li>用符号代替<ul>
<li>&gt;(gt)     大于号</li>
<li>&gt;=(gte)   大于等于号</li>
<li>&lt;(lt)     小于号</li>
<li>&lt;=(lte)   小于等于号</li>
</ul>
</li>
<li>大于小于号 外面加括号<ul>
<li>&lt;#if(x&gt;y) &gt;&lt;/#if&gt;</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>freemarker</tag>
        <tag>word</tag>
      </tags>
  </entry>
  <entry>
    <title>jekyll github page</title>
    <url>/2017/04/16/2017-04-16-jekyll-github-page/</url>
    <content><![CDATA[<blockquote>
<p>部分摘录自 阮一峰👉👉👉<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank" rel="noopener">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门</a></p>
</blockquote>
<h3 id="首先提一下Github托管静态博客的优点"><a href="#首先提一下Github托管静态博客的优点" class="headerlink" title="首先提一下Github托管静态博客的优点"></a>首先提一下Github托管静态博客的优点</h3><ol>
<li>首先免费是最重要的，域名不用自己买，甚至连服务器都不用买。</li>
<li>其次，相比较市面上的一些博客那些千篇一律的主题，满屏的广告，由自己搭建的博客可以很好的避免这些问题。</li>
<li>在自己保留控制权的情况下，让别人来管理服务器，自己只要专注写博客就行。</li>
<li>享受git的版本管理功能，不用担心文章遗失。相比较wordpress保存在数据库，数据更不易丢失。</li>
<li>你只要用自己喜欢的编辑器写文章就可以了，其他事情一概不用操心，都由github处理。</li>
</ol>
<hr>
<blockquote>
<p>相比较wordpress,就我个人的使用体验来说。。。。。</p>
</blockquote>
<p>好吧，其实我建好wordpress 就发过两次文章，这两次还是发的相同的一篇，因为服务器被我搞爆炸了，数据库又没备份，然后只能重新开始写。</p>
<p>后来我就再也没动力写过，鼓捣麻烦，还怕炸了，万一没备份，又是一把辛酸泪。</p>
<p>又来知道betahouse学长再用的都是github托管的静态博客，知道了原来博客也是可以保存在本地，只要commit一下，再push到远程仓库，就能将很快更新博客。让github托管我的博客，就不怕什么时候突然就炸了，而且代码在本地都有，根本不怕丢。</p>
<p>而且每次推送到github上都会在github上有记录</p>
<p><img src="9.png" alt></p>
<p>像盖房子一样，是不是很有成就感。</p>
<hr>
<p>github Pages可以被认为是用户编写的、托管在github上的静态网页。</p>
<p>由github提供模板，允许站内生成网页，但也允许用户自己编写网页，然后上传。有意思的是，这种上传并不是单纯的上传，而是会经过Jekyll程序的再处理。</p>
<p><strong>Jekyll</strong>（发音/‘dʒiːk əl/，”杰克尔”）是一个静态站点生成器，它会根据网页源码生成静态文件。它提供了模板、变量、插件等功能，所以实际上可以用来编写整个网站。</p>
<p>你先在本地编写符合Jekyll规范的网站源码，然后上传到github，由github生成并托管整个网站。</p>
<h3 id="如何搭建静态博客"><a href="#如何搭建静态博客" class="headerlink" title="如何搭建静态博客"></a>如何搭建静态博客</h3><h4 id="先在github上新建一个仓库"><a href="#先在github上新建一个仓库" class="headerlink" title="先在github上新建一个仓库"></a>先在github上新建一个仓库</h4><p><img src="1.png" alt="新建博客的仓库"></p>
<p>该仓库的名称要遵守github pages的命名规范,假如你的博客用户名是tangliangdong,那么你的仓库就要命名成 <code>tangliangdong.github.io</code>，而且如若你的博客没绑定域名，则默认就是这个域名<code>tangliangdong.github.io</code>，其实也还不错。</p>
<h4 id="clone到本地仓库、或者本地连接到远程仓库"><a href="#clone到本地仓库、或者本地连接到远程仓库" class="headerlink" title="clone到本地仓库、或者本地连接到远程仓库"></a>clone到本地仓库、或者本地连接到远程仓库</h4><h5 id="clone到本地仓库"><a href="#clone到本地仓库" class="headerlink" title="clone到本地仓库"></a>clone到本地仓库</h5><p><img src="3.png" alt="clone到本地"></p>
<p>先在本地创建一个文件夹当做博客的根目录，命令行cd到博客的根目录 <code>git init</code> 初始化仓库。然后就可以克隆远程的仓库到本地。</p>
<p><img src="4.png" alt="clone到本地"></p>
<h5 id="或者本地连接到远程仓库"><a href="#或者本地连接到远程仓库" class="headerlink" title="或者本地连接到远程仓库"></a>或者本地连接到远程仓库</h5><p>命令行cd到博客的根目录,<code>git remote</code> 显示本地仓库连接的所有远程仓库。通过 <code>git remote add [remote-name] [url]</code> 添加github远程仓库。<strong>remote-name</strong> 是你给远程仓库取的名字，以后拉取和推送就用这个别名。</p>
<p><img src="5.png" alt></p>
<p> <code>git fetch [remote-name]</code>可以从远程仓库<br>拉取最新的提交。</p>
<h4 id="在本地安装jekyll"><a href="#在本地安装jekyll" class="headerlink" title="在本地安装jekyll"></a>在本地安装jekyll</h4><blockquote>
<p>如果是 Mac OS系统 建议在命令前加上 <code>sudo</code> 然后输入管理员密码，以管理员的身份运行指令，不然可能会出现因权限不足，而导致安装失败的情况。</p>
</blockquote>
<p>写完博客 你可能需要先看一下呈现的效果，必要的时候可能还要改下css，因为页面都是通过jekyll来生成的，不可能每次修改都提交下，然后再访问博客域名去看效果。</p>
<p>那么还有种办法，就是本地搭建jekyll环境，想看效果的时候 命令行cd到博客的根目录启动 <code>jekyll serve</code> 一下，再访问 <em>localhost:4000</em>，就在本地看到自己的博客。</p>
<p><img src="2.png" alt="我的博客"></p>
<p>接下来让我们来搭建下 <em>jekyll</em> 环境</p>
<ul>
<li>基于 Ruby</li>
<li>DevKit</li>
<li>使用Markdown书写文章</li>
</ul>
<p>需要先安装 Ruby <a href="http://rubyinstaller.org/downloads" target="_blank" rel="noopener">下载页面</a></p>
<blockquote>
<p>Mac 自带了Ruby，直接通过命令 <code>ruby -v</code> 查看ruby是否安装成功。</p>
</blockquote>
<p>在安装好rubyinstaller后可以通过命令ruby -v检测是否安装成功。</p>
<p>在以上完成rubyinstaller和DevKit后，就能使用 <code>gem install jekyll</code> 安装jekyll</p>
<p>输入 <code>jekyll -v</code> 查看jekyll 是否安装成功。</p>
<p>如果有问题也可以参考 <a href="http://www.jianshu.com/p/58f19083138f" target="_blank" rel="noopener">配置jekyll安装环境与部署博客网站</a></p>
<p>如果自己会编写静态博客，可以自己来写，<code>jekyll new blogname</code> 来新建一个干净的博客。</p>
<img width="200px" src="great.png">

<p>我的博客 就是把别人的博客主题clone过来，自己稍微修饰下，就直接上线了，这也是很方便的方式，不需要太多的精力，就能拥有自己的博客。</p>
<p><a href="https://github.com/huxpro/huxpro.github.io/" target="_blank" rel="noopener">我clone的博客主题</a></p>
<h4 id="看看博客的目录结构"><a href="#看看博客的目录结构" class="headerlink" title="看看博客的目录结构"></a>看看博客的目录结构</h4><p><img src="6.png" alt></p>
<ol>
<li><strong>_config.yml</strong> 整个博客的核心配置文件，保存配置数据。很多配置选项都可以直接在命令行中进行设置，</li>
<li><strong>_includes</strong> 你可以加载这些包含部分到你的布局或者文章中以方便重用，比如页面的头部、底部和导航，是可以重用的</li>
<li><strong>_layouts</strong>（布局）是包裹在文章外部的模板。</li>
<li><strong>_posts</strong> 这里放的就是你的文章了。文件格式很重要，</li>
<li><strong>_site</strong> 一旦 Jekyll 完成转换，就会将生成的页面放在这里（默认）。最好将这个目录放进你的 .gitignore 文件中。会把css和img文件夹都放进去</li>
<li><strong>404.html</strong> 找不到路径时显示的页面</li>
<li><strong>about.html</strong> 个人介绍页面</li>
<li><strong>CNAME</strong> 为你的博客绑定自有域名的文件，只要在里面输入你要绑定的域名就行了。</li>
<li><strong>css</strong> 博客所有的css样式文件</li>
<li><strong>feed.xml</strong></li>
<li><strong>fonts</strong> 博客的字体</li>
<li><strong>Gruntfile.js</strong> </li>
<li><strong>img</strong> 博客的图片</li>
<li><strong>index.html</strong></li>
<li><strong>js</strong></li>
<li><strong>less</strong></li>
<li><strong>LICENSE</strong></li>
<li><strong>package.json</strong> 需要的包</li>
<li><strong>README.md</strong> 项目的英文介绍</li>
<li><strong>README.zh.md</strong> 项目的中文介绍</li>
</ol>
<p>基本都不需要动，只需要最开始改改<code>_config_yml</code>，把需要的图片放到 <code>img</code> 里面，然后在 <code>_posts</code> 文件夹里写文章就行了。</p>
<h4 id="书写博客的规范"><a href="#书写博客的规范" class="headerlink" title="书写博客的规范"></a>书写博客的规范</h4><hr>
<p>博客的头部申明</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout:     post</span><br><span class="line">title:      "你好betahouse"              # 博客的标题</span><br><span class="line">subtitle:   "我来啦"                      # 博客的标题</span><br><span class="line">date:       2016-07-10 16:00:00          # 博客的发布时间</span><br><span class="line">author:     "Tang"                       # 此博客的作者</span><br><span class="line">header-img: "img/post-bg-js-module.jpg"  # 此博客的封面图片</span><br><span class="line">catalog:    true                         # 是否显示右侧的页面导航</span><br><span class="line">tags:                                    # 此博客的标签</span><br><span class="line">    - betahouse</span><br><span class="line">    - 记事</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>下面就可以开始你的博客了。</p>
<p>因为写博客需要用markdown语法，所以需要先掌握下markdown基本的语法，其实很简单，</p>
<blockquote>
<p>Markdown 的目标是实现「易读易写」。可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。</p>
<p>Markdown 语法的目标是：成为一种适用于网络的书写语言。Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>
</blockquote>
<p>可以去学习下  <a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">献给写作者的 Markdown 新手指南</a> ，看完基本够用了</p>
<p>如果还想学，戳这里 👉👉👉 <a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a></p>
<hr>
<p>有个注意点 因为最后显示的页面都是在 <code>_site</code> 文件夹里面，引用图片的时候有个路径的问题。</p>
<p><img src="8.png" alt></p>
<p>需要写成这样，才能正确获取到图片。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">![](../../../../img/8.png)</span><br></pre></td></tr></table></figure>

<h4 id="上传博客"><a href="#上传博客" class="headerlink" title="上传博客"></a>上传博客</h4><p>打开命令行,cd 到博客的根目录，输入：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<p>origin 是你给远程仓库起的名字，master 代表的是远程仓库的一个分支。</p>
<h3 id="jekyll博客主题"><a href="#jekyll博客主题" class="headerlink" title="jekyll博客主题"></a>jekyll博客主题</h3><blockquote>
<p>分享一些 我之前搜来的博客主题。</p>
</blockquote>
<ul>
<li><a href="http://www.zhanxin.info/themes.html" target="_blank" rel="noopener">掌心</a></li>
<li><a href="http://yongyuan.name/blog/collect-jekyll-theme.html" target="_blank" rel="noopener">Jekyll主题收藏</a></li>
<li><a href="https://taylantatli.github.io/Moon/posts/" target="_blank" rel="noopener">All Posts</a></li>
<li><a href="http://mazhuang.org/" target="_blank" rel="noopener">码志</a></li>
</ul>
<hr>
<p>俗话说 好记性不如烂笔（jiàn）头（pán）。</p>
<p>写博客 不仅可以很好地整理自己的思路，还能很好的记录下来，自己以后忘记的话，还能随时翻看。</p>
<img width="200px" src="jiayou.png">

<p>祝大家都能拥有属于自己的博客。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>jekyll</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>betahouse 第一次迎新分享会</title>
    <url>/2017/04/08/2017-04-09-betahouse-new-live/</url>
    <content><![CDATA[<h1 id="今天是2017年4月9日"><a href="#今天是2017年4月9日" class="headerlink" title="今天是2017年4月9日"></a>今天是2017年4月9日</h1><h2 id="是betahouse迎来新生命的一天"><a href="#是betahouse迎来新生命的一天" class="headerlink" title="是betahouse迎来新生命的一天"></a>是betahouse迎来新生命的一天</h2><p>去年这个时候，我们也是第一次从文一赶到下沙，参加下沙学长的分享会。</p>
<p>还记得大一的时候，我还是懵懵懂懂，甚至在高考的那年暑假 打算买台式机，然后天天在寝室风风火火、打游戏，（那会刚迷上steam上欧美的3A大作）。天天都是在寝室里打游戏，因为有台游戏本，玩起来也还不错。学校的课也是水水的，轻轻松松就能应付，还能拿拿学校的二等奖，这样的糜烂的生活还能有意外的收入，岂不是美滋滋。</p>
<p><img src="1.png" alt="老哥，稳"></p>
<p>但我在大一寒假的时候买了Surface Pro4，至此之后已经很少玩游戏了，游戏本也开始积灰了。然后在大一结束的暑假卖掉了我的游戏本，入了Macbook Pro，从此在编程的黑路上一去不复返了。</p>
<p>在招新发布之后，陆陆续续的也有新人报名了，说实话，看到那些新人的简历写的还挺牛逼的，就有些慌慌的。我因为一直在做项目，挺忙的，一直都是在吃老本，虽然感觉前后端都会的样子，但是都不精通，只能做做小东西。</p>
<p>也没啥干货可以和新生分享的，都是东拉西扯。只有一些做项目的经历。</p>
<p>虽然做项目挺累的，晚上都是1、2点睡，早上甚至还有7点起来晨跑，就算是周末，也有老师催着你去笃行楼，教学楼 面谈。</p>
<p><img src="2.png" alt="微笑中透露着仙气"></p>
<p>更甚的是 要你起早在中午前赶到文一，然后下午赶着 大杭州晚高峰的热潮 风风火火的 回学校，你可能会觉得这日子真TMD。</p>
<p><img src="3.png" alt="好气哦，但是要保持微笑"></p>
<p>但是当你坚持在改了无休无止的需求之后，你会很有感觉，真的学到了挺多的东西，也让我更对betahouse充满了敬仰。</p>
<p>我在项目中 用到的git工作流 还有Tower，都曾是工作室学长教授给我的，虽然我当时并不知道是怎么一回事，但是我很感激学长能够教授给我们，说实话，虽然只和学长相处了短短的一个学期，但是我学到的东西 却远远超过了 学校所教授给我的东西。</p>
<blockquote>
<p>我记得炳炳学长 告诫我们的一句话：在大学，你可以什么都不学会，但是你必须要学会自学。</p>
</blockquote>
<p>这在我之后的学习中，一次又一次验证了这句真理。</p>
<p><img src="4.png" alt="img"></p>
<h3 id="betahouse-你已经走了很久"><a href="#betahouse-你已经走了很久" class="headerlink" title="betahouse 你已经走了很久"></a>betahouse 你已经走了很久</h3><p>betahouse工作室 在搬来青山湖之后经历了很多挫折，有些人离开了，有些人一直在坚守，我们和一米云印、97工作室 那些盈利性质的工作室不同，我们是秉持了互联网开放的思想，想营造一个大家可以互相分享讨论的平台。</p>
<p>有时候我也会想着赚钱，想着做什么才是对我最有利的。听着周诗栋、周一鸣、殷晓明对于工作室的谈论，我了解了很多，我们是大学生，我们应该做我们现在该做的事，betahouse是我们的家，是我们几届学长学姐用心呵护的地方，纵使我们不能把他发扬光大，但是我们也要把这个传统延续下去，从零开始又怎么样，我相信有这样一群有梦想，肯付出的同伴，我们一定可以坚持下去的。</p>
<p><img src="5.png" alt="老哥，稳"></p>
<h3 id="betahouse-加油"><a href="#betahouse-加油" class="headerlink" title="betahouse 加油"></a>betahouse 加油</h3>]]></content>
      <categories>
        <category>小记</category>
      </categories>
      <tags>
        <tag>betahouse</tag>
      </tags>
  </entry>
  <entry>
    <title>java poi操作Excel</title>
    <url>/2017/04/03/2017-04-04-java-poi-excel/</url>
    <content><![CDATA[<p>poi 需要用到的jar包：</p>
<ul>
<li>poi-3.9.jar</li>
<li>poi-ooxml-3.9.jar</li>
<li>poi-ooxml-schemas-3.9.jar</li>
<li>poi-scratchpad-3.9.jar</li>
<li>xmlbeans.jar</li>
<li>dom4j.jar</li>
<li>commons-lang3-3.5.jar</li>
</ul>
<h3 id="读取Excel"><a href="#读取Excel" class="headerlink" title="读取Excel"></a>读取Excel</h3><h4 id="通过文件路径直接读取Excel"><a href="#通过文件路径直接读取Excel" class="headerlink" title="通过文件路径直接读取Excel"></a>通过文件路径直接读取Excel</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为2007年后的Excel格式都是 .xlsx，因此相关的类名前都是 XSSF，类似 XSSFWorkbook</span></span><br><span class="line"><span class="comment">// 而2007年前的是 .xls，相关类名前缀都是 HSSF，类似 HSSFWorkbook</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"C:/Users/18072/Workspaces/数据.xlsx"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建流  </span></span><br><span class="line">InputStream input = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Workbook,一个Excel只有一个Workbook</span></span><br><span class="line">Workbook wb = <span class="keyword">null</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建sheet，一个Excel有多个sheet（工作表）</span></span><br><span class="line">Sheet sheet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用读取的文件流来生成Workbook对象，以便我们访问里面的内容</span></span><br><span class="line">wb = <span class="keyword">new</span> XSSFWorkbook(input);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">// 循环sheet工作表来获取里面的内容</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sheetNumbers; i++) &#123;</span><br><span class="line">    sheet = wb.getSheetAt(i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环sheet里每行的内容</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> rowNum = <span class="number">0</span>; rowNum &lt; sheet.getLastRowNum(); rowNum++) &#123;</span><br><span class="line">        Row row = sheet.getRow(rowNum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环一行里面每个单元格的内容</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> cellNum = <span class="number">0</span>; cellNum &lt; row.getLastCellNum(); cellNum++) &#123;</span><br><span class="line">            Cell cell = row.getCell(cellNum);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将每个单元格的内容存储到ArrayList中，方便以后读取</span></span><br><span class="line">            list.add(cell.getCell(cellNum).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读取单元格内容的方式有多种：</p>
<ul>
<li>cell.getStringCellValue() 获取单元格内的字符串，</li>
<li>cell.getNumericCellValue() 获取单元格内的数字</li>
<li>cell.toString() 将单元格内的变成字符串后并返回</li>
</ul>
<blockquote>
<p>第一次尝试着用了第一种，结果在单元格内是纯数字的情况下，报错了，无法获取，<br>第二种则是在单元格内是字符串的情况下报错了，<br>只有第三种是都适用的，我也默认使用这一种。</p>
</blockquote>
<h4 id="通过-input-type-39-file-39-的形式上传Excel文件"><a href="#通过-input-type-39-file-39-的形式上传Excel文件" class="headerlink" title="通过 input[type=&#39;file&#39;] 的形式上传Excel文件"></a>通过 <code>input[type=&#39;file&#39;]</code> 的形式上传Excel文件</h4><p>如果不知道怎么在spring MVC的Controller层获取文件的请戳 <a href="https://tangliangdong.github.io/2017/03/10/photo-upload/" target="_blank" rel="noopener">spring图片上传</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是spring MVC框架</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"post"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(HttpServletRequest req,HttpServletResponse res,</span></span></span><br><span class="line"><span class="function"><span class="params">    @RequestParam(<span class="string">"data"</span>)</span> MultipartFile exceldata) <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!exceldata.isEmpty())&#123;</span><br><span class="line">        <span class="comment">// 创建流，MultipartFile也有获取字节数组byte[]和inputStream对象的方法</span></span><br><span class="line">        InputStream input = exceldata.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用读取的文件流来生成Workbook对象，以便我们访问里面的内容</span></span><br><span class="line">        Workbook wb = <span class="keyword">new</span> XSSFWorkbook(input);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后面都一样</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生成新的Excel文件"><a href="#生成新的Excel文件" class="headerlink" title="生成新的Excel文件"></a>生成新的Excel文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 循环生成三个Excel文件</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> excelIndex = <span class="number">0</span> ; excelIndex &lt; <span class="number">3</span> ; excelIndex++ )&#123;</span><br><span class="line">    Workbook newWb = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line"></span><br><span class="line">    Sheet sheet1 = newWb.createSheet(<span class="string">"封面"</span>);</span><br><span class="line">    Sheet sheet2 = newWb.createSheet(<span class="string">"问题分析页"</span>);</span><br><span class="line">    Sheet sheet3 = newWb.createSheet(<span class="string">"问题清单页"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环行</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i++ )&#123;</span><br><span class="line">        Row row = sheet1.createRow(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环行内单元格</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">6</span> ; j++ )&#123;</span><br><span class="line">            Cell cell = row.createCell(j);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 往单元格内 写入内容</span></span><br><span class="line">            cell.setCellValue(<span class="string">"Betahouse, better again"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    String filePath = <span class="string">"C:"</span>+java.io.File.separator;</span><br><span class="line">    <span class="comment">// 输出Excel，设置输出Excel的文件名和文件路径</span></span><br><span class="line">    FileOutputStream out = <span class="keyword">new</span> FileOutputStream(filePath+excelIndex+<span class="string">".xlsx"</span>);  </span><br><span class="line">    newWb.write(out);</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>关于 行、单元格的创建、读取、修改有非常需要关注的几点：</strong></p>
</blockquote>
<ul>
<li>在我们需要获取某Row对象时，如果之前没有<code>createRow(行号)</code>创建过改行，则需要先<code>sheet.createRow(行号)</code>，<code>不能先用getRow(行号)</code>。不然会报 <code>NullPointExpection</code> 。</li>
<li>相反，若之前已经创建过Row对象，则我们必须用<code>getRow()</code>来获取Row对象，不然后一个<code>createRow(行号)</code>会覆盖所有之前在该行设置的属性以及内容</li>
<li><code>Cell</code>【单元格】和<code>Row</code>【行】类似。同一个单元格只能<code>createCell(列号)</code> 一次，而且必须在所有<code>getCell(列号)</code>之前，</li>
<li>同样获取<code>Cell</code>时，必须首先保证获取<code>Row</code>没错，不然也会出现报错或者覆盖的情况。</li>
<li><strong><em>这个坑需要格外注意！！！</em></strong></li>
</ul>
<h3 id="修改Excel的样式（字体、背景色、合并单元格、单元格宽高）"><a href="#修改Excel的样式（字体、背景色、合并单元格、单元格宽高）" class="headerlink" title="修改Excel的样式（字体、背景色、合并单元格、单元格宽高）"></a>修改Excel的样式（字体、背景色、合并单元格、单元格宽高）</h3><h4 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建单元格的属性对象CellStyle</span></span><br><span class="line"><span class="comment">// 注意需要用将要设置的单元格所在workbook来创建CellStyle对象</span></span><br><span class="line">CellStyle cellH1 = newWb.createCellStyle();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Font对象</span></span><br><span class="line">Font fontH1 = newWb.createFont();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置字体的大小，对应的就是Excel中的字体数值</span></span><br><span class="line">fontH1.setFontHeightInPoints((<span class="keyword">short</span>)<span class="number">22</span>);</span><br><span class="line"><span class="comment">// fontH1.setFontHeight((short)(256*10));</span></span><br><span class="line"><span class="comment">// 使用这个不太方便，数值在乘上256之后才是代表几个字符的大小。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置字体类型</span></span><br><span class="line">fontH1.setFontName(<span class="string">"微软雅黑"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置粗体</span></span><br><span class="line">fontH1.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字体的样式添加到单元格样式上，</span></span><br><span class="line">cellH1.setFont(fontH1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将单元格的样式应用到指定单元格。</span></span><br><span class="line">sheet1.getRow(<span class="number">0</span>).getCell(<span class="number">0</span>).setCellStyle(cellH1);</span><br></pre></td></tr></table></figure>

<h4 id="设置背景色"><a href="#设置背景色" class="headerlink" title="设置背景色"></a>设置背景色</h4><blockquote>
<p>通过<code>IndexedColors</code>来获取颜色，再通过<code>.getIndex()</code>来获取short类型的数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建单元格的属性对象CellStyle</span></span><br><span class="line">CellStyle cBackgound = newWb.createCellStyle();</span><br><span class="line"></span><br><span class="line"><span class="comment">//　设置背景色</span></span><br><span class="line">cBackgound.setFillForegroundColor(IndexedColors.SKY_BLUE.getIndex());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置填充方式</span></span><br><span class="line">cBackgound.setFillPattern(XSSFCellStyle.SOLID_FOREGROUND);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置边框</span></span><br><span class="line">cBackgound.setBorderLeft((<span class="keyword">short</span>)XSSFCellStyle.BORDER_THIN);</span><br><span class="line">cBackgound.setBorderRight((<span class="keyword">short</span>)XSSFCellStyle.BORDER_THIN);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置边框颜色</span></span><br><span class="line">cBackgound.setBottomBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将单元格的样式应用到指定单元格。</span></span><br><span class="line">sheet1.getRow(<span class="number">0</span>).getCell(<span class="number">0</span>).setCellStyle(cBackgound);</span><br></pre></td></tr></table></figure>

<h4 id="设置合并单元格"><a href="#设置合并单元格" class="headerlink" title="设置合并单元格"></a>设置合并单元格</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置 合并单元格 </span></span><br><span class="line"><span class="comment">// 合并第一行的第一个到第五个单元格</span></span><br><span class="line">CellRangeAddress region = <span class="keyword">new</span> CellRangeAddress(</span><br><span class="line">    <span class="number">0</span>, <span class="comment">// first row</span></span><br><span class="line">    <span class="number">0</span>, <span class="comment">// last row</span></span><br><span class="line">    <span class="number">0</span>, <span class="comment">// first column</span></span><br><span class="line">    <span class="number">4</span>  <span class="comment">// last column</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 设置sheet1 合并单元格</span></span><br><span class="line">sheet1.addMergedRegion(region);</span><br></pre></td></tr></table></figure>

<h4 id="设置单元格宽、行高"><a href="#设置单元格宽、行高" class="headerlink" title="设置单元格宽、行高"></a>设置单元格宽、行高</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置默认的 单元格宽 和 行高</span></span><br><span class="line">sheet1.setDefaultColumnWidth(<span class="number">20</span>);</span><br><span class="line">sheet1.setDefaultRowHeight((<span class="keyword">short</span>)<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">Row r = sheet1.createRow(<span class="number">1</span>);</span><br><span class="line">Cell c = r.createCell(<span class="number">1</span>);</span><br><span class="line">c.setCellValue(<span class="string">"Hello Betahouse!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置成6个字符的高度</span></span><br><span class="line">r.setHeight((<span class="keyword">short</span>)(<span class="number">256</span>*<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置成10个字符的宽度</span></span><br><span class="line">sheet3.setColumnWidth(<span class="number">0</span>, (<span class="keyword">short</span>)(<span class="number">256</span>*<span class="number">10</span>)));</span><br></pre></td></tr></table></figure>

<h4 id="设置居中"><a href="#设置居中" class="headerlink" title="设置居中"></a>设置居中</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">XSSFCellStyle cCenter=(XSSFCellStyle) newWb.createCellStyle();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置自动换行</span></span><br><span class="line">cCenter.setWrapText(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置竖向居中</span></span><br><span class="line">cCenter.setVerticalAlignment(CellStyle.VERTICAL_CENTER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置水平居中</span></span><br><span class="line">cCenter.setAlignment(CellStyle.ALIGN_CENTER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将单元格的样式应用到指定单元格。</span></span><br><span class="line">sheet1.getRow(<span class="number">0</span>).getCell(<span class="number">0</span>).setCellStyle(cCenter);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查阅java文档可以有很全面的认识</p>
</blockquote>
<blockquote>
<p>下次分享如何将Excel的图片插入到另一个Excel中。</p>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>回望Betahouse</title>
    <url>/2017/03/29/2017-03-30-feeling/</url>
    <content><![CDATA[<img src="betahouse.png" alt width="40%" style="margin:20px auto 50px;">

<h2 id="Hello-Betahouse"><a href="#Hello-Betahouse" class="headerlink" title="Hello Betahouse"></a>Hello Betahouse</h2><p>&emsp;&emsp;一年前的现在，是 <em>betahouse 2016</em> 招新的时候，那时我还是游离在大学的迷雾中。开专业大会的时候，芦苇学姐 还有炳炳学长 给我们开了宣讲会。我当时激情澎湃的报名加入betahouse的大家庭，并且坚持了下来，最后成功留在了这里。</p>
<div align="center">
    <img src="message.jpg" width="50%">
</div>

<p>&emsp;&emsp;当时电话面试完后，还到处托人打听面试的情况，当收到这条短信的时候，那种欣喜难以言表。</p>
<h2 id="Welcome-Again"><a href="#Welcome-Again" class="headerlink" title="Welcome Again"></a>Welcome Again</h2><p>&emsp;&emsp;恍惚间，一年过去了，现在轮到我们招新了，我受邀参与招新页面的设计与开发，作为一个工科男，表示压力山大</p>
<p><img src="smell.jpg" alt="好气哦，但还是要保持微笑"></p>
<p>&emsp;&emsp;找素材的时候在<a href="http://zhizhi.betahouse.us/" target="_blank" rel="noopener">知之博客</a>上看到了我们的学长写的一篇<a href="http://zhizhi.betahouse.us/2016/11/22/b-housexia-sha-pian/" target="_blank" rel="noopener">告别下沙工作室</a>的博文。让我感触很深，以前开分享会的时候，听炳炳学长说他们的日常。</p>
<p><img src="theft.jpg" alt="是时候盗图了"></p>
<p><img src="xiasha.jpg" alt></p>
<p style="text-align: center;font-size: 20px; font-weight: bold;margin-bottom: 70px;">我们工作室可爱的学长学姐们，😋 😋 😋</p>

<p><img src="xiasha3.jpg" alt></p>
<p><img src="xiasha9.jpg" alt></p>
<p><img src="xiasha4.jpg" alt></p>
<p style="text-align: center;font-size: 20px; font-weight: bold;margin-bottom: 70px;">学长们在日租房的生活，各种嗨(｡･∀･)ﾉﾞ嗨😌 😌 😌</p>

<p><img src="xiasha5.jpg" alt></p>
<p><img src="xiasha7.jpg" alt></p>
<p style="text-align: center;font-size: 20px; font-weight: bold;margin-bottom: 70px;">属于我们工作室的荣誉😊 😊 😊</p>

<p><img src="xiasha8.jpg" alt></p>
<p style="text-align: center;font-size: 20px; font-weight: bold;margin-bottom: 70px;">帅气的炳炳和大表哥。🤣 🤣 🤣</p>


<p>&emsp;&emsp;有时大家一起买好多啤酒、吃的，大半夜聚在工作室里看球赛，困了倒头就能睡，一起出去玩，甚至暑假都还能待在学校集训，本来我们2016年的暑假，我们也有机会和学长们一起在下沙集训，就因为G20，杭州的高校都不允许留校，美梦破灭了。</p>
<p><img src="seriously.jpg" alt="你确定你是认真的？"></p>
<p>&emsp;&emsp;萌新好想能跟着学长学东西，学最前沿的技术。然而再见是必不可免的了，我们要自己前行了， 一切从零开始，就像当年betahouse的创始人一样。</p>
<blockquote>
<p>扯得有点远了，附上<a href="http://join.betahouse.us" target="_blank" rel="noopener">2017年招新的网站</a><br>还有我们<a href="http://www.betahouse.us" target="_blank" rel="noopener">工作室官方网址</a><br>以及<a href="http://zhizhi.betahouse.us" target="_blank" rel="noopener">知之博客</a> </p>
</blockquote>
<h2 id="Move-Forward"><a href="#Move-Forward" class="headerlink" title="Move Forward"></a>Move Forward</h2><p style="text-align: center;font-size: 24px; font-weight: bold;margin: 40px 0 30px 0;">青山湖的点点滴滴</p>

<p>我们会一直前行，一起加油吧。以前有学长做我们的大树，我们现在要成为自己的大树。</p>
<p><img src="qingshanhu2.jpg" alt></p>
<p style="text-align: center;font-size: 20px; font-weight: bold;margin-bottom: 70px;">青山湖技术交流分享会</p>

<img src="great.png" width="40%">

<p><img src="qingshanhu1.jpg" alt></p>
<p style="text-align: center;font-size: 20px; font-weight: bold;margin-bottom: 30px;">大家一起桌游嗨起来🤗 🤗 🤗</p>

<p><img src="happy.gif" alt></p>
<p style="text-align: center;font-size: 30px; font-weight: bold;margin: 60px 0 100px;">Betahouse欢迎你们的加入</p>





]]></content>
      <categories>
        <category>小记</category>
      </categories>
      <tags>
        <tag>betahouse</tag>
      </tags>
  </entry>
  <entry>
    <title>Calendar用法</title>
    <url>/2017/03/28/2017-03-29-java-calendar/</url>
    <content><![CDATA[<h1 id="Calendar-一些用法"><a href="#Calendar-一些用法" class="headerlink" title="Calendar 一些用法"></a>Calendar 一些用法</h1><blockquote>
<p>运用calendar加减日期，可以很方便的避免 因每月日期以及闰年日期不同的而产生的逻辑运算</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 获取calendar对象</span></span><br><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取现在的时间戳，以毫秒为单位</span></span><br><span class="line"><span class="comment">// 1490099962065</span></span><br><span class="line"><span class="comment">// 用这个相比较 new Date() 获取效率高，</span></span><br><span class="line"><span class="comment">// 因为他也是通过调用 System.currentTimeMillis()来获取时间戳</span></span><br><span class="line">System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的 long 值(时间戳)设置此 Calendar 的当前时间值。设置的单位是毫秒</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTimeInMillis</span><span class="params">(<span class="keyword">long</span> millis)</span></span>;</span><br><span class="line"><span class="comment">// 1490099962， setTimeInMillis((long)(1490099962)*1000)</span></span><br><span class="line"><span class="comment">// 如果给定时间戳是秒，则需要将int型转换为long类型，或者通过字符串转换。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用给定的 Date 设置此 Calendar 的时间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTime</span><span class="params">(Date date)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用下面三个方法把日历定到任何一个时间：</span></span><br><span class="line">set(<span class="keyword">int</span> year ,<span class="keyword">int</span> month,<span class="keyword">int</span> date);</span><br><span class="line">set(<span class="keyword">int</span> year ,<span class="keyword">int</span> month,<span class="keyword">int</span> date,<span class="keyword">int</span> hour,<span class="keyword">int</span> minute);</span><br><span class="line">set(<span class="keyword">int</span> year ,<span class="keyword">int</span> month,<span class="keyword">int</span> date,<span class="keyword">int</span> hour,<span class="keyword">int</span> minute,<span class="keyword">int</span> second);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Calendar加减日期</span></span><br><span class="line">cal.add(Calendar.YEAR,-<span class="number">1</span>); <span class="comment">// 日期减1年</span></span><br><span class="line">cal.add(Calendar.MONTH,<span class="number">3</span>); <span class="comment">// 日期加3个月</span></span><br><span class="line">cal.add(Calendar.Calendar.WEEK_OF_YEAR,<span class="number">1</span>); <span class="comment">// 日期加一周</span></span><br><span class="line">cal.add(Calendar.DAY_OF_YEAR,<span class="number">10</span>);  <span class="comment">// 日期加10天</span></span><br></pre></td></tr></table></figure>

<h4 id="void-setTimeInMillis-long-millis-的注意点"><a href="#void-setTimeInMillis-long-millis-的注意点" class="headerlink" title="void setTimeInMillis(long millis) 的注意点"></a><em>void setTimeInMillis(long millis)</em> 的注意点</h4><p>给 <code>setTimeInMillis(long)</code> 传参 要么直接传入 long类型 的对象，要么把int转换为long类型</p>
<p>若是要把已知的 以秒为单位的时间戳 传入，则可以如下：<br>先把int类型的1490099962转换为long类型，再乘上1000，不然会超出int的范围而自动截取，所以在乘之前，必须先转换类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setTimeInMillis((<span class="keyword">long</span>)(<span class="number">1490099962</span>)*<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="详细的Calender加减日期的操作"><a href="#详细的Calender加减日期的操作" class="headerlink" title="详细的Calender加减日期的操作"></a>详细的Calender加减日期的操作</h3><p><code>void cal.add(int,int);</code> 是没有返回值的，调用这个方法会直接修改调用对象的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 24小时制 HH:mm:ss   12小时制 hh:mm:ss</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SimpleDateFormat有个注意点，表示的年份的yyyy不要用大写的，</span></span><br><span class="line"><span class="comment">// 大写的表示周年，在2017年之后的年份会出现问题，比如说2017年就会变成2018年，都会往后推一年</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置long类型时，赋上的值需要在最后加上 L 。</span></span><br><span class="line"><span class="keyword">long</span> time = <span class="number">946656000000L</span>; <span class="comment">// 毫秒级别，超出int的大小。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void calendar.add( field , amount );</span></span><br><span class="line"><span class="comment">// 测试的时间： 2000年01月01日 00时00分00秒</span></span><br><span class="line"></span><br><span class="line">a.add(<span class="number">1</span>,<span class="number">1</span>);  <span class="comment">// 2001年01月01日 00时00分00秒  field: 1 Calendar.YEAR;</span></span><br><span class="line">b.add(<span class="number">2</span>,<span class="number">1</span>);  <span class="comment">// 2000年02月01日 00时00分00秒  field: 2 Calendar.MONTH</span></span><br><span class="line">c.add(<span class="number">3</span>,<span class="number">1</span>);  <span class="comment">// 2000年01月08日 00时00分00秒  field: 3 Calendar.WEEK_OF_YEAR</span></span><br><span class="line">d.add(<span class="number">4</span>,<span class="number">1</span>);  <span class="comment">// 2000年01月08日 00时00分00秒  field: 4 Calendar.WEEK_OF_MONTH</span></span><br><span class="line">e.add(<span class="number">5</span>,<span class="number">1</span>);  <span class="comment">// 2000年01月02日 00时00分00秒  field: 5 Calendar.DATE; Calendar.DAY_OF_MONTH</span></span><br><span class="line">f.add(<span class="number">6</span>,<span class="number">1</span>);  <span class="comment">// 2000年01月02日 00时00分00秒  field: 6 Calendar.DAY_OF_YEAR</span></span><br><span class="line">g.add(<span class="number">7</span>,<span class="number">1</span>);  <span class="comment">// 2000年01月02日 00时00分00秒  field: 7 Calendar.DAY_OF_WEEK</span></span><br><span class="line">h.add(<span class="number">8</span>,<span class="number">1</span>);  <span class="comment">// 2000年01月08日 00时00分00秒  field: 8 Calendar.DAY_OF_WEEK_IN_MONTH</span></span><br><span class="line">i.add(<span class="number">9</span>,<span class="number">1</span>);  <span class="comment">// 2000年01月01日 12时00分00秒  field: 9 Calendar.AM_PM</span></span><br><span class="line">j.add(<span class="number">10</span>,<span class="number">1</span>); <span class="comment">// 2000年01月01日 01时00分00秒  field: 10 Calendar.HOUR</span></span><br><span class="line">k.add(<span class="number">11</span>,<span class="number">1</span>); <span class="comment">// 2000年01月01日 01时00分00秒  field: 11 Calendar.HOUR_OF_DAY</span></span><br><span class="line">l.add(<span class="number">12</span>,<span class="number">1</span>); <span class="comment">// 2000年01月01日 00时01分00秒  field: 12 Calendar.MINUTE</span></span><br><span class="line">m.add(<span class="number">13</span>,<span class="number">1</span>); <span class="comment">// 2000年01月01日 00时00分01秒  field: 13 Calendar.SECOND</span></span><br></pre></td></tr></table></figure>

<p>根据上面的测试结果，我们可以把常量归类总结下：</p>
<ul>
<li><p>加减年份：  field: 1</p>
<ul>
<li><em>Calendar.YEAR</em>;</li>
</ul>
</li>
<li><p>加减月份：  field: 2</p>
<ul>
<li><em>Calendar.MONTH</em>;</li>
</ul>
</li>
<li><p>加减周： field: 3 , 4 , 8</p>
<ul>
<li><em>Calendar.WEEK_OF_YEAR</em></li>
<li><em>Calendar.WEEK_OF_MONTH</em></li>
<li><strong><em>Calendar.DAY_OF_WEEK_IN_MONTH</em></strong></li>
</ul>
</li>
<li><p>加减日： field: 5 , 6 , 7</p>
<ul>
<li><em>Calendar.DATE</em></li>
<li><em>Calendar.DAY_OF_MONTH</em></li>
<li><em>Calendar.DAY_OF_YEAR</em></li>
<li><em>Calendar.DAY_OF_WEEK</em></li>
</ul>
</li>
<li><p>加减小时：  field: 10,11</p>
<ul>
<li><em>Calendar.HOUR</em>、</li>
<li><em>Calendar.HOUR_OF_DAY</em></li>
</ul>
</li>
<li><p>加减分钟：  field: 12</p>
<ul>
<li><em>Calendar.MINUTE</em></li>
</ul>
</li>
<li><p>加减秒：  field: 13</p>
<ul>
<li><em>Calendar.SECOND</em></li>
</ul>
</li>
</ul>
<blockquote>
<p><code>Calendar.AM_PM</code> field: 9; 转换成12小时制</p>
</blockquote>
<p>Calendar常量 基本上符合这样的规律：</p>
<ul>
<li>Calendar.WEEK…   表示加减 周。</li>
<li>Calendar.DAY…   表示加减 日。</li>
<li>Calendar.HOUR…   表示加减小时。</li>
</ul>
<blockquote>
<p>除了 <code>Calendar.DAY_OF_WEEK_IN_MONTH</code> 这个比较特殊，是表示加减 周。</p>
</blockquote>
<h4 id="设置某天的起始时间"><a href="#设置某天的起始时间" class="headerlink" title="设置某天的起始时间"></a>设置某天的起始时间</h4><blockquote>
<p>比如你想获得今天的时间段，就需要先获得今天0点的时间和24点的时间</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line">cal.setTimeInMillis(System.currentTimeMillis());</span><br><span class="line">cal.set(Calendar.MILLISECOND,<span class="number">0</span>); <span class="comment">// 设置毫秒为0</span></span><br><span class="line">cal.set(Calendar.SECOND,<span class="number">0</span>);  <span class="comment">// 设置秒为0</span></span><br><span class="line">cal.set(Calendar.MINUTE,<span class="number">0</span>); <span class="comment">// 设置分钟为0</span></span><br><span class="line">cal.set(Calendar.HOUR_OF_DAY,<span class="number">0</span>); <span class="comment">// 设置小时为0</span></span><br><span class="line"><span class="comment">// cal.set(Calendar.HOUR,0); // 设置小时为中午12点</span></span><br></pre></td></tr></table></figure>

<h4 id="获取年份、月份、小时"><a href="#获取年份、月份、小时" class="headerlink" title="获取年份、月份、小时"></a>获取年份、月份、小时</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得年份、月份、小时</span></span><br><span class="line">cal.get(Calendar.MONTH);  <span class="comment">// 返回的数字：0表示一月，1表示二月</span></span><br><span class="line">cal.get(Calendar.DAY_OF_MONTH);  <span class="comment">// 获得这个月的第几天</span></span><br><span class="line">cal.get(Calendar.DAY_OF_WEEK);  <span class="comment">// 获得这个星期的第几天</span></span><br><span class="line">cal.get(Calendar.DAY_OF_YEAR);  <span class="comment">// 获得这个年的第几天</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> cal.getTimeMillis();  <span class="comment">// 获得当前时间的毫秒表示</span></span><br><span class="line"><span class="comment">// 数值取出来的时候传参的时候别忘了转换类型，很多方法的参数都是int类型的。</span></span><br><span class="line"><span class="comment">// 或者需要转换成秒级别的。</span></span><br><span class="line">(<span class="keyword">int</span>)(start.getTimeInMillis()/<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Calendar</tag>
      </tags>
  </entry>
  <entry>
    <title>display: inline-block的小问题</title>
    <url>/2017/03/26/2017-03-27-inline-block/</url>
    <content><![CDATA[<h3 id="一、同行inline-block相互影响"><a href="#一、同行inline-block相互影响" class="headerlink" title="一、同行inline-block相互影响"></a>一、同行inline-block相互影响</h3><p>当两个inline-block元素同行显示时，可能会出现基准为bottom的情况，所以当两边内容不同时，就会出现问题！</p>
<p><img src="1.png" alt="img"></p>
<p>很容易就发现，几个div的对齐方式：</p>
<ul>
<li>内部有字符的：以内部字符的底部为对齐点</li>
<li>内部没有字符的：以整个div的底部为对齐点 </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">    display: inline-block;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    Lorem ipsum dolor sit amet, consectetur adipisicing elit,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Alias, tempore.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span> totam odio magni harum ipsam itaque maiores iure. Repudiandae <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>Lorem ipsum dolor sit amet,  odit!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-使用-vertical-align"><a href="#1-使用-vertical-align" class="headerlink" title="1.使用 vertical-align"></a>1.使用 <code>vertical-align</code></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-使用浮动"><a href="#2-使用浮动" class="headerlink" title="2.使用浮动"></a>2.使用浮动</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当然，浮动是魔鬼，使用浮动很容易是布局产生问题。我们应当尽量避免使用浮动布局。使用<code>display: inline-block</code> 同样可以很好的实现水平排列的效果。</p>
</blockquote>
<h3 id="二、去除inline-block元素间的间距"><a href="#二、去除inline-block元素间的间距" class="headerlink" title="二、去除inline-block元素间的间距"></a>二、去除inline-block元素间的间距</h3><p><img src="2.png" alt></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>你好betahouse<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>去年的现在我来了<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>今年的现在新的我们来了<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>元素默认属性是<code>display: inline-block</code>的元素，或者通过css属性设置成<code>display: inline-block</code>的元素之间有 <strong>空格</strong> 或者 <strong>换行</strong> 都会产生这样的问题。</p>
<p>默认inline-block的元素：</p>
<ul>
<li>图片</li>
<li>按钮</li>
<li>单复选框</li>
<li>单行/多行文本框等HTML控件</li>
</ul>
<h4 id="1-元素间留白间距出现是因为标签段之间的空格，所以，去掉HTML中的空格，自然就消除了元素间间距。"><a href="#1-元素间留白间距出现是因为标签段之间的空格，所以，去掉HTML中的空格，自然就消除了元素间间距。" class="headerlink" title="1.元素间留白间距出现是因为标签段之间的空格，所以，去掉HTML中的空格，自然就消除了元素间间距。"></a>1.元素间留白间距出现是因为标签段之间的空格，所以，去掉HTML中的空格，自然就消除了元素间间距。</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"space"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    你好betahouse<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    去年的现在我来了<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    今年的现在新的我们来了<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者借助html注释</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>你好betahouse<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    --&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>去年的现在我来了<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    --&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>今年的现在新的我们来了<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-使用margin负值"><a href="#2-使用margin负值" class="headerlink" title="2.使用margin负值"></a>2.<del>使用margin负值</del></h4><p>之前看到有博文说用设置 margin 负值的方法来解决空格的问题。但在我测试了chrome、safari、firefox之后，发现有些问题。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.two</span>&#123;</span></span><br><span class="line"><span class="undefined">    margin: 50px 0 0px 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.two</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="undefined">    text-decoration: none;</span></span><br><span class="line"><span class="undefined">    border: 1px solid;</span></span><br><span class="line"><span class="undefined">    background-color: rgb(116, 241, 241);</span></span><br><span class="line"><span class="undefined">    padding: 5px 10px;</span></span><br><span class="line"><span class="undefined">    margin-right: -4px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>你好betahouse<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>去年的现在<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>我们来了<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>今年的现在<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>我们迎接新的你们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="3.png" alt></p>
<p>就算一样的几个元素水平排列，也会出现间隙不同的情况，测试还发现一个很奇怪的情况：在chrome的缩放级别到 150% 的时候，竟然水平元素的间隙都一起消失了，而且不多不少刚好。</p>
<p><img src="5.png" alt></p>
<blockquote>
<p>firefox和chrome一样，缩放级别不同，元素之间的间隙也不同。</p>
</blockquote>
<p><img src="4.png" alt></p>
<p>唯独就safari显示正常了，缩放多少也还是正常的。</p>
<p>所以不建议使用这种方式</p>
<h4 id="2-省略闭合标签"><a href="#2-省略闭合标签" class="headerlink" title="2.省略闭合标签"></a>2.省略闭合标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>你好betahouse</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>去年的现在我来了    </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>今年的现在新的我们来了</span><br><span class="line">    <span class="comment">&lt;!--若要兼容IE6/7，则在只需在最后加上一个闭合标签&lt;/a&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-使用font-size-0"><a href="#3-使用font-size-0" class="headerlink" title="3.使用font-size: 0;"></a>3.使用font-size: 0;</h4><p>给父类加上 <code>font-size: 0</code>，再给 inline-block 的元素设置 font-size</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-webkit-text-size-adjust</span>: none;</span><br><span class="line">    <span class="comment">/* chrome以前版本的最小字体限制，但是现在已经取消 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.two</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h3><blockquote>
<p>建议通过设置 line-height 代替 height 设置元素的高度（height是被line-height撑开的）。</p>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css3 3D变换</title>
    <url>/2017/03/26/2017-03-27-css3-3d/</url>
    <content><![CDATA[<p><img src="1.png" alt></p>
<ul>
<li>rotateX, rotateY, rotateZ</li>
<li>transformX,transformY,transformZ</li>
</ul>
<blockquote>
<p>rotateZ() 类似平面旋转的效果</p>
</blockquote>
<blockquote>
<p>transformZ() 控制和观察者之间的距离</p>
</blockquote>
<p>要实现3D的变换的效果，需要先搭建一个3D的舞台，在要实现3D变换的元素的父类添加三个属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">perspective-origin</span>: 50% 50%; <span class="comment">/*透视点（眼睛看的地方），默认是中心，*/</span></span><br><span class="line"><span class="selector-tag">perspective</span>: 800<span class="selector-tag">px</span>; <span class="comment">/* 视距 */</span></span><br><span class="line"><span class="selector-tag">transform-style</span>: <span class="selector-tag">preserve-3d</span>; <span class="comment">/* flat|preserve-3d，前者是默认值，代表平面，后者是代表3D*/</span></span><br></pre></td></tr></table></figure>

<p> 在CSS3的3D世界中，默认情况下，我们是可以看到背后的元素，因此设置<code>backface-visibility:hidden</code>， 使后面的元素不可见。</p>
<p> 详细请看 <a href="http://www.zhangxinxu.com/wordpress/2012/09/css3-3d-transform-perspective-animate-transition/" target="_blank" rel="noopener">好吧，CSS3 3D transform变换，不过如此！</a></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot框架模板</title>
    <url>/2017/03/24/2017-03-25-springboot/</url>
    <content><![CDATA[<p><a href="https://github.com/tangliangdong/springboot-template" target="_blank" rel="noopener">github模板地址</a></p>
<h3 id="模板的目录结构"><a href="#模板的目录结构" class="headerlink" title="模板的目录结构"></a>模板的目录结构</h3><p><img src="1.png" alt></p>
<ul>
<li>第一个 <ul>
<li><code>Application.java</code> <em>springboot</em> 的主程序，启动的入口</li>
</ul>
</li>
<li>conf<ul>
<li><code>BeansConfig.java</code></li>
<li><code>WebMvcConfig.java</code> 过滤器</li>
</ul>
</li>
<li>controller 页面控制器</li>
<li>druid<ul>
<li><code>DruidAutoConfiguration.java</code></li>
<li><code>DruidProperties.java</code></li>
</ul>
</li>
<li>interceptor<ul>
<li><code>CoreInterceptor.java</code> 拦截器</li>
</ul>
</li>
<li>mapper 数据库映射文件，但 xml文件 在 <em>resources/mapper</em> 文件夹下，需在 <code>application.properties</code> 进行配置</li>
<li>model </li>
<li>service 业务类</li>
<li>util 工具类</li>
</ul>
<blockquote>
<p>项目所有的配置文件都在 <code>/src/main/resources/application.properties</code> 中</p>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>在框架中加入baidu-map</title>
    <url>/2017/03/21/2017-03-22-baidu-map/</url>
    <content><![CDATA[<h3 id="baidu-map-list-jsp"><a href="#baidu-map-list-jsp" class="headerlink" title="baidu-map/list.jsp"></a>baidu-map/list.jsp</h3><p>使用百度地图首先要引入百度api，申请好密匙，然后将下面的代码插入页面中，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak=你的密匙"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为正在做的项目用了框架，之前一直单纯的想插在子页面里面，结果总是没效果，但是新建一个html文件把代码拷贝过去，直接运行html，却是有效的。记起来之前做的ionic2的app中引入百度地图api就是在最外层的框架页面里面引入的，两者还是有相似之处的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- baidu-map/list.jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://zlzkj.com/tags"</span> <span class="attr">prefix</span>=<span class="string">"z"</span>%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span>, <span class="selector-tag">html</span>,<span class="selector-id">#allmap</span> &#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">overflow</span>: hidden;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">font-family</span>:<span class="string">"微软雅黑"</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 放置百度地图的容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"allmap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 采用异步的形式获取后端经纬度数据，生成路径</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">'$&#123;z:u('</span>map/list<span class="string">')&#125;'</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">'POST'</span>,</span></span><br><span class="line"><span class="actionscript">            dataType: <span class="string">'json'</span>,</span></span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> waypoints = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 获取起点</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> p1 = <span class="keyword">new</span> BMap.Point(data.data.list[<span class="number">0</span>].split(<span class="string">","</span>)[<span class="number">0</span>],data.data.list[<span class="number">0</span>].split(<span class="string">","</span>)[<span class="number">1</span>]);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 获取终点</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> p2 = <span class="keyword">new</span> BMap.Point(data.data.list[data.data.list.length<span class="number">-1</span>].split(<span class="string">","</span>)[<span class="number">0</span>],</span></span><br><span class="line"><span class="actionscript">                    data.data.list[data.data.list.length<span class="number">-1</span>].split(<span class="string">","</span>)[<span class="number">1</span>]);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> data.data.list)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> location = data.data.list[item].split(<span class="string">","</span>);</span></span><br><span class="line"><span class="actionscript">                    waypoints.push(<span class="keyword">new</span> BMap.Point(location[<span class="number">0</span>], location[<span class="number">1</span>]));</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// var point = new BMap.Point(location[0],location[1]);</span></span></span><br><span class="line"><span class="undefined">                addMarker(p1);</span></span><br><span class="line"><span class="undefined">                addMarker(p2);</span></span><br><span class="line"><span class="undefined">                </span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> driving = <span class="keyword">new</span> BMap.DrivingRoute(map, &#123;renderOptions:&#123;map: map, autoViewport: <span class="literal">true</span>&#125;&#125;);</span></span><br><span class="line"><span class="undefined">                driving.search(p1, p2,&#123;waypoints:waypoints&#125;);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 编写自定义函数,创建标注</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">addMarker</span><span class="params">(point)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> marker = <span class="keyword">new</span> BMap.Marker(point);</span></span><br><span class="line"><span class="undefined">      map.addOverlay(marker);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"allmap"</span>); <span class="comment">// 创建Map实例</span></span></span><br><span class="line"><span class="actionscript">    map.centerAndZoom(<span class="keyword">new</span> BMap.Point(<span class="number">119.822108</span>,<span class="number">30.288942</span>), <span class="number">13</span>); </span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 初始化地图,设置中心点坐标和地图级别（级别越大显示的地方越小）</span></span></span><br><span class="line"><span class="actionscript">    map.addControl(<span class="keyword">new</span> BMap.MapTypeControl()); <span class="comment">// 添加地图类型控件</span></span></span><br><span class="line"><span class="actionscript">    map.setCurrentCity(<span class="string">"杭州市"</span>); <span class="comment">// 设置地图显示的城市 此项是必须设置的</span></span></span><br><span class="line"><span class="actionscript">    map.enableScrollWheelZoom(<span class="literal">true</span>);  <span class="comment">// 开启鼠标滚轮缩放</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用ajax异步获取坐标"><a href="#使用ajax异步获取坐标" class="headerlink" title="使用ajax异步获取坐标"></a>使用ajax异步获取坐标</h3><p>springMVC的控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MapController.java</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"map"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapController</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model,HttpServletRequest req,HttpServletResponse res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(req.getMethod().equals(<span class="string">"POST"</span>))&#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            list.add(<span class="string">"119.82,30.289"</span>);</span><br><span class="line">            list.add(<span class="string">"120.33,30.37"</span>);</span><br><span class="line">            list.add(<span class="string">"120.72,30.388942"</span>);</span><br><span class="line">            list.add(<span class="string">"120.93,30.3987"</span>);</span><br><span class="line">            list.add(<span class="string">"121.03,30.407"</span>);</span><br><span class="line">            map.put(<span class="string">"list"</span>, list);</span><br><span class="line">            <span class="comment">// 这是利用框架返回json数据</span></span><br><span class="line">            <span class="keyword">return</span> ajaxReturn(res, map, <span class="string">"添加失败"</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"baidu_map/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>baidu-map</tag>
      </tags>
  </entry>
  <entry>
    <title>freemarker自动生成java、jsp</title>
    <url>/2017/03/16/2017-03-17-freemarker/</url>
    <content><![CDATA[<h3 id="什么是freemarker"><a href="#什么是freemarker" class="headerlink" title="什么是freemarker?"></a>什么是freemarker?</h3><blockquote>
<p>FreeMarker是一个模板引擎，一个基于模板生成文本输出的通用工具，使用纯Java编写 </p>
</blockquote>
<h3 id="FreeMarker特性"><a href="#FreeMarker特性" class="headerlink" title="FreeMarker特性"></a>FreeMarker特性</h3><ul>
<li>能够生成各种文本：HTML、XML、RTF、Java源代码等等 </li>
<li>易于嵌入到你的产品中：轻量级；不需要Servlet环境 </li>
<li>插件式模板载入器：可以从任何源载入模板，如本地文件、数据库等等 </li>
<li>你可以按你所需生成文本：保存到本地文件；作为Email发送；从Web应用程序发送它返回给Web浏览器</li>
</ul>
<blockquote>
<p>需要 freemarker.jar</p>
</blockquote>
<p>模板文件均为.ftl后缀的文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ServiceGenerator.java</span></span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> vo.User;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.TemplateException;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.TemplateExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        <span class="comment">// 需要先创建User的类</span></span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        u.setId(<span class="number">1</span>);</span><br><span class="line">        u.setUsername(<span class="string">"张三"</span>);</span><br><span class="line">        list.add(u);</span><br><span class="line">        User u1 = <span class="keyword">new</span> User();</span><br><span class="line">        u1.setId(<span class="number">2</span>);</span><br><span class="line">        u1.setUsername(<span class="string">"李四"</span>);</span><br><span class="line">        list.add(u1);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> ServiceGenerator().gen(<span class="string">"User"</span>,<span class="string">"x_user"</span>,<span class="string">"UserService.java"</span>);</span><br><span class="line">            <span class="keyword">new</span> ServiceGenerator().createJsp(<span class="string">"hello world"</span>,list,<span class="string">"hello.jsp"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TemplateException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用模板创建service代码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pojo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tablename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TemplateException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gen</span><span class="params">(String pojo,String tablename,String filename)</span> </span></span><br><span class="line"><span class="function">                                        <span class="keyword">throws</span> IOException, TemplateException</span>&#123;</span><br><span class="line">        <span class="comment">// 通过Freemaker的Configuration读取相应的ftl</span></span><br><span class="line">        Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">// 设定去哪里读取相应的ftl模板文件</span></span><br><span class="line">        cfg.setDirectoryForTemplateLoading(</span><br><span class="line">                <span class="keyword">new</span> File(<span class="string">"/Users/18072/Workspaces/MyEclipse for Spring 2014/sshTest/src/test1"</span>));   </span><br><span class="line">        cfg.setDefaultEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在模板文件目录中找到名称为 service.ftl 的文件</span></span><br><span class="line">        Template temp = cfg.getTemplate(<span class="string">"service.ftl"</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 填入模板需要的数据</span></span><br><span class="line">        Map&lt;String, Object&gt; root = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        root.put(<span class="string">"POJO"</span>, pojo);</span><br><span class="line">        root.put(<span class="string">"table_name"</span>, tablename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置文件的生成目录</span></span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"/Users/18072/Workspaces/MyEclipse for Spring 2014/sshTest/src/service"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        OutputStream fos = <span class="keyword">new</span>  FileOutputStream( <span class="keyword">new</span> File(dir, filename)); <span class="comment">//java文件的生成目录   </span></span><br><span class="line">        Writer out = <span class="keyword">new</span> OutputStreamWriter(fos);</span><br><span class="line">        <span class="comment">// 通过Template可以将模板文件输出到相应的流</span></span><br><span class="line">        temp.process(root, out);</span><br><span class="line"></span><br><span class="line">        fos.flush();</span><br><span class="line">        fos.close();</span><br><span class="line">        System.out.println(<span class="string">"gen code success!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用模板创建jsp文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TemplateException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createJsp</span><span class="params">(String title,List&lt;User&gt; users,String filename)</span> </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, TemplateException</span>&#123;</span><br><span class="line">        <span class="comment">// 通过Freemarker的Configuration读取相应的ftl</span></span><br><span class="line">        Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">// 设定去哪里读取相应的ftl模板文件</span></span><br><span class="line">        cfg.setDirectoryForTemplateLoading(</span><br><span class="line">        <span class="keyword">new</span> File(<span class="string">"/Users/18072/Workspaces/MyEclipse for Spring 2014/sshTest/src/test1"</span>));   </span><br><span class="line">        cfg.setDefaultEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在模板文件目录中找到名称为 service.ftl 的文件</span></span><br><span class="line">        Template temp = cfg.getTemplate(<span class="string">"hello.ftl"</span>);  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 填入模板需要的数据</span></span><br><span class="line">        Map&lt;String, Object&gt; root = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        root.put(<span class="string">"title"</span>, title);</span><br><span class="line">        root.put(<span class="string">"users"</span>, users);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置文件的生成目录</span></span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"/Users/18072/Workspaces/MyEclipse for Spring 2014/sshTest/WebRoot"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        OutputStream fos = <span class="keyword">new</span>  FileOutputStream( <span class="keyword">new</span> File(dir, filename)); </span><br><span class="line">        Writer out = <span class="keyword">new</span> OutputStreamWriter(fos);</span><br><span class="line">        <span class="comment">// 通过Template可以将模板文件输出到相应的流</span></span><br><span class="line">        temp.process(root, out);</span><br><span class="line">        </span><br><span class="line">        fos.flush();</span><br><span class="line">        fos.close();</span><br><span class="line">        System.out.println(<span class="string">"createJsp code success!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="生成Service的模板文件"><a href="#生成Service的模板文件" class="headerlink" title="生成Service的模板文件"></a>生成Service的模板文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// service.ftl</span></span><br><span class="line"><span class="keyword">package</span> com.hziee.app.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hziee.app.mapper.$&#123;POJO&#125;Mapper;</span><br><span class="line"><span class="keyword">import</span> com.hziee.app.model.$&#123;POJO&#125;;</span><br><span class="line"><span class="keyword">import</span> com.hziee.core.mybatis.SqlRunner;</span><br><span class="line"><span class="keyword">import</span> com.hziee.core.sql.Row;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;POJO&#125;Service &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> $&#123;POJO&#125;Mapper $&#123;table_name&#125;Mapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SqlRunner sqlRunner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;File&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $&#123;table_name&#125;Mapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Row&gt; <span class="title">findBySQL</span><span class="params">(String fields, String where)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select "</span>+fields+<span class="string">" from $&#123;table_name&#125; "</span>+where;</span><br><span class="line">        <span class="keyword">return</span> sqlRunner.select(sql);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> $&#123;POJO&#125; getById(Integer id) &#123;</span><br><span class="line">        <span class="keyword">return</span> $&#123;table_name&#125;Mapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">            $&#123;table_name&#125;Mapper.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">($&#123;POJO&#125; entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (entity.getId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $&#123;table_name&#125;Mapper.updateByPrimaryKey(entity);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> $&#123;table_name&#125;Mapper.insert(entity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生成jsp页面的模板文件"><a href="#生成jsp页面的模板文件" class="headerlink" title="生成jsp页面的模板文件"></a>生成jsp页面的模板文件</h3><blockquote>
<p>若jsp页面中使用了el表达式，则可以用 <code>${r&quot;${}&quot;}</code> 将el表达式包裹在里面。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hello.ftl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">import</span>=<span class="string">"java.util.*"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello !<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello $&#123;title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 循环生成用户 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">#list</span> <span class="attr">users</span> <span class="attr">as</span> <span class="attr">user</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;user.id&#125; 姓名：$&#123;user.username&#125;, $&#123;r"$&#123;username&#125;"&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>生成的效果图</strong> </p>
<p><img src="1.png" alt="img"></p>
<h3 id="数字格式化插值"><a href="#数字格式化插值" class="headerlink" title="数字格式化插值"></a>数字格式化插值</h3><p>数字格式化插值可采用#{expr;format}形式来格式化数字,其中format可以是:</p>
<ul>
<li>mX:小数部分最小X位</li>
<li>MX:小数部分最大X位</li>
</ul>
<p>如下面的例子:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 初始化x、y的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">x</span>=<span class="string">2.582/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">y</span>=<span class="string">4/</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#&#123;x; M2&#125; <span class="tag">&lt;<span class="name">#--</span> 输出<span class="attr">2.58</span> <span class="attr">--</span>&gt;</span></span><br><span class="line">#&#123;y; M2&#125; <span class="tag">&lt;<span class="name">#--</span> 输出<span class="attr">4</span> <span class="attr">--</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#&#123;x; m2&#125; <span class="tag">&lt;<span class="name">#--</span> 输出<span class="attr">2.6</span> <span class="attr">--</span>&gt;</span></span><br><span class="line">#&#123;y; m2&#125; <span class="tag">&lt;<span class="name">#--</span> 输出<span class="attr">4.0</span> <span class="attr">--</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#&#123;x; m1M2&#125; <span class="tag">&lt;<span class="name">#--</span> 输出<span class="attr">2.58</span> <span class="attr">--</span>&gt;</span></span><br><span class="line">#&#123;x; m1M2&#125; <span class="tag">&lt;<span class="name">#--</span> 输出<span class="attr">4.0</span> <span class="attr">--</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>freemarker</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP PDO操作数据库</title>
    <url>/2017/03/11/2017-03-12-php-pdo/</url>
    <content><![CDATA[<blockquote>
<p>虽然php不同spring，但还是应该尽量采用MVC的思想。</p>
</blockquote>
<p><img src="1.png" alt></p>
<h3 id="新建连接数据库的配置文件"><a href="#新建连接数据库的配置文件" class="headerlink" title="新建连接数据库的配置文件"></a>新建连接数据库的配置文件</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// conf.php</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'host'</span>=&gt;<span class="string">'localhost'</span>,</span><br><span class="line">    <span class="string">'user'</span>=&gt;<span class="string">'root'</span>,</span><br><span class="line">    <span class="string">'password'</span>=&gt;<span class="string">''</span>,<span class="comment">//因为测试，我就不设置密码，实际开发中，必须建立新的用户并设置密码</span></span><br><span class="line">    <span class="string">'dbName'</span>=&gt;<span class="string">'phpProject'</span>,</span><br><span class="line">    <span class="string">'charSet'</span>=&gt;<span class="string">'utf8'</span>,</span><br><span class="line">    <span class="string">'port'</span>=&gt;<span class="string">'3306'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="新建获取pdo数据库连接对象的类"><a href="#新建获取pdo数据库连接对象的类" class="headerlink" title="新建获取pdo数据库连接对象的类"></a>新建获取pdo数据库连接对象的类</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Connection.php</span></span><br><span class="line">$dbConf=<span class="keyword">include</span> <span class="string">'conf.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Connection</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $pdo;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取实例化的PDO，单例模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> PDO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">($dbConf)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="keyword">self</span>::$pdo <span class="keyword">instanceof</span> PDO))&#123;</span><br><span class="line">            $dsn =<span class="string">"mysql:host="</span>.$dbConf[<span class="string">'host'</span>].<span class="string">";port="</span>.$dbConf[<span class="string">'port'</span>].</span><br><span class="line">            <span class="string">";dbname="</span>.$dbConf[<span class="string">'dbName'</span>].<span class="string">";charset="</span>.$dbConf[<span class="string">'charSet'</span>];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">self</span>::$pdo = <span class="keyword">new</span> PDO($dsn,$dbConf[<span class="string">'user'</span>], $dbConf[<span class="string">'password'</span>], <span class="keyword">array</span>(PDO::ATTR_PERSISTENT =&gt; <span class="keyword">true</span>,PDO::MYSQL_ATTR_INIT_COMMAND =&gt; <span class="string">"SET NAMES utf8"</span>)); <span class="comment">//保持长连接</span></span><br><span class="line">                <span class="keyword">self</span>::$pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"Error:"</span>.$e-&gt;getMessage().<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$pdo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前端登录页面-Model"><a href="#前端登录页面-Model" class="headerlink" title="前端登录页面 Model"></a>前端登录页面 Model</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- login.php --&gt;</span><br><span class="line">&lt;form action=<span class="string">"../../Controllers/LoginController.php"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">   用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;</span><br><span class="line">   密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;</span><br><span class="line">   &lt;button type=<span class="string">"submit"</span>&gt;登录&lt;/button&gt;</span><br><span class="line">   &lt;a href=<span class="string">"../registed/registed.php"</span>&gt;去注册&lt;/a&gt;</span><br><span class="line">   &lt;span style=<span class="string">"color: red;"</span>&gt;</span><br><span class="line">       <span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">isset</span>($_REQUEST[<span class="string">'status'</span>])?<span class="string">'用户名或密码错误'</span>:<span class="string">''</span>; <span class="meta">?&gt;</span></span><br><span class="line">   &lt;/span&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="页面控制层-Controller"><a href="#页面控制层-Controller" class="headerlink" title="页面控制层 Controller"></a>页面控制层 Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LoginController.php</span></span><br><span class="line"><span class="comment">// 在获取前台表单数据并使用之前，需要先用isset()判断是否存在，不然如果别的地方请求到这个php文件，就会报错。</span></span><br><span class="line"><span class="keyword">if</span>(isset($_POST[<span class="string">'username'</span>])&amp;&amp;isset($_POST[<span class="string">'password'</span>]))&#123;</span><br><span class="line">    $user = <span class="keyword">new</span> User($_POST[<span class="string">'username'</span>],$_POST[<span class="string">'password'</span>]);</span><br><span class="line">    check($user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="业务逻辑层-Service"><a href="#业务逻辑层-Service" class="headerlink" title="业务逻辑层 Service"></a>业务逻辑层 Service</h3><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// LoginService.php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"../Connection/Connection.php"</span>);</span><br><span class="line">$dbConf=<span class="keyword">include</span> <span class="string">'../Connection/conf.php'</span>;</span><br><span class="line">$pdo=Connection::getInstance($dbConf);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($user)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 若需要读取session中的数据，则需在前面调用 session_start();</span></span><br><span class="line">    session_start();</span><br><span class="line">    <span class="comment">// 若要在方法体内使用全局变量，需要在方法体内用 global 声明</span></span><br><span class="line">    <span class="keyword">global</span> $pdo;</span><br><span class="line">    <span class="comment">// 密码使用md5()加密后再存储进数据库。</span></span><br><span class="line">    $password = md5($user-&gt;getPassword());</span><br><span class="line"></span><br><span class="line">    $sql=<span class="string">'SELECT * from User WHERE username=? and password=?'</span>;</span><br><span class="line"></span><br><span class="line">    $stmt = $pdo-&gt;prepare($sql);</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;bindValue(<span class="number">1</span>,$user-&gt;getUsername());</span><br><span class="line">    $stmt-&gt;bindValue(<span class="number">2</span>,$password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行一条预处理语句 .成功时返回 TRUE, 失败时返回 FALSE</span></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line">    <span class="comment">// $rows = $stmt-&gt;fetchAll(); 取出所有的结果集</span></span><br><span class="line">    <span class="comment">// print_r($rows);</span></span><br><span class="line">    <span class="keyword">if</span>($stmt-&gt;rowCount()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $stmt-&gt;fetch();</span><br><span class="line">        <span class="comment">// 将用户信息存入session。</span></span><br><span class="line">        $_SESSION[<span class="string">'username'</span>]=$row[<span class="string">'username'</span>];</span><br><span class="line">        $_SESSION[<span class="string">'id'</span>]=$row[<span class="string">'id'</span>];</span><br><span class="line">        $_REQUEST[<span class="string">'error'</span>] = <span class="string">'用户名或或者密码错误'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求重定向</span></span><br><span class="line">        header(<span class="string">"location: ../views/activity/activity.php"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 请求重定向</span></span><br><span class="line">        header(<span class="string">"location: ../views/login/login.php?status=0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addUser</span><span class="params">($user)</span></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $pdo;</span><br><span class="line">    $sql=<span class="string">'SELECT * from User WHERE username=?'</span>;</span><br><span class="line"></span><br><span class="line">    $stmt = $pdo-&gt;prepare($sql);</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;bindValue(<span class="number">1</span>,$user-&gt;getUsername());</span><br><span class="line">    <span class="comment">// 执行一条预处理语句 .成功时返回 TRUE, 失败时返回 FALSE</span></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line">    <span class="keyword">if</span>($stmt-&gt;rowCount()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'此用户已存在'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $password = md5($user-&gt;getPassword());</span><br><span class="line">        <span class="comment">// 开始事务处理</span></span><br><span class="line">        $pdo-&gt;beginTransaction();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            $sql = <span class="string">'insert into USER(username,password) VALUES (:username,:password)'</span>;</span><br><span class="line">            $sth = $pdo-&gt;prepare($sql);</span><br><span class="line">            $sth-&gt;bindParam(<span class="string">':username'</span>, $user-&gt;getUsername());</span><br><span class="line">            $sth-&gt;bindParam(<span class="string">':password'</span>, $password);</span><br><span class="line">            $sth-&gt;execute();</span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            $pdo-&gt;commit();</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'成功注册'</span>;</span><br><span class="line">            header(<span class="string">"location: ../views/login/login.php"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(PDOException $e)&#123;</span><br><span class="line">            $pdo-&gt;rollBack();</span><br><span class="line">            <span class="keyword">throw</span> $e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果要执行多次查询，Prepare比query快多了</p>
<p>不管是在查询还是插入和更新中，我们都必须要防止sql注入攻击。在使用PDO操作数据库时，可以完全使用Prepare和Execute方法来避免sql注入攻击，但是使用query方法时，需要手动对接收到的字符串转义。可以通过quote方法转义字符串，具体为：</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$sql=<span class="string">"select * from User where username = "</span><span class="string">'.$pdo-&gt;quote($username).'</span><span class="string">" "</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>PDO</tag>
      </tags>
  </entry>
  <entry>
    <title>spring Filter过滤器</title>
    <url>/2017/03/11/2017-03-12-java-filter/</url>
    <content><![CDATA[<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SecurityServlet<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.SecurityServlet<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤所有访问的配置方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SecurityServlet<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果在web.xml中采用的是过滤所有url的形式，则需要给静态资源（.css,.js,.jpg）配置，以获取到这些静态资源。详情见链接  <a href="/2016/12/13/spring-static/">Spring获取静态资源</a><br></li>
<li>或者可以采用另一种过滤方式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SecurityServlet<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SecurityServlet<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SecurityServlet-java"><a href="#SecurityServlet-java" class="headerlink" title="SecurityServlet.java"></a>SecurityServlet.java</h3><blockquote>
<p>新建一个 Servlet类，还要实现 Filter的抽象方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest arg0, ServletResponse arg1,</span></span></span><br><span class="line"><span class="function"><span class="params">            FilterChain arg2)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest)arg0;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse)arg1;</span><br><span class="line">        HttpSession session = request.getSession(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// String usercode = request.getRemoteUser();</span></span><br><span class="line">        String user_role = (String) session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">        String url = request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断用户是否已登录</span></span><br><span class="line">        <span class="keyword">if</span>( user_role ==<span class="keyword">null</span> ||<span class="string">""</span>.equals(user_role))&#123;</span><br><span class="line">            <span class="comment">// 若未登录用户访问的不是登录和注册页面，则自动重定向到登录页面</span></span><br><span class="line">            <span class="keyword">if</span>(url!=<span class="keyword">null</span> &amp;&amp; !url.equals(<span class="string">""</span>) &amp;&amp; url.indexOf(<span class="string">"login"</span>)&lt;<span class="number">0</span> </span><br><span class="line">                                &amp;&amp; url.indexOf(<span class="string">"registed"</span>)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">// 跳转到需要的链接，如登录页面、错误页面等</span></span><br><span class="line">                response.sendRedirect(request.getContextPath() + <span class="string">"/login"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不需要跳转时，arg2.doFilter(arg0, arg1);即可继续执行用户的请求</span></span><br><span class="line">        arg2.doFilter(arg0, arg1);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>FullPage.js全屏滚动插件</title>
    <url>/2017/03/11/2017-03-12-fullPage.js/</url>
    <content><![CDATA[<p>fullPage.js 是一个基于 jQuery 的插件，它能够很方便、很轻松的制作出全屏网站。<br>主要功能</p>
<ul>
<li>支持鼠标滚动-</li>
<li>支持前进后退和键盘控制-</li>
<li>多个回调函数-</li>
<li>支持手机、平板触摸事件-</li>
<li>支持 CSS3 动画-</li>
<li>支持窗口缩放-</li>
<li>窗口缩放时自动调整-</li>
<li>可设置滚动宽度、背景颜色、滚动速度、循环选项、回调、文本对齐方式等等</li>
</ul>
<p>兼容性</p>
<ul>
<li>fullPage.js 支持 IE8+ 及其他现代浏览器。</li>
</ul>
<a id="more"></a>

<h3 id="一、引入文件"><a href="#一、引入文件" class="headerlink" title="一、引入文件"></a>一、引入文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/jquery.fullPage.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jquery.easings.min.js 用于 easing 参数，也可以使用完整的 jQuery UI 代替，如果不需要设置 easing 参数，可去掉改文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.easings.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果 scrollOverflow 设置为 true，则需要引入 jquery.slimscroll.min.js，一般情况下不需要 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.slimscroll.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.fullPage.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="二、HTML"><a href="#二、HTML" class="headerlink" title="二、HTML"></a>二、HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fullpage"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span>第一屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span>第二屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>第三屏的第一屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>第三屏的第二屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>第三屏的第三屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>第三屏的第四屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span>第四屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="三、javascript"><a href="#三、javascript" class="headerlink" title="三、javascript"></a>三、javascript</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不配置参数直接初始化</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#fullpage"</span>).fullpage();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置参数</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#fullpage'</span>).fullpage(&#123;</span><br><span class="line">        <span class="string">'verticalCentered'</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">'css3'</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">'sectionsColor'</span>: [<span class="string">'#254875'</span>, <span class="string">'#00FF00'</span>, <span class="string">'#254587'</span>, <span class="string">'#695684'</span>],</span><br><span class="line">        anchors: [<span class="string">'page1'</span>, <span class="string">'page2'</span>, <span class="string">'page3'</span>, <span class="string">'page4'</span>],</span><br><span class="line">        <span class="string">'navigation'</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">'navigationPosition'</span>: <span class="string">'right'</span>,</span><br><span class="line">        <span class="string">'navigationTooltips'</span>: [<span class="string">'fullPage.js'</span>, <span class="string">'Powerful'</span>, <span class="string">'Amazing'</span>, <span class="string">'Simple'</span>],</span><br><span class="line">        afterLoad: <span class="function"><span class="keyword">function</span>(<span class="params">anchorLink, index</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h3><h4 id="1-选项"><a href="#1-选项" class="headerlink" title="1. 选项"></a>1. 选项</h4><table>
<thead>
<tr>
<th align="left">选项</th>
<th align="center">参数类型</th>
<th align="center">默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">verticalCentered</td>
<td align="center">字符串</td>
<td align="center">true</td>
<td>内容是否垂直居中</td>
</tr>
<tr>
<td align="left">resize</td>
<td align="center">布尔值</td>
<td align="center">false</td>
<td>字体是否随着窗口缩放而缩放</td>
</tr>
<tr>
<td align="left">slidesColor</td>
<td align="center">函数</td>
<td align="center">无</td>
<td>设置背景颜色</td>
</tr>
<tr>
<td align="left">anchors</td>
<td align="center">数组</td>
<td align="center">无</td>
<td>定义锚链接</td>
</tr>
<tr>
<td align="left">scrollingSpeed</td>
<td align="center">整数</td>
<td align="center">700</td>
<td>滚动速度，单位为毫秒</td>
</tr>
<tr>
<td align="left">easing</td>
<td align="center">字符串</td>
<td align="center">easeInQuart</td>
<td>滚动动画方式</td>
</tr>
<tr>
<td align="left">menu</td>
<td align="center">布尔值</td>
<td align="center">false</td>
<td>绑定菜单，设定的相关属性与 anchors 的值对应后，菜单可以控制滚动</td>
</tr>
<tr>
<td align="left">navigation</td>
<td align="center">布尔值</td>
<td align="center">false</td>
<td>是否显示项目导航</td>
</tr>
<tr>
<td align="left">navigationPosition</td>
<td align="center">字符串</td>
<td align="center">right</td>
<td>项目导航的位置，可选 left 或 right</td>
</tr>
<tr>
<td align="left">navigationColor</td>
<td align="center">字符串</td>
<td align="center">#000</td>
<td>项目导航的颜色</td>
</tr>
<tr>
<td align="left">navigationTooltips</td>
<td align="center">数组</td>
<td align="center">空</td>
<td>项目导航的 tip</td>
</tr>
<tr>
<td align="left">slidesNavigation</td>
<td align="center">布尔值</td>
<td align="center">false</td>
<td>是否显示左右滑块的项目导航</td>
</tr>
<tr>
<td align="left">slidesNavPosition</td>
<td align="center">字符串</td>
<td align="center">bottom</td>
<td>左右滑块的项目导航的位置，可选 top 或 bottom</td>
</tr>
<tr>
<td align="left">controlArrowColor</td>
<td align="center">字符串</td>
<td align="center">#fff</td>
<td>左右滑块的箭头的背景颜色</td>
</tr>
<tr>
<td align="left">loopBottom</td>
<td align="center">布尔值</td>
<td align="center">false</td>
<td>滚动到最底部后是否滚回顶部</td>
</tr>
<tr>
<td align="left">loopTop</td>
<td align="center">布尔值</td>
<td align="center">false</td>
<td>滚动到最顶部后是否滚底部</td>
</tr>
<tr>
<td align="left">loopHorizontal</td>
<td align="center">布尔值</td>
<td align="center">true</td>
<td>左右滑块是否循环滑动</td>
</tr>
<tr>
<td align="left">autoScrolling</td>
<td align="center">布尔值</td>
<td align="center">true</td>
<td>是否使用插件的滚动方式，如果选择 false，则会出现浏览器自带的滚动条</td>
</tr>
<tr>
<td align="left">scrollOverflow</td>
<td align="center">布尔值</td>
<td align="center">false</td>
<td>内容超过满屏后是否显示滚动条</td>
</tr>
<tr>
<td align="left">css3</td>
<td align="center">布尔值</td>
<td align="center">false</td>
<td>是否使用 CSS3 transforms 滚动</td>
</tr>
<tr>
<td align="left">paddingTop</td>
<td align="center">字符串</td>
<td align="center">0</td>
<td>与顶部的距离</td>
</tr>
<tr>
<td align="left">paddingBottom</td>
<td align="center">字符串</td>
<td align="center">0</td>
<td>与底部距离</td>
</tr>
<tr>
<td align="left">fixedElements</td>
<td align="center">字符串</td>
<td align="center">无</td>
<td>&nbsp;</td>
</tr>
<tr>
<td align="left">normalScrollElements</td>
<td align="center">无</td>
<td align="center"></td>
<td>&nbsp;</td>
</tr>
<tr>
<td align="left">keyboardScrolling</td>
<td align="center">布尔值</td>
<td align="center">true</td>
<td>是否使用键盘方向键导航</td>
</tr>
<tr>
<td align="left">touchSensitivity</td>
<td align="center">整数</td>
<td align="center">5</td>
<td>&nbsp;</td>
</tr>
<tr>
<td align="left">continuousVertical</td>
<td align="center">布尔值</td>
<td align="center">false</td>
<td>是否循环滚动，与 loopTop 及 loopBottom 不兼容</td>
</tr>
<tr>
<td align="left">animateAnchor</td>
<td align="center">布尔值</td>
<td align="center">true</td>
<td>&nbsp;</td>
</tr>
<tr>
<td align="left">normalScrollElementTouchThreshold</td>
<td align="center">整数</td>
<td align="center">5</td>
<td>&nbsp;</td>
</tr>
</tbody></table>
<h4 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h4><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>moveSectionUp()</td>
<td>向上滚动</td>
</tr>
<tr>
<td>moveSectionDown()</td>
<td>向下滚动</td>
</tr>
<tr>
<td>moveTo(section, slide)</td>
<td>滚动到</td>
</tr>
<tr>
<td>moveSlideRight()</td>
<td>slide 向右滚动</td>
</tr>
<tr>
<td>moveSlideLeft()</td>
<td>slide 向左滚动</td>
</tr>
<tr>
<td>setAutoScrolling()</td>
<td>设置页面滚动方式，设置为 true 时自动滚动</td>
</tr>
<tr>
<td>setAllowScrolling()</td>
<td>添加或删除鼠标滚轮/触控板控制</td>
</tr>
<tr>
<td>setKeyboardScrolling()</td>
<td>添加或删除键盘方向键控制</td>
</tr>
<tr>
<td>setScrollingSpeed()</td>
<td>定义以毫秒为单位的滚动速度</td>
</tr>
</tbody></table>
<h4 id="3-回调函数"><a href="#3-回调函数" class="headerlink" title="3. 回调函数"></a>3. 回调函数</h4><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>afterLoad</td>
<td>滚动到某一屏后的回调函数，接收 anchorLink 和 index 两个参数，anchorLink 是锚链接的名称，index 是序号，从1开始计算</td>
</tr>
<tr>
<td>onLeave</td>
<td>滚动前的回调函数，接收 index、nextIndex 和 direction 3个参数：</td>
</tr>
<tr>
<td>index</td>
<td>是离开的“页面”的序号，从1开始计算；</td>
</tr>
<tr>
<td>nextIndex</td>
<td>是滚动到的“页面”的序号，从1开始计算；</td>
</tr>
<tr>
<td>direction</td>
<td>判断往上滚动还是往下滚动，值是 up 或 down。</td>
</tr>
<tr>
<td>afterRender</td>
<td>页面结构生成后的回调函数，或者说页面初始化完成后的回调函数</td>
</tr>
<tr>
<td>afterSlideLoad</td>
<td>滚动到某一水平滑块后的回调函数，与 afterLoad 类似，接收 anchorLink、index、slideIndex、direction 4个参数</td>
</tr>
<tr>
<td>onSlideLeave</td>
<td>某一水平滑块滚动前的回调函数，与 onLeave 类似，接收 anchorLink、index、slideIndex、direction 4个参数</td>
</tr>
</tbody></table>
<h3 id="如何获取"><a href="#如何获取" class="headerlink" title="如何获取"></a>如何获取</h3><p><a href="http://alvarotrigo.com/fullPage/" target="_blank" rel="noopener">下载地址</a><br><br><a href="https://github.com/alvarotrigo/fullPage.js" target="_blank" rel="noopener">fullPage.js GitHub 地址下载地址</a><br><br><a href="https://github.com/yanhaijing/zepto.fullpage" target="_blank" rel="noopener">专注于移动端的fullPage.js</a><br></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>spring返回json对象</title>
    <url>/2017/03/10/2017-03-11-java-returnJson/</url>
    <content><![CDATA[<p> 一般用在ajax访问后台数据，不刷新页面更新部分页面数据。</p>
<blockquote>
<p>在 <code>@RequestMapping</code> 中设置 <code>produces=&quot;application/json&quot;</code><br>表示将返回的Object的数据转换成JSON对象再返回给客户端。</p>
</blockquote>
<blockquote>
<p>在需要返回 json 对象的方法前加上 <code>@ResponseBody</code>。</p>
</blockquote>
<h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// consumes="application/json"是限制前台传过来的数据格式必须是JSON类型的。</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"verify"</span>,method=RequestMethod.POST,produces=<span class="string">"application/json"</span>,</span><br><span class="line">        consumes=<span class="string">"application/json"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">verify</span><span class="params">(String username,Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletRequest req,HttpServletResponse res)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以通过Map键值对的形式返回</span></span><br><span class="line">    <span class="comment">//也可以传入一个对象</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="keyword">if</span>(loginService.verify(username))</span><br><span class="line">        map.put(<span class="string">"status"</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        map.put(<span class="string">"status"</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"verify"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">verify</span><span class="params">(String username,Model model,HttpServletRequest req,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletResponse res)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="keyword">if</span>(loginService.verify(username))</span><br><span class="line">        map.put(<span class="string">"status"</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        map.put(<span class="string">"status"</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// JSONObject.fromObject(Object)可以将一个对象转换成JSON对象。</span></span><br><span class="line">    <span class="keyword">return</span> JSONObject.fromObject(map).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果加了该方法 <code>@ResponseBody</code> ，则不能再返回一个页面。</p>
</blockquote>
<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表单失去焦点后触发</span></span><br><span class="line">$username.focusout(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span>($<span class="keyword">this</span>.val()!==<span class="string">''</span>)&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">"&lt;c:url value='/verify'/&gt;"</span>,</span><br><span class="line">            type: <span class="string">'POST'</span>,</span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            data: &#123;<span class="attr">username</span>: $<span class="keyword">this</span>.val()&#125;,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(data.status === <span class="number">1</span>)&#123; <span class="comment">//用户名已存在</span></span><br><span class="line">                    canSubmit = <span class="literal">false</span>;</span><br><span class="line">                    $<span class="keyword">this</span>.css(<span class="string">'border-color'</span>, <span class="string">'green'</span>);</span><br><span class="line">                    $<span class="keyword">this</span>.next(<span class="string">'span'</span>).remove();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123; <span class="comment">//用户名不存在</span></span><br><span class="line">                    canSubmit = <span class="literal">true</span>;</span><br><span class="line">                    $<span class="keyword">this</span>.css(<span class="string">'border-color'</span>, <span class="string">'red'</span>);</span><br><span class="line">                    $<span class="keyword">this</span>.after(<span class="string">'&lt;span style="color:red"&gt;此账户已存在&lt;/span&gt;'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="json转换需要的第三方的jar"><a href="#json转换需要的第三方的jar" class="headerlink" title="json转换需要的第三方的jar"></a>json转换需要的第三方的jar</h3><ul>
<li>json-lib-2.4-jdk15.jar</li>
<li>ezmorph-1.0.6.jar</li>
<li>commons-logging.jar</li>
<li>commons-lang.jar</li>
<li>commons-collections.jar</li>
<li>commons-beanutils.jar</li>
</ul>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>spring图片上传</title>
    <url>/2017/03/10/2017-03-11-photo-upload/</url>
    <content><![CDATA[<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>需要在form标签里加上<code>enctype=&quot;multipart/form-data&quot;</code>，不然程序可能会出现如下的异常</p>
<blockquote>
<p><code>org.apache.catalina.connector.RequestFacade cannot be cast to org.springframework.web.multipart.MultipartHttpServletRequest</code></p>
</blockquote>
<p><code>method=&quot;post&quot;</code>上传的文件类型也必须是<code>post</code>。</p>
<p>要限制上传的文件类型，可以给<code>&lt;input type=&quot;file&quot;&gt;</code>加上</p>
<ul>
<li><code>accept=&quot;image/*&quot;</code>表示允许上传所有的图片类型，</li>
<li><code>accept=&quot;image/gif, image/jpeg,image/png&quot;</code>表示允许上传的文件仅限于<code>jpg,gif,png</code>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&lt;c:url value='/public'/&gt;"</span> <span class="attr">id</span>=<span class="string">"myForm"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    标题：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">    地点：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"local"</span>&gt;</span></span><br><span class="line">    时间：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"time"</span>&gt;</span></span><br><span class="line">    人数：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span>  <span class="attr">name</span>=<span class="string">"total"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file_data"</span> <span class="attr">accept</span>=<span class="string">"image/gif, image/jpeg,image/png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"public-btn"</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><blockquote>
<p>在控制器有两种方式可以获取到提交的文件</p>
</blockquote>
<h4 id="一、自动和参数对应"><a href="#一、自动和参数对应" class="headerlink" title="一、自动和参数对应"></a>一、自动和参数对应</h4><p><code>@RequestParam(&quot;file_data&quot;) MultipartFile filedata)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"public"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">publicActivity</span><span class="params">(@RequestParam(<span class="string">"file_data"</span>)</span> MultipartFile filedata,</span></span><br><span class="line"><span class="function">        String title,Model model,HttpServletRequest req,HttpServletResponse res) </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalStateException, IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">    String pathRoot = req.getSession().getServletContext().getRealPath(<span class="string">""</span>);</span><br><span class="line">    String path=<span class="string">""</span>;</span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    Person person = (Person)session.getAttribute(<span class="string">"person"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!filedata.isEmpty())&#123;  </span><br><span class="line">        String fileName = filedata.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 获取图片的扩展名</span></span><br><span class="line">        String extensionName = fileName</span><br><span class="line">                .substring(fileName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd-hh-mm");</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 新的图片文件名 = 获取时间戳+"."图片扩展名</span></span><br><span class="line">        <span class="comment">// System.currentTimeMillis()用来获取当前时间的时间戳</span></span><br><span class="line">        String newFileName = String.valueOf(System.currentTimeMillis())</span><br><span class="line">                + <span class="string">"."</span> + extensionName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得文件类型（可以判断如果不是图片，禁止上传）  </span></span><br><span class="line">        <span class="comment">// 可以在前端限制文件类型</span></span><br><span class="line">        String contentType=filedata.getContentType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得文件后缀名称  </span></span><br><span class="line">        <span class="comment">// String imageName=contentType.substring(contentType.indexOf("/")+1);</span></span><br><span class="line">        path = newFileName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将图片写入对应的位置</span></span><br><span class="line">        filedata.transferTo(<span class="keyword">new</span> File( pathRoot + path ));  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...... 再将图片的路径存入数据库。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二、通过HttpServletRequest获取"><a href="#二、通过HttpServletRequest获取" class="headerlink" title="二、通过HttpServletRequest获取"></a>二、通过HttpServletRequest获取</h4><p>获取到<code>MultipartFile</code>后，再进行后续上传的操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;</span><br><span class="line">MultipartFile filedata = multipartRequest.getFile(<span class="string">"file"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="dispatcher-servlet-xml配置文件"><a href="#dispatcher-servlet-xml配置文件" class="headerlink" title="dispatcher-servlet.xml配置文件"></a><code>dispatcher-servlet.xml</code>配置文件</h3><blockquote>
<p>配置multipartResolver来解析带enctype=”multipart/form-data”属性的表单</p>
</blockquote>
<p>** 如果不配置<code>multipartResolver</code>，那带属性<code>enctype=&quot;multipart/form-data&quot;</code>的所有表单数据就都无法获取到数据 *</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文件上传头部编码，默认是iso-8859-1，注意defaultEncoding必须和用户的jsp的pageEncoding属性一致，以便能正常读取文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- maxUploadSize 是上传文件的大小，单位为字节 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 读取文件到内存中最大的字节数，默认是1024 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要引入<code>commons-fileupload-1.3.2.jar</code></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>easyui datagrid复选框选择记录</title>
    <url>/2017/01/16/2017-01-16-easyui-datagrid-checkbox/</url>
    <content><![CDATA[<h3 id="easyui通过复选框选择记录的不同情况"><a href="#easyui通过复选框选择记录的不同情况" class="headerlink" title="easyui通过复选框选择记录的不同情况"></a>easyui通过复选框选择记录的不同情况</h3><h4 id="选中记录只能通过点击复选框，而点击记录即可取消复选框"><a href="#选中记录只能通过点击复选框，而点击记录即可取消复选框" class="headerlink" title="选中记录只能通过点击复选框，而点击记录即可取消复选框"></a>选中记录只能通过点击复选框，而点击记录即可取消复选框</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">fit</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"measurement-admin-table"</span> <span class="attr">class</span>=<span class="string">"jq-datagrid"</span> <span class="attr">style</span>=<span class="string">"height: 600px;"</span> <span class="attr">data-options</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">    url:'$&#123;z:u('measurement/list')&#125;?power=2&amp;status=2',</span></span></span><br><span class="line"><span class="tag"><span class="string">    method:'post',</span></span></span><br><span class="line"><span class="tag"><span class="string">    striped: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">    idField:'id',</span></span></span><br><span class="line"><span class="tag"><span class="string">    singleSelect: false,</span></span></span><br><span class="line"><span class="tag"><span class="string">    selectOnCheck:true,</span></span></span><br><span class="line"><span class="tag"><span class="string">    checkOnSelect:false,</span></span></span><br><span class="line"><span class="tag"><span class="string">    columns: [[</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#123;checkbox:true&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#123;field:'projectName',title:'项目名称'&#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]],</span></span></span><br><span class="line"><span class="tag"><span class="string">    onLoadSuccess: function (data) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        window.IsCheckFlag = false;</span></span></span><br><span class="line"><span class="tag"><span class="string">        if(!IsCheckFlag)&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            window.is = false;</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    onClickCell: function (rowIndex, field, value) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        is = false;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    onSelect: function (rowIndex, rowData) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        if (!is) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            IsCheckFlag = false;</span></span></span><br><span class="line"><span class="tag"><span class="string">            is=true;</span></span></span><br><span class="line"><span class="tag"><span class="string">            $('.jq-datagrid').datagrid('unselectRow', rowIndex);</span></span></span><br><span class="line"><span class="tag"><span class="string">            $('.jq-datagrid').datagrid('uncheckRow', rowIndex);</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    onCheck: function(rowIndex,rowData)&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        IsCheckFlag = false;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    onUnselect: function (rowIndex, rowData) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        if (!is) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            IsCheckFlag = false;</span></span></span><br><span class="line"><span class="tag"><span class="string">            is=true;</span></span></span><br><span class="line"><span class="tag"><span class="string">            $('.jq-datagrid').datagrid('selectRow', rowIndex);</span></span></span><br><span class="line"><span class="tag"><span class="string">            $('.jq-datagrid').datagrid('uncheckRow', rowIndex);</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    </span></span></span><br><span class="line"><span class="tag"><span class="string">&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.<code>onLoadSuccess</code>是datagrid加载数据成功时执行的。<br>1.<code>onClickCell</code>当用户单击一个单元格时触发。<br>1.<code>onSelect</code>当用户选中一行时触发。<br>1.<code>onCheck</code>当用户勾选一行的复选框时触发。<br>1.<code>onUnselect</code>当用户取消选中一行时触发。</p>
<h4 id="选中取消记录均只能通过点击复选框"><a href="#选中取消记录均只能通过点击复选框" class="headerlink" title="选中取消记录均只能通过点击复选框"></a>选中取消记录均只能通过点击复选框</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">fit</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"measurement-admin-table"</span> <span class="attr">class</span>=<span class="string">"jq-datagrid"</span> <span class="attr">style</span>=<span class="string">"height: 600px;"</span> <span class="attr">data-options</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">    url:'$&#123;z:u('measurement/list')&#125;?power=2&amp;status=2',</span></span></span><br><span class="line"><span class="tag"><span class="string">    method:'post',</span></span></span><br><span class="line"><span class="tag"><span class="string">    striped: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">    idField:'id',</span></span></span><br><span class="line"><span class="tag"><span class="string">    singleSelect: false,</span></span></span><br><span class="line"><span class="tag"><span class="string">    selectOnCheck:true,</span></span></span><br><span class="line"><span class="tag"><span class="string">    checkOnSelect:false,</span></span></span><br><span class="line"><span class="tag"><span class="string">    columns: [[</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#123;checkbox:true&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#123;field:'projectName',title:'项目名称'&#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]],</span></span></span><br><span class="line"><span class="tag"><span class="string">    onLoadSuccess: function (data) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        window.IsCheckFlag = false;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    onClickCell: function (rowIndex, field, value) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        IsCheckFlag = false;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    onSelect: function (rowIndex, rowData) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        if (!IsCheckFlag) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            IsCheckFlag = true;</span></span></span><br><span class="line"><span class="tag"><span class="string">            $('.jq-datagrid').datagrid('unselectRow', rowIndex);</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;,                    </span></span></span><br><span class="line"><span class="tag"><span class="string">    onUnselect: function (rowIndex, rowData) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        if (!IsCheckFlag) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            IsCheckFlag = true;</span></span></span><br><span class="line"><span class="tag"><span class="string">            $('.jq-datagrid').datagrid('selectRow', rowIndex);</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    </span></span></span><br><span class="line"><span class="tag"><span class="string">&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>初次上手被easyui坑过好多次，虽然界面不好看，但是能够很方便的实现一些前台展示后台数据的方法，比较适合做后台管理系统之类的。</p>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>easyui</tag>
      </tags>
  </entry>
  <entry>
    <title>spring获取url的中文参数</title>
    <url>/2017/01/16/2017-01-16-url/</url>
    <content><![CDATA[<blockquote>
<p>因为不同浏览器对url中的浏览器编码方式不同，因此依靠浏览器对中文的解码，后台极易出现乱码的情况，但因为javascript对url的编码方式是一样的，因此可以先用js对提前对url进行编码，不用浏览器插手，也就能避免编码方式不同的问题。</p>
</blockquote>
<p>详情见这里，<a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="noopener">关于URL编码- 阮一峰的网络日志</a></p>
<h3 id="javascript编码函数：encodeURI"><a href="#javascript编码函数：encodeURI" class="headerlink" title="javascript编码函数：encodeURI()"></a>javascript编码函数：encodeURI()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">encodeURI</span>(<span class="string">'download?filename=我是中文'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="javascript解码函数：decodeURI"><a href="#javascript解码函数：decodeURI" class="headerlink" title="javascript解码函数：decodeURI()"></a>javascript解码函数：decodeURI()</h3><h3 id="spring后台"><a href="#spring后台" class="headerlink" title="spring后台:"></a>spring后台:</h3><h4 id="new-String-quot-中文-quot-getBytes-quot-ISO-8859-1-quot-quot-UTF-8-quot"><a href="#new-String-quot-中文-quot-getBytes-quot-ISO-8859-1-quot-quot-UTF-8-quot" class="headerlink" title="new String(&quot;中文&quot;.getBytes(&quot;ISO-8859-1&quot;), &quot;UTF-8&quot;)"></a><code>new String(&quot;中文&quot;.getBytes(&quot;ISO-8859-1&quot;), &quot;UTF-8&quot;)</code></h4><p>JAVA在网络传输中使用的编码是”ISO-8859-1”，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"download"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">download</span><span class="params">(String filename)</span></span>&#123;</span><br><span class="line">    String encodeFilename = <span class="keyword">new</span> String(<span class="string">"filename"</span>.getBytes(<span class="string">"ISO-8859-1"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"file"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以在服务器端获取到正常的中文了。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>url</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax提交中文数据的乱码问题</title>
    <url>/2016/12/27/2016-12-27-ajax/</url>
    <content><![CDATA[<blockquote>
<p>ajax带参数提交，如果直接拼在url后面，中文会出现乱码</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">"POST"</span>,</span><br><span class="line">    url:<span class="string">"project/upload?projectName=我是中文"</span>,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ajax还有一个data参数，可以存放要提交的json数据格式</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">"POST"</span>,</span><br><span class="line">    url:<span class="string">"project/upload"</span>,</span><br><span class="line">    <span class="comment">//键值对，json数据格式</span></span><br><span class="line">    <span class="comment">//&#123;key:value&#125;</span></span><br><span class="line">    data:&#123;<span class="attr">projectName</span>:<span class="string">'我是中文'</span>&#125;,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务器端依旧是通过<code>request.getParameter(&quot;key&quot;)</code>来获取数据的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">                HttpServletRequest req,HttpServletResponse res)</span></span>&#123;</span><br><span class="line">    String projectName = req.getParameter(<span class="string">"projectName"</span>);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>既然JQuery ajax提供了这种data这个属性供用户来填写要传输的数据，我也建议不要使用url后面带参数的方法进行数据的传输，而要多使用ajax的data属性。</p>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring mybatis一对多表查询</title>
    <url>/2016/12/19/2016-12-14-spring-mybatis/</url>
    <content><![CDATA[<p>比如用户和活动的关系，一个用户可以参加多个活动，一个活动允许多个用户参加，虽然这是多对多的关系，但是实际应用中，基本用到的是一对多，如果用户需要查看自己参与的活动，那用户就只有一个，但活动有多个。</p>
<h3 id="用户活动表"><a href="#用户活动表" class="headerlink" title="用户活动表"></a>用户活动表</h3><p><strong>用户表</strong></p>
<p><img src="spring-mybatis1.jpg" alt="img"></p>
<p><strong>活动表</strong></p>
<p><img src="spring-mybatis2.jpg" alt="img"></p>
<p><strong>用户参与活动表</strong></p>
<p><img src="spring-mybatis3.jpg" alt="img"></p>
<h3 id="用户活动数据类型"><a href="#用户活动数据类型" class="headerlink" title="用户活动数据类型"></a>用户活动数据类型</h3><p><strong>用户模型类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.hziee.models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String showname;</span><br><span class="line">    <span class="keyword">private</span> Integer power;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter和setter方法</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>活动模型类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.hziee.models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activitys</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer activityId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> startTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> endTime;</span><br><span class="line">    <span class="keyword">private</span> String place;</span><br><span class="line">    <span class="keyword">private</span> Integer peopleCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//参与活动的用户集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; uList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter和setter方法</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>参与活动模型类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.hziee.models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attendactivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer activityId;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter和setter方法</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mapper映射文件"><a href="#mapper映射文件" class="headerlink" title="mapper映射文件"></a>mapper映射文件</h3><p>一对多映射的关键是使用了 collection映射。</p>
<p>在<strong>ActivityMapper.xml</strong>加上resultMap，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"AttendResultMap"</span> <span class="attr">type</span>=<span class="string">"edu.hziee.models.Activitys"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"activity_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"activityId"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"userId"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"start_time"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"startTime"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"end_time"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"endTime"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"place"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"place"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"people_count"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"peopleCount"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pass"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"pass"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 关联活动明细信息 </span></span><br><span class="line"><span class="comment">    一个订单关联查询出了多条订单明细,要使用collection映射</span></span><br><span class="line"><span class="comment">    collection:对关联查询到的多条记录映射到集合中</span></span><br><span class="line"><span class="comment">    property:将关联查询到的多条记录映射到Activitys类的那个属性</span></span><br><span class="line"><span class="comment">    ofType:指定映射的集合属性中uList的类型</span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"uList"</span> <span class="attr">ofType</span>=<span class="string">"edu.hziee.models.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"showname"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"showname"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"power"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"power"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再加入查询语句。</p>
<p>如果连接的几张表里有同名的字段，需要取别名，而且resultMap里的column值也要改成别名，不然无法将User映射到collection里。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 因为activitys表的id字段与user表的id字段重名了，因此需要给activity表的字段id取别名activity_id，不然在colleaction映射会出问题 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- activitys.id as activity_id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAttendUserListByActivityId"</span> <span class="attr">resultMap</span>=<span class="string">"AttendResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    select user.showname,user.id,</span><br><span class="line">    activitys.id as activity_id,activitys.name,activitys.start_time,activitys.end_time,activitys.place,activitys.people_count,activitys.pass </span><br><span class="line">    from activitys left join attendactivity on activitys.id = attendactivity.activity_id</span><br><span class="line">    left join user on attendactivity.user_id = user.id </span><br><span class="line">    where activitys.id = #&#123;activityId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <strong>ActivityMapper.java</strong> 加上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Activitys&gt; <span class="title">selectAttendUserListByActivityId</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                    @Param(<span class="string">"activityId"</span>)</span> <span class="keyword">int</span> activityId)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="业务类"><a href="#业务类" class="headerlink" title="业务类"></a>业务类</h3><p>在 <strong>ActivityService.java</strong> 加上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Activitys&gt; <span class="title">selectAttendUserListByActivityId</span><span class="params">(<span class="keyword">int</span> activityId)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> activitysMapper.selectAttendUserListByActivityId(activityId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制器类"><a href="#控制器类" class="headerlink" title="控制器类"></a>控制器类</h3><p>在通过spring的控制器将数据以json形式返回到前台显示。</p>
<p>需要相应的jar包</p>
<ul>
<li>json-lib-2.4-jdk15.jar</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//UserController.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/public"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">publiced</span><span class="params">(Model model,HttpServletRequest req,HttpServletResponse res)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span>(req.getMethod().equals(<span class="string">"POST"</span>))&#123;</span><br><span class="line">        <span class="keyword">int</span> activityId = Integer.parseInt(</span><br><span class="line">                req.getParameter(<span class="string">"activityId"</span>));</span><br><span class="line">        PrintWriter out = res.getWriter();</span><br><span class="line">        List&lt;Activitys&gt; list = attendService.selectAttendUserListByActivityId(activityId);</span><br><span class="line">        <span class="comment">//将对象转换成json对象</span></span><br><span class="line">        JSONArray array = JSONArray.fromObject(list);</span><br><span class="line">        String jsonstr = array.toString();</span><br><span class="line">        <span class="comment">//返回给ajax</span></span><br><span class="line">        out.write(jsonstr);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><p>通过<code>JSON.parse(data)</code>将字符串解析为json对象</p>
<p><code>eval(&#39;(&#39; + str + &#39;)&#39;)</code>也可以解析字符串，但如果str是一串恶意js代码，同样会执行，但<code>parse()</code>则会报错，所以一般不用<code>eval()</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.post(<span class="string">'&lt;c:url value="/userinfo/public" /&gt;?type=2'</span>,&#123;<span class="attr">activityId</span>: $(<span class="keyword">this</span>).attr(<span class="string">'data'</span>)&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, xhr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery给服务端生成的DOM绑定事件</title>
    <url>/2016/12/19/2016-12-19-JQuery-memo/</url>
    <content><![CDATA[<p>通过服务端传过来的Model生成的DOM元素，因为可能会有多个按钮，如果通过设置id值来获取按钮，则只会有第一个带这个id值的按钮绑上指定的事件，其他按钮则没有。</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-hover"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>活动名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>发起人<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>发起时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>结束时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>活动地点<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>可参与人数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;activitys&#125;"</span> <span class="attr">var</span>=<span class="string">"activity"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;activity.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-info"</span>&gt;</span>$&#123;activity.getuList().get(0).getShowname()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;activity.getDateStartTime()&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;activity.getDateEndTime()&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;activity.place&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;activity.peopleCount&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 想要给动态生成的按钮绑上事件，不能通过设定id值，而要通过class属性 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">data</span>=<span class="string">"$&#123;activity.id&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger attend-btn"</span>&gt;</span>退出活动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="each"><a href="#each" class="headerlink" title="each()"></a>each()</h3><p><code>.each(function(index, el) {});</code>会遍历JQuery对象，通过<code>$(this)</code>就可以获取到每次循环的对象（单个按钮），单独给他绑上事件，这样就可以保证所有的按钮都有指定的事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.attend-btn'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index, el</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//取一个变量保存$(this)当前操作的DOM，因为后面可能会出现$(this)对象变更的情况</span></span><br><span class="line">        <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line">        $<span class="keyword">this</span>.click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">'&lt;c:url value="/userinfo/cancelAttend" /&gt;?activityId='</span>+$(<span class="keyword">this</span>).attr(<span class="string">'data'</span>),</span><br><span class="line">                type: <span class="string">'post'</span>,</span><br><span class="line">                dataType: <span class="string">'json'</span>,</span><br><span class="line">                success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(data.id === <span class="string">'1'</span>)&#123;</span><br><span class="line">                        $<span class="keyword">this</span>.parent().parent().remove();</span><br><span class="line">                        alert(<span class="string">"成功退出该活动"</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        alert(<span class="string">"无法退出活动"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery ajax提交form表单</title>
    <url>/2016/12/17/2016-12-17-JQuery-ajax/</url>
    <content><![CDATA[<p>需要form的<code>id</code>、<code>action</code>、不需要<code>submit</code>按钮，input必须要<code>name</code>属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"email/send?outputid=$&#123;outputid&#125;"</span> <span class="attr">id</span>=<span class="string">"form"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>收件人：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"toEmail"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"toId"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>抄送：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"tlEmail"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>主题：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"subject"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>正文内容：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"41"</span> <span class="attr">rows</span>=<span class="string">"6"</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用ajax提交form表单不用submit按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"发送"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>只需要在<code>ajax</code>的data属性里加上<code>$(formid).serialize()</code>，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"POST"</span>,</span><br><span class="line">        url: <span class="string">'email/send?outputid=$&#123;outputid&#125;'</span>,</span><br><span class="line">        data: $(<span class="string">'#form'</span>).serialize(),</span><br><span class="line">        <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>后台java只需要在方法里加入对象就行了，ajax传过来的属性会自动打包的成这个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Email email</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"email/send"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(Email email,Model model,HttpServletRequest req,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletResponse res)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>jQuery</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis SQL大于号、小于号</title>
    <url>/2016/12/17/2016-12-17-mybatis-sql/</url>
    <content><![CDATA[<blockquote>
<p>因为这个是xml格式的，所以不允许出现类似“&gt;”这样的字符，但是都可以使用<code>&lt;![CDATA[ ]]&gt;</code>符号进行说明，将此类符号不进行解析</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;![CDATA[ when min(starttime)&lt;='12:00' and max(endtime)&lt;='12:00' ]]&gt;</span><br></pre></td></tr></table></figure>

<h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 小于号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select username,showname,id,power </span><br><span class="line">    from user </span><br><span class="line">    where &lt;![CDATA[ power &lt; 2 ]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不等于号 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select username,showname,id,power</span><br><span class="line">    from user </span><br><span class="line">    where &lt;![CDATA[ power &lt;&gt; 2 ]]&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring获取静态资源</title>
    <url>/2016/12/12/2016-12-12-spring-static/</url>
    <content><![CDATA[<p>当我们使用视图解析器，将所有的url都分配到<code>dispatcher-servlet</code>处理，因此连<code>.css,.js.jpg</code>等文件都一并分配到这里去了，自然就获取不到这些静态资源。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置dispatcher-servlet-xml"><a href="#配置dispatcher-servlet-xml" class="headerlink" title="配置dispatcher-servlet.xml"></a>配置dispatcher-servlet.xml</h3><p>效率比较高的就是在<code>dispatcher-servlet.xml</code>配置资源。</p>
<h4 id="lt-mvc-default-servlet-handler-gt"><a href="#lt-mvc-default-servlet-handler-gt" class="headerlink" title="&lt;mvc:default-servlet-handler/&gt;"></a><code>&lt;mvc:default-servlet-handler/&gt;</code></h4><p>对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。</p>
<p>一般Web应用服务器默认的Servlet名称是”default”，因此<code>DefaultServletHttpRequestHandler</code>可以找到它。如果你所有的Web应用服务器的默认Servlet名称不是”default”，则需要通过<code>default-servlet-name</code>属性显示指定：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- dispatcher-servlet.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> <span class="attr">default-servlet-name</span>=<span class="string">"所使用的Web服务器默认使用的Servlet名称"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-mvc-resources-gt"><a href="#lt-mvc-resources-gt" class="headerlink" title="&lt;mvc:resources /&gt;"></a>&lt;mvc:resources /&gt;</h4><blockquote>
<p>允许静态资源放在任何地方，如WEB-INF目录下、类路径下等</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- dispatcher-servlet.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- location是工程路径地址，mapping是映射后的访问地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/resources/"</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="spring_static.jpg" alt="img"></p>
<h3 id="jsp页面引入静态资源"><a href="#jsp页面引入静态资源" class="headerlink" title="jsp页面引入静态资源"></a>jsp页面引入静态资源</h3><p>因为映射的缘故，直接这样引入<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;resources/bootstrap/css/bootstrap.css&quot;&gt;</code>，并不能在所有页面都成功，我们有两种方式。</p>
<h4 id="lt-gt"><a href="#lt-gt" class="headerlink" title="&lt;% %&gt;"></a>&lt;% %&gt;</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">String</span> <span class="attr">path</span> = <span class="string">request.getContextPath();</span></span></span><br><span class="line"><span class="tag"><span class="attr">String</span> <span class="attr">basePath</span> = <span class="string">request.getScheme()+</span>"<span class="attr">:</span>//"+</span></span><br><span class="line"><span class="tag">            <span class="attr">request.getServerName</span>()+"<span class="attr">:</span>"+<span class="attr">request.getServerPort</span>()+<span class="attr">path</span>+"/";</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"&lt;%=path%&gt;/resources/bootstrap/css/bootstrap.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em>path</em> 是带项目名的路径。</li>
<li><code>href=&quot;/ActivityDemo/resources/bootstrap/css/bootstrap.css&quot;</code></li>
<li><em>pathBase</em> 是带服务器地址和项目名的路径</li>
<li><code>href=&quot;http://localhost:8080/ActivityDemo//resources/bootstrap/css/bootstrap.css&quot;</code></li>
</ul>
<blockquote>
<p>当然这种在jsp页面中嵌套java代码的方式会使得页面太混乱，不易维护。</p>
</blockquote>
<h4 id="lt-c-url-value-””-gt"><a href="#lt-c-url-value-””-gt" class="headerlink" title="&lt;c:url value=”” /&gt;"></a>&lt;c:url value=”” /&gt;</h4><p>使用jstl的标准标签库，需导入下面两个jar包:</p>
<ul>
<li>jstl.jar</li>
<li>standard.jar</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用jstl需在jsp页面顶部引入这句代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span> %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"&lt;c:url value='/resources/bootstrap/css/bootstrap.css'/&gt;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;c:url value='/resources/js/jquery-2.2.4.min.js'/&gt;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>value</code>属性最前面必须是<code>/</code>。</p>
<h6 id="注意引入-css-文件是-lt-link-gt-的-href属性，引入-js-文件是-lt-script-gt-lt-script-gt-的-src属性"><a href="#注意引入-css-文件是-lt-link-gt-的-href属性，引入-js-文件是-lt-script-gt-lt-script-gt-的-src属性" class="headerlink" title="注意引入 css 文件是&lt;link&gt; 的 href属性，引入 js 文件是&lt;script&gt;&lt;/script&gt; 的 src属性"></a>注意引入 css 文件是<code>&lt;link&gt;</code> 的 <code>href</code>属性，引入 js 文件是<code>&lt;script&gt;&lt;/script&gt;</code> 的 <code>src</code>属性</h6><p>显示的地址是带项目名的地址。<code>href=&quot;/ActivityDemo/resources/bootstrap/css/bootstrap.css&quot;</code></p>
<p><strong>建议在jsp页面不要使用&lt;% %&gt;，学习使用jstl标准标签库。</strong></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis Generator逆向工具</title>
    <url>/2016/12/09/2016-12-09-spring-generator/</url>
    <content><![CDATA[<blockquote>
<p>由于Mybatis框架实现数据表的映射时，配置的代码比较复杂。Mybatis官方提供了generator插件，根据数据库来逆向生成映射文件，加快开发效率。</p>
</blockquote>
<h3 id="Mybatis-Generator-插件下载"><a href="#Mybatis-Generator-插件下载" class="headerlink" title="Mybatis Generator 插件下载"></a>Mybatis Generator 插件下载</h3><p><a href="https://marketplace.eclipse.org/content/mybatis-generator" target="_blank" rel="noopener">Mybatis的Eclipse插件</a></p>
<p><img src="generator.jpg" alt="img"></p>
<h3 id="新建-generatorConfig-xml"><a href="#新建-generatorConfig-xml" class="headerlink" title="新建 generatorConfig.xml"></a>新建 generatorConfig.xml</h3><p>在项目下的<code>src</code>文件夹下右键<code>new</code>一个<code>generatorConfig.xml</code></p>
<p><img src="generator2.jpg" alt="img"></p>
<h3 id="generatorConfig-xml-配置"><a href="#generatorConfig-xml-配置" class="headerlink" title="generatorConfig.xml 配置"></a>generatorConfig.xml 配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration PUBLIC </span></span><br><span class="line"><span class="meta">    "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" </span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"context"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接,database是连接数据库名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/database"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">password</span>=<span class="string">"root"</span> <span class="attr">userId</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- targetPackage 生成的类要放得包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- targetProject 目标项目，生成的内容会放在指定目录下 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"edu.hziee.models"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">targetProject</span>=<span class="string">"ActivityDemo/src"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"edu.hziee.mappers"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">targetProject</span>=<span class="string">"ActivityDemo/src"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"edu.hziee.mappers"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">targetProject</span>=<span class="string">"ActivityDemo/src"</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定需要逆向的表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">"activity"</span> <span class="attr">tableName</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"mysql"</span> <span class="attr">identity</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="执行generatorConfig-xml"><a href="#执行generatorConfig-xml" class="headerlink" title="执行generatorConfig.xml"></a>执行generatorConfig.xml</h3><p>直接在generatorConfig.xml上右键，如图所示的选项，点击运行，即可自动生成映射。</p>
<p><img src="generator3.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>generator</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery备忘录</title>
    <url>/2016/12/08/2016-11-23-jQuery/</url>
    <content><![CDATA[<h3 id="remove-和empty"><a href="#remove-和empty" class="headerlink" title="remove()和empty()"></a>remove()和empty()</h3><ul>
<li><code>remove(&#39;selector&#39;)</code> 删除被选元素（及其子元素），该方法不会把匹配的元素从 jQuery 对象中删除，因而可以在将来再使用这些匹配的元素。</li>
<li><code>empty()</code> 从被选元素中删除子元素。</li>
</ul>
<h3 id="JQuery-event对象"><a href="#JQuery-event对象" class="headerlink" title="JQuery event对象"></a>JQuery event对象</h3><blockquote>
<p>该对象主要用于获取事件的相关信息，或对该事件进行处理。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//触发事件时的event对象</span></span><br><span class="line">$(<span class="string">'selector'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* Act on the event */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="event属性"><a href="#event属性" class="headerlink" title="event属性"></a>event属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td>currentTarget</td>
<td align="center">返回事件冒泡阶段中的当前DOM元素</td>
</tr>
<tr>
<td>data</td>
<td align="center">返回绑定事件时传入的附加数据</td>
</tr>
<tr>
<td>delegateTarget</td>
<td align="center">返回”受委托”调用当前事件处理函数的DOM元素</td>
</tr>
<tr>
<td>namespace</td>
<td align="center">返回触发事件时指定的命名空间</td>
</tr>
<tr>
<td>pageX</td>
<td align="center">返回鼠标相对于当前文档的x坐标</td>
</tr>
<tr>
<td>pageY</td>
<td align="center">返回鼠标相对于当前文档的y坐标</td>
</tr>
<tr>
<td>result</td>
<td align="center">返回当前事件绑定的上一个事件处理函数的返回值。</td>
</tr>
<tr>
<td>target</td>
<td align="center">最初触发该事件的DOM元素</td>
</tr>
<tr>
<td>timeStamp</td>
<td align="center">返回事件触发的当前时间与1970年1月1日午夜之间的毫秒数</td>
</tr>
<tr>
<td>type</td>
<td align="center">返回事件的类型。例如:”click”、”focus”等</td>
</tr>
<tr>
<td>which</td>
<td align="center">返回触发事件时按下的鼠标按钮或键盘按键</td>
</tr>
</tbody></table>
<h4 id="event方法"><a href="#event方法" class="headerlink" title="event方法"></a>event方法</h4><p>|方法|描述|<br>|isDefaultPrevented()|是否调用了preventDefault()方法。|<br>|isImmediatePropagationStopped()|是否调用了stopImmediatePropagation()方法。|<br>|isPropagationStopped()|是否调用了stopPropagation()方法。(阻止当前事件在DOM树上冒泡。)|<br>|preventDefault()|阻止触发事件的默认行为。|<br>|stopImmediatePropagation()|阻止该元素当前触发事件剩余的事件处理函数的执行，并停止事件的冒泡传递。|<br>|stopPropagation()|停止事件的冒泡传递。|</p>
<h4 id="event-which属性"><a href="#event-which属性" class="headerlink" title="event.which属性"></a>event.which属性</h4><h5 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h5><table>
<thead>
<tr>
<th>event.which属性值</th>
<th>对应的鼠标按钮</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>鼠标左键</td>
</tr>
<tr>
<td>2</td>
<td>鼠标中键(滚轮键)</td>
</tr>
<tr>
<td>3</td>
<td>鼠标右键</td>
</tr>
</tbody></table>
<h5 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h5><table>
<thead>
<tr>
<th>which属性值(或范围)</th>
<th>对应的键盘按键</th>
</tr>
</thead>
<tbody><tr>
<td>8</td>
<td>Backspace键</td>
</tr>
<tr>
<td>9</td>
<td>Tab键</td>
</tr>
<tr>
<td>13</td>
<td>Enter键</td>
</tr>
<tr>
<td>16</td>
<td>Shift键</td>
</tr>
<tr>
<td>17</td>
<td>Ctrl键</td>
</tr>
<tr>
<td>20</td>
<td>Alt键</td>
</tr>
<tr>
<td>20</td>
<td>Caps Lock键(大小写锁定)</td>
</tr>
<tr>
<td>27</td>
<td>Esc键</td>
</tr>
<tr>
<td>33 - 36</td>
<td>对应按键 PageUp、PageDown、End、Home</td>
</tr>
<tr>
<td>37 - 40</td>
<td>对应按键 左、上、右、下(方向键)</td>
</tr>
<tr>
<td>45 - 46</td>
<td>对应按键 Insert、Delete</td>
</tr>
<tr>
<td>48 - 57</td>
<td>对应按键 0 - 9(非小键盘)</td>
</tr>
<tr>
<td>65 - 90</td>
<td>对应按键 A - Z</td>
</tr>
<tr>
<td>91</td>
<td>Windows键</td>
</tr>
<tr>
<td>96 - 105</td>
<td>对应按键 0 - 9(小键盘)</td>
</tr>
<tr>
<td>106、107、109、110、111</td>
<td>对应按键*、+、-、.、/(小键盘)</td>
</tr>
<tr>
<td>112 - 123</td>
<td>对应按键 F1 - F12</td>
</tr>
</tbody></table>
<h3 id="JQuery-选择器"><a href="#JQuery-选择器" class="headerlink" title="JQuery $()选择器"></a>JQuery $()选择器</h3><p>…</p>
<h3 id="JQuery-添加DOM元素"><a href="#JQuery-添加DOM元素" class="headerlink" title="JQuery 添加DOM元素"></a>JQuery 添加DOM元素</h3><ul>
<li>append() - 在被选元素内部的结尾插入内容</li>
<li>prepend() - 在被选元素内部的开头插入内容</li>
<li>after() - 在被选元素之后插入内容</li>
<li>before() - 在被选元素之前插入内容</li>
</ul>
<h3 id="如何取出下拉框select标签选中的项"><a href="#如何取出下拉框select标签选中的项" class="headerlink" title="如何取出下拉框select标签选中的项"></a>如何取出下拉框select标签选中的项</h3><p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- option的value是传到服务器端的值 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- option通过 selected="selected" 设置预选值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"select-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Tom"</span>&gt;</span>Tom~~~<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Jack"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>Jack~~~<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Ann"</span>&gt;</span>Ann~~~<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>javascript</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .change()在下拉框内容选项改变时触发。</span></span><br><span class="line"><span class="comment">// .children('selector')选择器只能选择直接子元素，不能选择孙子元素。</span></span><br><span class="line">$(<span class="string">'#select-box'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $selectBox = $(<span class="keyword">this</span>).children(<span class="string">'option:selected'</span>), <span class="comment">//JQuery对象</span></span><br><span class="line">        value = $(<span class="keyword">this</span>).children(<span class="string">'option:selected'</span>).val(), <span class="comment">//选中项的value值  Tom</span></span><br><span class="line">        text = $(<span class="keyword">this</span>).children(<span class="string">'option:selected'</span>).text(); <span class="comment">//选中项显示的值  Tom~~~</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="关于jQuery-attr-和prop"><a href="#关于jQuery-attr-和prop" class="headerlink" title="关于jQuery attr()和prop()"></a>关于jQuery <code>attr()</code>和<code>prop()</code></h3><p>如果要获取元素只有 <strong>true</strong> 和 <strong>false</strong> 属性的<code>attribute</code>值，例如<code>checked</code>, <code>selected</code> 或者 <code>disabled</code> 使用<code>prop()</code>，其他则用<code>attr()</code>，具体见下表。</p>
<p><img src="attr_prop.png" alt="image"></p>
<h3 id="on-bind-live-和delegate-的差异"><a href="#on-bind-live-和delegate-的差异" class="headerlink" title="on(),bind(),live()和delegate()的差异"></a><code>on()</code>,<code>bind()</code>,<code>live()</code>和<code>delegate()</code>的差异</h3><p><code>bind()</code>方法只能给当前存在的元素绑定事件。对于后来通过操作js动态添加的DOM元素，则不起作用。</p>
<p><code>live()</code>和<code>delegate()</code>方法不仅作用于DOM中当前存在的元素，还作用于将来可能存在（动态生成）的元素。而且由于<code>live()</code>绑定事件的源头是<code>document</code>,而<code>delegate()</code>绑定时间的源头是<code>object</code>（具体对象），所以<code>delegate()</code>效率比<code>live()</code>高。</p>
<ul>
<li>用on()绑定事件处理函数，可以使用off()取消事件绑定。</li>
<li>用bind()绑定事件处理函数，可以使用unbind()取消事件绑定。</li>
<li>用live()绑定事件处理函数，可以使用die()取消事件绑定。</li>
<li>用delegate()绑定事件处理函数，可以使用undelegate()取消事件绑定。</li>
</ul>
<h4 id="delegate"><a href="#delegate" class="headerlink" title=".delegate()"></a><code>.delegate()</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.delegate(<span class="string">'selector'</span>, <span class="string">'eventType'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    selector</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>selector</code> 选择器字符串，用于过滤器触发事件的元素。</li>
<li><code>eventType</code>一个包含一个或多个用空格隔开的JavaScript事件类型的字符串，比如”click”或”keydown,”或自定义事件的名称。</li>
</ul>
<h4 id="on"><a href="#on" class="headerlink" title=".on()"></a><code>.on()</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.on( events [, selector ] [, data ], handler(eventObject) )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>event</code> 一个或多个空格分隔的事件类型和可选的命名空间，或仅仅是命名空间，比如”click”, “keydown.myPlugin”, 或者 “.myPlugin”。</li>
<li><code>selector</code> 一个选择器字符串</li>
<li><code>data</code> 当一个事件被触发时，要传递给事件处理函数的event.data</li>
<li><code>handler(eventObject)</code> 事件被触发时，执行的函数。若该函数只是要执行return false的话，那么该参数位置可以直接简写成 false。</li>
</ul>
<blockquote>
<p>在jQuery 3.0中，.delegate()已被标记为弃用。从jQuery 1.7开始，它已经被.on()方法取代。所以我们不建议使用该方法。</p>
</blockquote>
<h4 id="one"><a href="#one" class="headerlink" title=".one()"></a><code>.one()</code></h4><blockquote>
<p>元素的事件添加处理函数。处理函数在每个元素上每种事件类型最多执行一次。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.one( events [, selector ] [, data ], handler(eventObject) )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>.one()</code>和<code>.on()</code>是相同的， 不同之处在于，对于给定的元素和事件类型，处理程序在第一次触发事件后会被立即解除绑定</li>
<li>如果该方法的第一个参数包含多个用空格分隔的事件类型的话，那么每种类型的事件被触发时，处理函数仅会被每个事件类型调用一次。 </li>
</ul>
<h4 id="trigger"><a href="#trigger" class="headerlink" title=".trigger()"></a><code>.trigger()</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.trigger( eventType [, extraParameters ] )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>extraParameters</code> 传递给事件处理程序的额外参数。</p>
</li>
<li><p>当相应的事件发生时，任何通过<code>.on()</code>或一个快捷方法绑定的事件处理程序将被触发。它们也可以用<code>.trigger()</code>方法手动触发。调用<code>.trigger()</code>执行处理程序和用户自然的触发该事件，他们的执行顺序时相同的：</p>
</li>
<li><p><code>.trigger()</code>事件会在DOM树上冒泡;在事件处理程序中返回<code>false</code>或调用事件对象中的<code>.stopPropagation()</code>方法可以使事件停止冒泡。</p>
</li>
</ul>
<blockquote>
<p>若要触发通过 jQuery 绑定的事件处理函数，而不触发原生的事件，使用.triggerHandler() 来代替。</p>
</blockquote>
<h4 id="triggerHandler"><a href="#triggerHandler" class="headerlink" title=".triggerHandler()"></a><code>.triggerHandler()</code></h4><blockquote>
<p>为一个事件执行附加到元素的所有处理程序。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.triggerHandler( eventType [, extraParameters ] )&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>.triggerHandler( &quot;event&quot; )</code>方法被触发时不会调用元素上的 <code>.event()</code>。 这意味着在表单上触发 <code>.triggerHandler( &quot;submit&quot; )</code>将不会调用表单上的<code>.submit()</code>。</li>
<li>使用 <code>.triggerHandler()</code> 触发的事件，并不会在 DOM 树中向上冒泡。</li>
</ul>
<h3 id="readonly和disabled区别"><a href="#readonly和disabled区别" class="headerlink" title="readonly和disabled区别"></a><code>readonly</code>和<code>disabled</code>区别</h3><blockquote>
<p>Readonly和Disabled是用在表单中的两个属性，它们都能够做到使用户不能够更改表单域中的内容。但是它们之间有着微小的差别</p>
</blockquote>
<ul>
<li><strong>Readonly</strong> 只针对 <strong>input(text / password)</strong> 和 <strong>textarea</strong> 有效</li>
<li><strong>disabled</strong> 对于所有的表单元素都有效，包括 <strong>select</strong>, <strong>radio</strong> , <strong>checkbox</strong> , <strong>button</strong> 等</li>
</ul>
<ul>
<li>表单元素在使用了disabled后，当我们将表单以 <em>POST*或 *GET</em> 的方式提交的话，这个元素的值不会被传递出去</li>
<li><strong>readonly</strong> 会将该值传递出去</li>
</ul>
<blockquote>
<p>在某个表单中为用户预填了某个唯一识别代码，不允许用户改动，但是在提交时需要传递该值，此时应该将它的属性设置为 readonly。</p>
</blockquote>
<h4 id="设置disabled属性的方式"><a href="#设置disabled属性的方式" class="headerlink" title="设置disabled属性的方式"></a>设置<code>disabled</code>属性的方式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">daisbaled</span>=<span class="string">"disabled"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'input'</span>).attr(<span class="string">"disabled"</span>,<span class="literal">true</span>)<span class="comment">//将input元素设置为disabled</span></span><br><span class="line">$(<span class="string">'input'</span>).attr(<span class="string">"disabled"</span>,<span class="literal">false</span>)<span class="comment">//去除input元素的disabled属性</span></span><br><span class="line">$(<span class="string">'input'</span>).removeAttr(<span class="string">"disabled"</span>);<span class="comment">//去除input元素的disabled属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($(<span class="string">'input'</span>).attr(<span class="string">"disabled"</span>)==<span class="literal">true</span>)&#123;&#125;<span class="comment">//判断input元素是否已经设置了disabled属性</span></span><br></pre></td></tr></table></figure>

<h4 id="设置readonly属性的方式"><a href="#设置readonly属性的方式" class="headerlink" title="设置readonly属性的方式"></a>设置<code>readonly</code>属性的方式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'input'</span>).removeAttr(<span class="string">"readonly"</span>);<span class="comment">//去除input元素的readonly属性</span></span><br><span class="line">$(<span class="string">'input'</span>).attr(<span class="string">"readonly"</span>,<span class="literal">true</span>)<span class="comment">//将input元素设置为readonly</span></span><br><span class="line">$(<span class="string">'input'</span>).attr(<span class="string">"readonly"</span>,<span class="literal">false</span>)<span class="comment">//去除input元素的readonly属性</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>($(<span class="string">'input'</span>).attr(<span class="string">"readonly"</span>)==<span class="literal">true</span>)&#123;&#125;<span class="comment">//判断input元素是否已经设置了readonly属性</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>spring 解决乱码</title>
    <url>/2016/12/07/2016-12-7-spring-messy/</url>
    <content><![CDATA[<h3 id="request-getParameter-乱码问题"><a href="#request-getParameter-乱码问题" class="headerlink" title="request.getParameter()乱码问题"></a>request.getParameter()乱码问题</h3><h4 id="通过form表单提交的字段"><a href="#通过form表单提交的字段" class="headerlink" title="通过form表单提交的字段"></a>通过form表单提交的字段</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> String(req.getParameter(<span class="string">"参数名"</span>).getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="通过url-获取的字段"><a href="#通过url-获取的字段" class="headerlink" title="通过url 获取的字段"></a>通过url 获取的字段</h4><p><code>http://127.0.0.1:8080/prjdm-main/list?projectId=1&amp;content=团队组织架构&quot;</code></p>
<blockquote>
<p>因为直接http请求方式的话，使用的编码是iso-8859-1格式的，所以应该先以这种方式获取流然后转为utf-8格式，这样的话就直接可以显示正确的汉字了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URLDecoder.decode(request.getParameter(<span class="string">"参数名"</span>),<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>css选择器</title>
    <url>/2016/12/04/2016-12-5-css-selector/</url>
    <content><![CDATA[<blockquote>
<p>网上有大神写的博文，很不错，就直接贴过来，推荐了，<a href="http://www.ruanyifeng.com/blog/2009/03/css_selectors.html" target="_blank" rel="noopener">阮一峰CSS选择器笔记</a></p>
</blockquote>
<h3 id="有遇到会记点容易忘记的css选择器"><a href="#有遇到会记点容易忘记的css选择器" class="headerlink" title="有遇到会记点容易忘记的css选择器"></a>有遇到会记点容易忘记的css选择器</h3>]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>springMVC操作数据库</title>
    <url>/2016/11/26/2016-11-26-springmvc-mapper/</url>
    <content><![CDATA[<h3 id="view、controller、service、dao的理解"><a href="#view、controller、service、dao的理解" class="headerlink" title="view、controller、service、dao的理解"></a>view、controller、service、dao的理解</h3><ul>
<li>view：视图，用户看到的东西，后台怎么处理不关心</li>
<li>Controller：控制层，也可以成为action（控制视图的跳转），可以调用service层的方法。</li>
<li>service：业务逻辑层它向上层contrller提供接口，并且使用dao层提供的接口</li>
<li>dao:数据访问对象，dao层里面要完成的是数据访问逻辑以及对数据的访问，dao为上层service提供接口。</li>
</ul>
<blockquote>
<p>你写程序不应该仅仅为实现功能考虑，更多的还是应该为将来的维护考虑，因为大部分的时间还是在维护上的。</p>
</blockquote>
<h3 id="BlogMapper-xml"><a href="#BlogMapper-xml" class="headerlink" title="BlogMapper.xml"></a><code>BlogMapper.xml</code></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 映射到接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"edu.hziee.mappers.BlogMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置返回结果集的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResultMap"</span> <span class="attr">type</span>=<span class="string">"edu.hziee.models.Blog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"content"</span> <span class="attr">column</span>=<span class="string">"content"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">column</span>=<span class="string">"author"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"title"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultMap</span>=<span class="string">"blogResultMap"</span>&gt;</span></span><br><span class="line">        select id, content,author,title from Blog where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogs"</span> <span class="attr">resultMap</span>=<span class="string">"blogResultMap"</span>&gt;</span></span><br><span class="line">        select id, content,author,title from Blog</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动生成 自增的id，设置 useGeneratedKeys="true" keyProperty="id" --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertBlog"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        insert into Blog(content,author,title) values (#&#123;content&#125;, #&#123;author&#125;,#&#123;title&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBlog"</span> <span class="attr">parameterType</span>=<span class="string">"edu.hziee.models.Blog"</span>&gt;</span></span><br><span class="line">        update Blog set</span><br><span class="line">        content = #&#123;content&#125;,</span><br><span class="line">        title = #&#123;title&#125;,</span><br><span class="line">        author = #&#123;author&#125;</span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBlog"</span>&gt;</span></span><br><span class="line">        delete from Blog where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="blogMapper-java接口"><a href="#blogMapper-java接口" class="headerlink" title="blogMapper.java接口"></a><code>blogMapper.java</code>接口</h3><p><code>blogMapper.java</code>中的抽象方法要和xml文件中的sql语句对应。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.hziee.mappers;</span><br><span class="line"><span class="comment">//只能是接口，不能是具体的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Blog <span class="title">selectBlog</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Blog&gt; <span class="title">selectBlogs</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertBlog</span><span class="params">(Blog blog)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBlog</span><span class="params">(Blog blog)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBlog</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BlogDao-java-DAO层"><a href="#BlogDao-java-DAO层" class="headerlink" title="BlogDao.java DAO层"></a><code>BlogDao.java</code> DAO层</h3><blockquote>
<p>(Data Access Object)是用于访问数据的对象<br>DAO层（数据库操作层）：负责对数据向数据库增删改查的操作。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.hziee.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.hziee.mappers.BlogMapper;</span><br><span class="line"><span class="keyword">import</span> edu.hziee.models.Blog;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注解驱动，自动装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BlogMapper blogMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertBlog</span><span class="params">(Blog blog)</span></span>&#123;</span><br><span class="line">        blogMapper.insertBlog(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Blog <span class="title">selectBlog</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogMapper.selectBlog(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Blog&gt; <span class="title">selectBlogs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogMapper.selectBlogs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBlog</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        blogMapper.deleteBlog(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBlog</span><span class="params">(Blog blog)</span></span>&#123;</span><br><span class="line">        blogMapper.updateBlog(blog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BlogController-java-controller控制层"><a href="#BlogController-java-controller控制层" class="headerlink" title="BlogController.java controller控制层"></a><code>BlogController.java</code> controller控制层</h3><blockquote>
<p>把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.hziee.controllers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.hziee.dao.BlogDao;</span><br><span class="line"><span class="keyword">import</span> edu.hziee.models.Blog;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/blog"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注解驱动</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BlogDao blogDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getBlogs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"blog/blogs"</span>);</span><br><span class="line">        <span class="comment">//从数据库获取blog数据</span></span><br><span class="line">        List&lt;Blog&gt; blogs = blogDao.selectBlogs();</span><br><span class="line">        <span class="comment">//显示在view视图上</span></span><br><span class="line">        mav.addObject(<span class="string">"blogs"</span>,blogs);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springMVC基础配置</title>
    <url>/2016/11/25/2016-11-25-springmvc-configuration/</url>
    <content><![CDATA[<h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置<code>web.xml</code></h3><blockquote>
<p>web.xml文件是用来初始化配置信息：比如Welcome页面、servlet、servlet-mapping、filter、listener、启动加载级别等。</p>
</blockquote>
<p><code>web.xml</code>在<code>WEB-INF</code>目录下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 项目名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>myspring<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 项目默认的首页 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 配置spring的字符集过滤，解决中文插入数据库的乱码问题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 配置spring的前端控制器 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- spring默认配置文件是/WEB-INF/[servlet名字]-servlet.xml --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 或者通过增加这段配置来指定要初始化的dispatcher。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;init-param&gt;</span></span><br><span class="line"><span class="comment">      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span></span><br><span class="line"><span class="comment">      &lt;param-value&gt;/WEB-INF/dispatcher-servlet.xml&lt;/param-value&gt;</span></span><br><span class="line"><span class="comment">    &lt;/init-param&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置dispatcher-servlet-xml"><a href="#配置dispatcher-servlet-xml" class="headerlink" title="配置dispatcher-servlet.xml"></a>配置<code>dispatcher-servlet.xml</code></h3><p><code>dispatcher-servlet.xml</code>在<code>WEB-INF</code>目录下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第三方的库，如bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/resources/"</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 在指定包下 扫描组件bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"edu.hziee.controllers"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"edu.hziee.dao"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 连接数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/javaee2016?characterEncoding=utf8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在spring中加入数据映射器接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"edu.hziee.mappers"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将jsp页面放在 WEB-INF/views 目录下 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还需要导入jar包，mybatis-3.4.1.jar</p>
<ul>
<li>spring依赖包</li>
<li>mybatis依赖的包</li>
<li>commons-logging-1.2.jar</li>
<li>mysql-connector-java-5.1.38-bin.jar</li>
<li>mybatis-spring-1.3.0.jar</li>
<li>jstl.jar</li>
<li>standard.jar</li>
</ul>
<p>需要<code>build Path</code>到项目，还要拷贝到<code>WEB-INF/lib</code>目录下。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>spring mvc控制器映射</title>
    <url>/2016/11/24/2016-11-24-spring-mvc-mapper/</url>
    <content><![CDATA[<h3 id="spring映射"><a href="#spring映射" class="headerlink" title="spring映射"></a>spring映射</h3><h4 id="简单的页面跳转"><a href="#简单的页面跳转" class="headerlink" title="简单的页面跳转"></a>简单的页面跳转</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"blog"</span>&gt;</span>blogs页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/blog"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getBlogs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"blog/blogs"</span>);</span><br><span class="line">        <span class="comment">//从数据库取得数据</span></span><br><span class="line">        List&lt;Blog&gt; blogs = blogDao.selectBlogs();</span><br><span class="line">        <span class="comment">//将数据存在model里</span></span><br><span class="line">        mav.addObject(<span class="string">"blogs"</span>,blogs);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>超链接地址<code>href</code>要对应控制器的映射地址<code>@RequestMapping(&quot;/blog&quot;)</code>，这样才会调用映射的方法。</li>
<li><code>ModelAndView mav = new ModelAndView(&quot;blog/blogs&quot;)</code>或者<code>mav.setViewName(&quot;blog/blogs&quot;)</code>都能用来设置显示 <strong>blog文件夹</strong> 下的<code>blogs.jsp</code>页面。</li>
</ul>
<p><img src="springmvc1.jpg" alt="image"></p>
<p>因为在<code>dispatcher-servlet.xml</code>中配置过视图解析器如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>InternalResourceViewResolver</code>会把返回的视图名称都解析为<code>InternalResourceView</code>对象，</li>
<li><code>InternalResourceView</code>会把<code>Controller</code>处理器方法返回的模型属性都存放到对应的request属性中</li>
<li><code>InternalResourceViewResolver</code>会给它加上定义好的前缀和后缀，组成<code>/WEB-INF/views/xxx.jsp</code>的形式。如之前的例子，则是显示<code>/WEB-INF/views/blog/blogs.jsp</code>。</li>
</ul>
<h4 id="重定向redirect"><a href="#重定向redirect" class="headerlink" title="重定向redirect"></a>重定向<code>redirect</code></h4><blockquote>
<p>redirect 可以重定向到某个controller映射。</p>
</blockquote>
<p>如下图，如果我要点击删除一条记录，然后再跳回这个页面。就需要用到请求重定向。</p>
<p><img src="springmvc2.jpg" alt="image"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"delete/&#123;id&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">deleteBlog</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//根据id从数据库删除对应数据</span></span><br><span class="line">    blogDao.deleteBlog(id);</span><br><span class="line">    <span class="comment">//从数据库重新取数据</span></span><br><span class="line">    List&lt;Blog&gt; blogs = blogDao.selectBlogs();</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    mav.setViewName(<span class="string">"redirect:/blog"</span>);</span><br><span class="line">    <span class="keyword">return</span> mav.addObject(<span class="string">"blogs"</span>,blogs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为我们需要返回到原来的页面，但是需要重新获取、显示数据，我们就不能只是简单的通过<code>mav.setViewName(&quot;blog/blogs&quot;)</code>显示这个视图，而是要调用映射到这个页面的方法，在通过这个方法获取数据，再显示到<code>blogs.jsp</code>页面上，也就是如下的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/blog"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getBlogs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"blog/blogs"</span>);</span><br><span class="line">        <span class="comment">//从数据库取得数据</span></span><br><span class="line">        List&lt;Blog&gt; blogs = blogDao.selectBlogs();</span><br><span class="line">        <span class="comment">//将数据存在model里</span></span><br><span class="line">        mav.addObject(<span class="string">"blogs"</span>,blogs);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在页面的URL是<code>http://localhost:8080/myspring/blog</code>，如果不使用<code>redirect</code> (即<code>mav.setViewName(&quot;blog/blogs&quot;)</code>) ，点击超链接，则URL变成<code>http://localhost:8080/myspring/blog/delete/36</code>,会显示没有映射的警告且不会有页面显示。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>ionic App制作笔记</title>
    <url>/2016/09/16/2016-08-28-ionic/</url>
    <content><![CDATA[<hr>
<h3 id="9-16"><a href="#9-16" class="headerlink" title="9.16"></a>9.16</h3><h4 id="1-获取DOM元素"><a href="#1-获取DOM元素" class="headerlink" title="1. 获取DOM元素"></a>1. 获取DOM元素</h4><p>用JavaScript获取DOM元素，需要等页面元素全部加载完毕才能使用，</p>
<p>但当在<code>ionic</code>的<code>constructor(){}</code>用<code>document.getElementById()</code>获取DOM元素时，取出来的都是<code>null</code>。</p>
<p>我们可以用<code>platform</code>的<code>ready()</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Platform &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;...&#125;)</span><br><span class="line"><span class="keyword">export</span> MyApp &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(platform: Platform) &#123;</span><br><span class="line">    platform.ready().then(<span class="function">(<span class="params">readySource</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Platform ready from'</span>, readySource);</span><br><span class="line">      <span class="comment">// Platform now ready, execute any required native code</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法是当html的页面元素被加载完毕的时候才执行，</p>
<p>因此可以拿来获取DOM元素。</p>
<blockquote>
<p>贴上原文文档</p>
</blockquote>
<blockquote>
<p>Returns a promise when the platform is ready and native functionality can be called. If the app is running from within a web browser, then the promise will resolve when the DOM is ready. When the app is running from an application engine such as Cordova, then the promise will resolve when Cordova triggers the deviceready event.</p>
</blockquote>
<blockquote>
<p>The resolved value is the readySource, which states which platform ready was used. For example, when Cordova is ready, the resolved ready source is cordova. The default ready source value will be dom. The readySource is useful if different logic should run depending on the platform the app is running from. For example, only Cordova can execute the status bar plugin, so the web should not run status bar plugin logic.</p>
</blockquote>
<h4 id="2-修改元素的class属性"><a href="#2-修改元素的class属性" class="headerlink" title="2. 修改元素的class属性"></a>2. 修改元素的class属性</h4><h5 id="1-修改所有的class属性"><a href="#1-修改所有的class属性" class="headerlink" title="1. 修改所有的class属性"></a>1. 修改所有的<code>class</code>属性</h5><p>用新的<code>class</code>替换掉原有的所有<code>class</code>，可以设置<code>className</code>属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"MyElement"</span>).className = <span class="string">"MyClass"</span>;</span><br></pre></td></tr></table></figure>

<h5 id="2-为元素添加新的class"><a href="#2-为元素添加新的class" class="headerlink" title="2. 为元素添加新的class"></a>2. 为元素添加新的<code>class</code></h5><p>如果想添加一个新的<code>class</code>，并保留所有原有的<code>class</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"MyElement"</span>).className += <span class="string">" MyClass"</span>;</span><br><span class="line"><span class="comment">//注意 MyClass 前面的空格。</span></span><br></pre></td></tr></table></figure>

<h5 id="3-删除元素的某个class"><a href="#3-删除元素的某个class" class="headerlink" title="3. 删除元素的某个class"></a>3. 删除元素的某个<code>class</code></h5><p>如果要删除某个元素的单个<code>class</code>属性，而不影响其它<code>class</code>，可以使用正则表达式进行替换。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"MyElement"</span>).className =</span><br><span class="line">   <span class="built_in">document</span>.getElementById(<span class="string">"MyElement"</span>).className.replace</span><br><span class="line">      (<span class="regexp">/(?:^|\s)MyClass(?!\S)/g</span> ,<span class="string">''</span>);</span><br></pre></td></tr></table></figure>

<p><a href="http://javascript.ruanyifeng.com/stdlib/regexp.html" target="_blank" rel="noopener">正则表达式参考</a></p>
<h5 id="4-检查元素是否已经存在某class"><a href="#4-检查元素是否已经存在某class" class="headerlink" title="4. 检查元素是否已经存在某class"></a>4. 检查元素是否已经存在某<code>class</code></h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">"MyElement"</span>).className.match(<span class="regexp">/(?:^|\s)MyClass(?!\S)/</span>))&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="http://www.html-js.com/article/1641" target="_blank" rel="noopener">参考文章</a></p>
</blockquote>
<h3 id="9-7"><a href="#9-7" class="headerlink" title="9.7"></a>9.7</h3><h4 id="1-ionic-生命周期函数"><a href="#1-ionic-生命周期函数" class="headerlink" title="1. ionic 生命周期函数"></a>1. ionic 生命周期函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onPageLoaded()&#123; <span class="comment">//page初始化时</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"page 1 : page loaded"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在这里可以做页面初始化的一些事情</span></span><br><span class="line">onPageWillEnter()&#123; <span class="comment">//page即将进入时</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"page 1 : page will enter"</span>);</span><br><span class="line">&#125;</span><br><span class="line">onPageDidEnter()&#123; <span class="comment">//page进入后</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"page 1 : page did enter"</span>);</span><br><span class="line">&#125;</span><br><span class="line">onPageWillLeave()&#123; <span class="comment">//page即将离开</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"page 1 : page will leave"</span>);</span><br><span class="line">&#125;</span><br><span class="line">onPageDidLeave()&#123; <span class="comment">//page离开后</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"page 1 : page did leave"</span>);</span><br><span class="line">&#125;</span><br><span class="line">onPageWillUnload()&#123;</span><br><span class="line"><span class="comment">//从DOM中移除时候执行的生命周期，不常用</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line">onPageDidUnload()&#123;</span><br><span class="line"><span class="comment">//DOM中移除执行完成的时候，不常用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-实现日期时间选择器的方法"><a href="#2-实现日期时间选择器的方法" class="headerlink" title="2. 实现日期时间选择器的方法"></a>2. 实现日期时间选择器的方法</h4><h5 id="1-input"><a href="#1-input" class="headerlink" title="1. input"></a>1. input</h5><p>input标签 体验不太好。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"time"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-datetime"><a href="#2-datetime" class="headerlink" title="2. datetime"></a>2. datetime</h5><p>日期选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>Date<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-datetime</span> <span class="attr">displayFormat</span>=<span class="string">"MMM DD YYYY"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"event.month"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-datetime</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>时间选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>Start Time<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-datetime</span> <span class="attr">displayFormat</span>=<span class="string">"h:mm A"</span> <span class="attr">pickerFormat</span>=<span class="string">"h mm A"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"event.timeStarts"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-datetime</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-进入app跳转登录界面"><a href="#3-进入app跳转登录界面" class="headerlink" title="3. 进入app跳转登录界面"></a>3. 进入app跳转登录界面</h4><p>通过<code>localStorage</code>来判断是否已经登录，若未登录则跳转登录界面。</p>
<p>不能使用创建<code>Modal</code>的方法进行跳转，而要使用<code>NavController</code>的<code>push</code>方法把登录页面<code>push</code>出来。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> navCtrl: NavController,</span></span><br><span class="line"><span class="params">              <span class="keyword">public</span> modalCtrl: ModalController</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(localStorage.getItem(<span class="string">'isLogined'</span>)==<span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.navCtrl.push(LoginPage);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(localStorage.getItem(<span class="string">'isLogined'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-28"><a href="#8-28" class="headerlink" title="8.28"></a>8.28</h3><h4 id="1-loading-和-Modal-一起dismiss-的问题"><a href="#1-loading-和-Modal-一起dismiss-的问题" class="headerlink" title="1. loading 和 Modal 一起dismiss()的问题"></a>1. <em>loading</em> 和 <em>Modal</em> 一起<code>dismiss()</code>的问题</h4><p>如果 <em>lodaing</em> 组件和 <em>Modal</em> 一起<code>dismiss()</code>，会出现Modal无法消失的情况。但是Modal依然可以向原页面传值。</p>
<p>而且即使Modal不<code>dismiss()</code>，Modal也会自动消失</p>
<p><img src="ionic3.png" alt="img"></p>
<p><a href="mailto:ionic@beta.37" target="_blank" rel="noopener">ionic@beta.37</a>的版本的 loading 不需要dismiss(),会自己消失，只要<code>Modal.dismiss(data)</code>就行，不然 <code>loading.dismiss()</code>会把<code>Modal</code>也消失。</p>
<p>这样写是可行的，但是还有各种问题。</p>
<p><img src="ionic4.png" alt="img"></p>
<!--
如果 *lodaing* 组件和 *Modal* 一起`dismiss()`，会出现Modal无法消失的情况。但是Modal依然可以向原页面传值。

而且即使Modal不`dismiss()`，Modal也会自动消失

![img](ionic3.png)

我暂时还没找到原因，但是这样写是可行的。`loading`和`Modal`不能同时`dismiss()`，而且Modal需要相对`loading`延迟1秒以上的时间。

![img](ionic4.png)

> 因为ionic更新太快，而且官方文档也不是特别的完善，多个组件同时出现的时候，也可能会发生意想不到的事，还是要去多尝试，多去看看每个版本更新的博客。 -->

<h3 id="8-25"><a href="#8-25" class="headerlink" title="8.25"></a>8.25</h3><h4 id="1-配置node环境"><a href="#1-配置node环境" class="headerlink" title="1. 配置node环境"></a>1. 配置node环境</h4><p>ionic需要node环境，但是不建议安装node v6.0.0 以上版本，有很多包会不支持。</p>
<h4 id="2-本地安装ionic"><a href="#2-本地安装ionic" class="headerlink" title="2. 本地安装ionic"></a>2. 本地安装ionic</h4><p>ionic安装需要翻墙，国内可以使用淘宝镜像cnpm，通过以下命令安装</p>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<p>然后window在<code>C:\Program Files\nodejs\node_modules\npm</code>路径下加入的<code>.npmrc</code>中加入</p>
<p><img src="ionic1.jpg" alt="img"> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">registry = http://registry.cnpmjs.org</span><br></pre></td></tr></table></figure>

<p><img src="ionic2.jpg" alt="img"><br>Mac的<code>.npmrc</code>则加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">registry = http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>然后就可以用cnpm代替npm进行包的下载，默认从国内源下载包</p>
<p>但本人的Mac未在翻墙的情况下就成功安装了 <em>ionic</em>。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>ionic2 segment标签</title>
    <url>/2016/09/13/2016-09-13-segment/</url>
    <content><![CDATA[<p><img src="segment1.jpg" alt></p>
<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>通过<code>[(ngModel)]=&quot;contact&quot;</code>绑定 <code>segment</code>，给<code>&lt;ion-segment-button&gt;&lt;/ion-segment-button&gt;</code>写上<code>value</code>来标记指定的<code>segment-buttom</code></p>
<p>用<code>[ngSwitch]=&quot;contact&quot;</code>绑定需要显示的界面元素，</p>
<p>再用<code>*ngSwitchCase=&quot;&#39;new&#39;&quot;</code>选择之前绑定的<code>value</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-segment</span> [(<span class="attr">ngModel</span>)]=<span class="string">"contact"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"contact"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-segment-button</span> <span class="attr">value</span>=<span class="string">"new"</span>&gt;</span></span><br><span class="line">        动态</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-segment-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-segment-button</span> <span class="attr">value</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">        消息</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-segment-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-segment-button</span> <span class="attr">value</span>=<span class="string">"contact"</span>&gt;</span></span><br><span class="line">        聊天</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-segment-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-segment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngSwitch</span>]=<span class="string">"contact"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-list</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'new'"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-list</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'message'"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-list</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'contact'"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ts"><a href="#ts" class="headerlink" title="ts"></a>ts</h3><p>我们还需要指定默认显示的<code>segment</code>，只需要用在<code>html</code>文件中用<code>[(ngModel)]</code>双向绑定的对象设为某个<code>segment-button</code>的<code>value</code>值就行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NavController&#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;DynamicPage&#125; <span class="keyword">from</span> <span class="string">'../contact/dynamic'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  templateUrl: <span class="string">'build/pages/contact/contact.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ContactPage</span> </span>&#123;</span><br><span class="line">  public contact: string = <span class="string">"new"</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(private navCtrl: NavController) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引用的<a href="http://ionicframework.com/docs/v2/components/#segment" target="_blank" rel="noopener">官方文档</a></p>
<p><a href="https://github.com/driftyco/ionic-preview-app/tree/master/app/pages/segments/basic" target="_blank" rel="noopener">官方的参考Demo</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>window端口被占用</title>
    <url>/2016/09/09/2016-09-09-port-occupy/</url>
    <content><![CDATA[<h2 id="解决端口冲突问题"><a href="#解决端口冲突问题" class="headerlink" title="解决端口冲突问题"></a>解决端口冲突问题</h2><p>我们在启用某些服务时，比如启动本地Tomcat，或者本地MySQL，往往可能会存在因端口占用而启动失败的情况。</p>
<h3 id="netstat-ano"><a href="#netstat-ano" class="headerlink" title="netstat -ano"></a>netstat -ano</h3><p>我们可以打开命令行，输入<code>netstat -ano</code>查看所有端口的占用情况</p>
<p><img src="port.jpg" alt="img"></p>
<p>比如我们要使用8100的端口号，我们就需要先找到占用这个端口号的程序，然后再将其关闭，</p>
<h3 id="netstat-aon-findstr-“端口号”"><a href="#netstat-aon-findstr-“端口号”" class="headerlink" title="netstat -aon|findstr “端口号”"></a>netstat -aon|findstr “端口号”</h3><p>我们需要通过最后一列的PID来查找对应的程序，</p>
<p>我们也可以输入<code>netstat -aon|findstr &quot;8100&quot;</code>来查看对应的PID为5996。</p>
<p><img src="port1.jpg" alt="img"></p>
<h3 id="tasklist-findstr-“PID”"><a href="#tasklist-findstr-“PID”" class="headerlink" title="tasklist|findstr “PID”"></a>tasklist|findstr “PID”</h3><p>输入<code>tasklist|findstr &quot;5996&quot;</code>查看占用该端口的程序是什么。</p>
<p><img src="port2.jpg" alt="img"></p>
<h3 id="taskkill-f-t-im-程序名称"><a href="#taskkill-f-t-im-程序名称" class="headerlink" title="taskkill /f /t /im 程序名称"></a>taskkill /f /t /im 程序名称</h3><p>输入 <code>taskkill /f /t /im node.exe</code>结束该程序。</p>
<p><img src="port3.jpg" alt="img"></p>
<h3 id="通过任务管理器关闭程序"><a href="#通过任务管理器关闭程序" class="headerlink" title="通过任务管理器关闭程序"></a>通过任务管理器关闭程序</h3><p>知道程序的PID之后我们通过PID在任务管理器中找到这个程序然后结束他。</p>
<p><img src="port4.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>端口</tag>
      </tags>
  </entry>
  <entry>
    <title>ionic side menu</title>
    <url>/2016/08/30/2016-08-30-ionic-side-menu/</url>
    <content><![CDATA[<h2 id="侧滑效果图"><a href="#侧滑效果图" class="headerlink" title="侧滑效果图"></a>侧滑效果图</h2><p><img src="ionic_side_menu2.png" alt="img"></p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>我们需要如图所示的目录结构，其中我们需要的<code>app.html</code>、<code>app.ts</code>、<code>app.scss</code>需要放在<code>app</code>文件夹的下，</p>
<p><img src="ionic_side_menu3.jpg" alt="img"></p>
<h2 id="app-html"><a href="#app-html" class="headerlink" title="app.html"></a>app.html</h2><p><code>app.html</code>展示的是侧栏菜单里的内容，可以这么写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.html</span></span><br><span class="line"><span class="comment">// in same directory as app.js --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- this menu section should hold what content and destine to where</span></span><br><span class="line"><span class="comment">// at what point in time?</span></span><br><span class="line"><span class="comment">// That is determined by the last line in this --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-menu</span> [<span class="attr">content</span>]=<span class="string">"content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- The side menu title --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>Menu<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- remember the `this.pages` object we created in `app.js`?</span></span><br><span class="line"><span class="comment">      // Iterate through, then when clicked, run the associated function</span></span><br><span class="line"><span class="comment">      // passing in the #p item. --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- // changed #p to let p instead --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ion-item</span> *<span class="attr">ngFor</span>=<span class="string">"let p of pages"</span> &gt;</span></span><br><span class="line">        &#123;&#123;p.title&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-menu</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- What's my root? remember the this.rootPage?--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-nav</span> <span class="attr">id</span>=<span class="string">"nav"</span> [<span class="attr">root</span>]=<span class="string">"rootPage"</span> #<span class="attr">content</span> <span class="attr">swipe-back-enabled</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="app-ts"><a href="#app-ts" class="headerlink" title="app.ts"></a>app.ts</h2><p><code>app.ts</code>文件写的是一些事件，可以这么写</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, ViewChild&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Platform, ionicBootstrap, MenuController, NavController&#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;StatusBar&#125; <span class="keyword">from</span> <span class="string">'ionic-native'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TabsPage&#125; <span class="keyword">from</span> <span class="string">'./pages/tabs/tabs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HomePage&#125; <span class="keyword">from</span> <span class="string">'./pages/home/home'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  templateUrl: <span class="string">'build/app.html'</span>,</span><br><span class="line">  providers: [NavController]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyApp &#123;</span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">'nav'</span>) nav : NavController;</span><br><span class="line">  <span class="keyword">private</span> rootPage: <span class="built_in">any</span>;</span><br><span class="line">  <span class="keyword">private</span> pages: <span class="built_in">any</span>[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> platform: Platform, <span class="keyword">private</span> menu: MenuController</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.menu = menu;</span><br><span class="line">    <span class="keyword">this</span>.pages = [</span><br><span class="line">        &#123; title: <span class="string">'Home'</span>, component: HomePage &#125;,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">this</span>.rootPage = TabsPage;</span><br><span class="line"></span><br><span class="line">    platform.ready().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Okay, so the platform is ready and our plugins are available.</span></span><br><span class="line">      <span class="comment">// Here you can do any higher level native things you might need.</span></span><br><span class="line">      StatusBar.styleDefault();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  openPage(page) &#123;</span><br><span class="line">    <span class="keyword">this</span>.menu.close()</span><br><span class="line">    <span class="comment">// Using this.nav.setRoot() causes</span></span><br><span class="line">    <span class="comment">// Tabs to not show!</span></span><br><span class="line">    <span class="keyword">this</span>.nav.push(page.component);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ionicBootstrap(MyApp);</span><br></pre></td></tr></table></figure>

<h2 id="home-html"><a href="#home-html" class="headerlink" title="home.html"></a>home.html</h2><p>在每个需要侧滑按钮的tab显示的页面，顶部加上一个按钮，<code>&lt;button type=&quot;button&quot; name=&quot;button&quot; menuToggle&gt; &lt;/button&gt;</code>，<code>menuToggle</code>就是添加侧滑的事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">menuToggle</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span> <span class="attr">padding</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to Ionic!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    This starter project comes with simple tabs-based layout for apps</span><br><span class="line">    that are going to primarily use a Tabbed UI.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Take a look at the <span class="tag">&lt;<span class="name">code</span>&gt;</span>app/<span class="tag">&lt;/<span class="name">code</span>&gt;</span> directory to add or change tabs,</span><br><span class="line">    update any existing page or create new pages.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p>本文的侧滑菜单参照自<a href="https://blog.khophi.co/ionic-2-side-menu-tabs/" target="_blank" rel="noopener">Ionic 2 – Side Menu and Tabs</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈响应式</title>
    <url>/2016/08/10/2016-08-10-self-adaption/</url>
    <content><![CDATA[<h2 id="响应式网站概念"><a href="#响应式网站概念" class="headerlink" title="响应式网站概念"></a>响应式网站概念</h2><ol>
<li><p>flexible grid layout 弹性网格布局</p>
</li>
<li><p>flexible image 弹性图片</p>
</li>
<li><p>media queries 媒体查询</p>
<a id="more"></a>

</li>
</ol>
<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>各种不同的浏览器之前都会存在默认的行为，也就是默认的css样式并不是一样的。</p>
<p>所以我们需要统一浏览器行为，原来我们会引入reset.css，但reset.css会让很多标签失去原来的样式。</p>
<p>因此我们现在大多采用<a href="https://necolas.github.io/normalize.css/" target="_blank" rel="noopener">Normaliez.css</a>,它在统一各浏览器默认css样式的同时，也保持了各个标签原有的一些样式。</p>
<h2 id="处理IE低版本浏览器兼容性的问题。"><a href="#处理IE低版本浏览器兼容性的问题。" class="headerlink" title="处理IE低版本浏览器兼容性的问题。"></a>处理IE低版本浏览器兼容性的问题。</h2><h3 id="1-CSS3媒体查询"><a href="#1-CSS3媒体查询" class="headerlink" title="1. CSS3媒体查询"></a>1. CSS3媒体查询</h3><p>我们使用到的媒体查询属于css3的属性，因此可能存在浏览器不兼容的情况。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">25%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">599px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>respond.js</code>库可以帮我们解决浏览器不兼容<code>media</code>媒体查询的问题。</p>
<p>只需在<code>html</code>前引入下方 <strong>IE条件注释</strong> ，如果 <em>IE版本</em> 小于等于8，则执行注释中的语句，我们就可以放心使用<code>media</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lte IE 8]&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src="js/respond.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-HTML5标签"><a href="#2-HTML5标签" class="headerlink" title="2. HTML5标签"></a>2. HTML5标签</h3><p>同样，因为IE 6、7、8 不兼容<code>HTML5</code>,因此我们需要引入<code>HTML5shiv</code>,</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src="bower_components/html5shiv/dist/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>

<p>它会通过js的方式创建HTML5的标签，让我们可以放心使用HTML5的新增标签。</p>
<h3 id="3-自适应图片"><a href="#3-自适应图片" class="headerlink" title="3. 自适应图片"></a>3. 自适应图片</h3><p>既然网站是响应式的，我们的图片当然也需要自适应。</p>
<p>我们可以引入HTML5新增元素<code>&lt;picture&gt;&lt;/picture&gt;</code>。</p>
<ul>
<li>创建<picture></picture>标签。</li>
<li>在这些标签内创建一个你想用来执行任何一个特性的<source>元素。</li>
<li>添加一个<code>media</code>属性，用来包含你想要的特性，如视口的当前高度(viewport height)，宽度(width)，方向(orientation)等。</li>
<li>添加一个<code>srcset</code>属性与相应的图像文件名相匹配，进行加载。如果你想提供不同的像素密度，例如Retina显示屏，你可以添加额外的文件名到你的<code>srcset</code>属性中，</li>
<li>添加一个回退的<code>&lt;img&gt;</code>元素。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"default.jpg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"smaller.jpg"</span> <span class="attr">media</span>=<span class="string">"(max-width: 768px)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">"default.jpg"</span> <span class="attr">alt</span>=<span class="string">"My default image"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是并不是所有的浏览器都支持<code>&lt;picture&gt;&lt;/picture&gt;</code>，因此我们需要引入<code>picturefill.js</code>库,它会给不支持<code>picture</code>的浏览器使用替代方案。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"picturefill.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为IE 9不能识别<code>&lt;picture&gt;&lt;/picture&gt;</code>中的<code>&lt;source&gt;</code>标签，因此我们需要这样写。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--[if IE 9]&gt;&lt;video style="display: none;"&gt;&lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"examples/images/extralarge.jpg"</span> <span class="attr">media</span>=<span class="string">"(min-width: 1000px)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"examples/images/large.jpg"</span> <span class="attr">media</span>=<span class="string">"(min-width: 800px)"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--[if IE 9]&gt;&lt;/video&gt;&lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">"examples/images/medium.jpg"</span> <span class="attr">alt</span>=<span class="string">"…"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-预防浏览器不兼容"><a href="#4-预防浏览器不兼容" class="headerlink" title="4. 预防浏览器不兼容"></a>4. 预防浏览器不兼容</h3><p>Modernizr：专为HTML5和CSS3开发的功能检测类库。</p>
<p>我们可以在官网下载我们需要检测的属性。</p>
<p><img src="self-adapter.jpg" alt="image"></p>
<p>比如我们需要检测<code>SVG</code>，我们就可以下载并保存到本地的<code>js</code>文件中，并在<code>html</code>中引入，如果浏览器不支持这个属性，就会自动在<code>&lt;html&gt;&lt;/html&gt;</code>标签上加上<code>class=&quot;no-svg&quot;</code>,</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"no-svg"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们就可以在css样式表中书写</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.no-svg</span> <span class="selector-tag">header</span> ... &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-svg</span> <span class="selector-class">.picture</span> ...&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给不兼容svg的情况增加替代方案。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>现在浏览器对HTML5和CSS3的兼容性参差不齐，我们也没必要全部记忆，</p>
<p>我们在使用这些属性时可以先去查看下这个标签或属性的浏览器兼容情况。我们可以访问</p>
<p><a href="http://caniuse.com/" target="_blank" rel="noopener">can I use</a></p>
<p>我们只需要将我们需要查询标签或属性输入就行，</p>
<p><img src="caniuse.jpg" alt="image"></p>
<h4 id="推荐框架"><a href="#推荐框架" class="headerlink" title="推荐框架"></a>推荐框架</h4><ul>
<li><a href="http://v3.bootcss.com/" target="_blank" rel="noopener">Bootstrap</a></li>
<li><a href="http://www.foundcss.com/" target="_blank" rel="noopener">Foundation</a></li>
<li><a href="http://www.semantic-ui-cn.com/" target="_blank" rel="noopener">Semantic UI</a></li>
<li><a href="http://www.purecss.org/" target="_blank" rel="noopener">Pure.css</a></li>
</ul>
<h4 id="比较好的工具"><a href="#比较好的工具" class="headerlink" title="比较好的工具"></a>比较好的工具</h4><p>简单安装的教程，本人博客也有写，附上地址：</p>
<ul>
<li><a href="https://tangliangdong.github.io/2016/08/08/http-server/" target="_blank" rel="noopener">http-server</a>   基于nodejs的轻量级服务器</li>
<li><a href="https://tangliangdong.github.io/2016/08/07/Browsersync/" target="_blank" rel="noopener">Browsersync</a>   多浏览器多终端同时进行调试的工具</li>
<li><a href="https://tangliangdong.github.io/2016/08/08/gulp-install/" target="_blank" rel="noopener">Gulp</a>   基于流的自动化构建工具</li>
</ul>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>响应式</tag>
      </tags>
  </entry>
  <entry>
    <title>配置gulp</title>
    <url>/2016/08/09/2016-08-09-gulp-install/</url>
    <content><![CDATA[<h2 id="介绍-gulp"><a href="#介绍-gulp" class="headerlink" title="介绍 gulp"></a>介绍 <a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">gulp</a></h2><p>这里通过<code>gulp</code>实现的功能比较简单，就是将项目打包发布，因为通过<code>http</code>请求获得很多小文件的效率不如请求一个大文件，所以我们可以将所有的<code>css</code>和<code>js</code>文件进行合并。</p>
<p><code>gulp</code>可以给每次合并的<code>js</code>和<code>css</code>文件名后面跟上一个<code>Hashcode</code>，防止浏览器以为是一样的文件而不进行更新。</p>
<h2 id="1-给项目书写package-json"><a href="#1-给项目书写package-json" class="headerlink" title="1. 给项目书写package.json"></a>1. 给项目书写package.json</h2><p><code>cd</code>到项目根目录下，输入<code>npm init</code>。</p>
<p>然后会要求输入一些初始化信息，除了名字需要小写外，其他暂时不需要写，直接<code>enter</code>就行，最后会产生一个<code>package.json</code>的文件 </p>
<h2 id="2-安装gulp"><a href="#2-安装gulp" class="headerlink" title="2. 安装gulp"></a>2. 安装gulp</h2><p>我们需要在全局范围和项目下配置<code>gulp</code>环境，输入<code>npm install -g gulp</code>，然后输入<code>gulp -v</code>查看安装的gulp版本号以确认是否成功安装。</p>
<p><code>cd</code>到项目根目录，输入<code>npm install gulp --save-dev</code>，给项目配置<code>gulp</code>。</p>
<h2 id="3-下载gulp的插件"><a href="#3-下载gulp的插件" class="headerlink" title="3. 下载gulp的插件"></a>3. 下载gulp的插件</h2><p>继续输入</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">npm install gulp-<span class="built_in">rev</span> gulp-<span class="built_in">rev</span>-replace gulp-useref gulp-filter gulp-uglify gulp-csso --<span class="keyword">save</span>-dev</span><br></pre></td></tr></table></figure>

<p>下载所需的插件。</p>
<p><img src="gulp1.jpg" alt="package.json"></p>
<p>安装的插件都会添加到<code>package.json</code>的生产环境中。</p>
<h2 id="4-书写插件的行为"><a href="#4-书写插件的行为" class="headerlink" title="4. 书写插件的行为"></a>4. 书写插件的行为</h2><p>在项目根目录下创建<code>gulpfile.js</code>,在里面输入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>);</span><br><span class="line"><span class="keyword">var</span> revReplace = <span class="built_in">require</span>(<span class="string">'gulp-rev-replace'</span>);</span><br><span class="line"><span class="keyword">var</span> useref = <span class="built_in">require</span>(<span class="string">'gulp-useref'</span>);</span><br><span class="line"><span class="keyword">var</span> filter = <span class="built_in">require</span>(<span class="string">'gulp-filter'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> csso = <span class="built_in">require</span>(<span class="string">'gulp-csso'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> jsFilter = filter(<span class="string">'**/*.js'</span>,&#123;<span class="attr">restore</span>:<span class="literal">true</span>&#125;);</span><br><span class="line">    <span class="keyword">var</span> cssFilter = filter(<span class="string">'**/*.css'</span>,&#123;<span class="attr">restore</span>:<span class="literal">true</span>&#125;);</span><br><span class="line">    <span class="keyword">var</span> indexHtmlFilter = filter([<span class="string">'**/*'</span>,<span class="string">'!**/index.html'</span>],&#123;<span class="attr">restore</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/index.html'</span>)</span><br><span class="line">        .pipe(useref())</span><br><span class="line">        .pipe(jsFilter)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(jsFilter.restore)</span><br><span class="line">        .pipe(cssFilter)</span><br><span class="line">        .pipe(csso())</span><br><span class="line">        .pipe(cssFilter.restore)</span><br><span class="line">        .pipe(indexHtmlFilter)</span><br><span class="line">        .pipe(rev())</span><br><span class="line">        .pipe(indexHtmlFilter.restore)</span><br><span class="line">        .pipe(revReplace())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>根据<a href="https://www.npmjs.com/package/gulp-useref" target="_blank" rel="noopener">官方</a>的要求，我们还需要在<code>index.html</code>页面引入<code>css</code>和<code>js</code>的地方添加如下的注释代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- build:&lt;type&gt;(alternate search path) &lt;path&gt; &lt;parameters&gt; --&gt;</span></span><br><span class="line">... HTML Markup, list of script / link tags.</span><br><span class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- build:css css/combined.css --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/one.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/two.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- endbuild --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- build:js scripts/combined.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"scripts/one.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"scripts/two.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- endbuild --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-执行gulp插件"><a href="#5-执行gulp插件" class="headerlink" title="5. 执行gulp插件"></a>5. 执行gulp插件</h2><p>之后在命令行输入<code>gulp</code>，就可以执行这些插件，会在根目录下生成<code>dist</code>的文件夹，里面有我们可以打包发布的文件。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>npm</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>配置http-server</title>
    <url>/2016/08/09/2016-08-09-http-server/</url>
    <content><![CDATA[<h4 id="http-server-官网介绍"><a href="#http-server-官网介绍" class="headerlink" title="http-server 官网介绍"></a>http-server <a href="https://www.npmjs.com/package/http-server" target="_blank" rel="noopener">官网介绍</a></h4><h3 id="1-安装-http-server"><a href="#1-安装-http-server" class="headerlink" title="1. 安装 http-server"></a>1. 安装 http-server</h3><p>在window命令行输入<code>npm install http-server -g</code>，全局安装<code>http-server</code>,输入<code>http-server -v</code>查看版本号。</p>
<h3 id="2-启动-http-server"><a href="#2-启动-http-server" class="headerlink" title="2. 启动 http-server"></a>2. 启动 http-server</h3><p>在命令行输入<code>http-server src</code>,src指的需要提供服务的路径。</p>
<p>然后会显示两个地址，一个本机地址，还有个是远程访问的地址，可以通过局域网访问。</p>
<h3 id="3-参数"><a href="#3-参数" class="headerlink" title="3. 参数"></a>3. 参数</h3><p>我们可以在启动<code>http-server</code>服务时，通过添加<code>-p 端口号</code>，来更改服务器端口号，防止端口被占用。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>npm</tag>
        <tag>http-server</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Browsersync</title>
    <url>/2016/08/08/2016-08-07-Browsersync/</url>
    <content><![CDATA[<p>Browsersync是用于多浏览器多终端同时进行调试的工具，简单易用。<br><a href="http://http://www.browsersync.cn/" target="_blank" rel="noopener">Browsersync</a>官网也有详细的讲解。</p>
<p>配置有很多方式，<a href="http://www.browsersync.cn/docs/" target="_blank" rel="noopener">官方文档</a>讲的也挺清楚的。</p>
<p>我就用最简单的一种方式，</p>
<h2 id="1-下载Browsersync"><a href="#1-下载Browsersync" class="headerlink" title="1. 下载Browsersync"></a>1. 下载Browsersync</h2><p>当然电脑上得有nodejs环境,因为要依赖nodejs，用npm包管理器下载Browsersync。</p>
<p>可以输入<code>node -v</code>可以查看安装的nodejs版本。</p>
<p>输入<code>npm -v</code>查看npm的版本，<code>-v</code>是<code>--version</code>的简写。</p>
<h2 id="2-安装Browsersync"><a href="#2-安装Browsersync" class="headerlink" title="2. 安装Browsersync"></a>2. 安装Browsersync</h2><p>打开命令行，我们通过输入<code>npm install -g browser-sync</code>，<code>-g</code>是全局安装browsersync的参数,在本机的任何位置都可以使用browsersync。</p>
<p>卸载可以通过输入<code>npm uninstall -g browser-sync</code>。</p>
<p>等待下载完成之后，我们可以输入<code>browser-sync --version</code>检查browsersync版本号。</p>
<h2 id="3-运行Browsersync"><a href="#3-运行Browsersync" class="headerlink" title="3. 运行Browsersync"></a>3. 运行Browsersync</h2><p>如果安装成功，我们可以<code>cd</code>到项目根目录下，输入<code>browser-sync start --server --files &quot;**.css&quot;</code>，就能看到远程访问和本地访问的ip地址。</p>
<h6 id="win的node容易出问题，本人电脑在配置的时候也出现了问题，但别的电脑还是可以一步成功的。"><a href="#win的node容易出问题，本人电脑在配置的时候也出现了问题，但别的电脑还是可以一步成功的。" class="headerlink" title="win的node容易出问题，本人电脑在配置的时候也出现了问题，但别的电脑还是可以一步成功的。"></a>win的node容易出问题，本人电脑在配置的时候也出现了问题，但别的电脑还是可以一步成功的。</h6><p>之前启动browsersync时出现错误的问题，在询问老师后，得到了解决。</p>
<p>需要在环境变量的<code>Path</code>后加上<code>C:\Windows\System32\</code>，之后browsersync就能正常启动了，功能还是非常强大的。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>browsersync</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>window配置maven和spring环境</title>
    <url>/2016/07/16/2016-07-17-maven-spring/</url>
    <content><![CDATA[<h2 id="1-maven官网"><a href="#1-maven官网" class="headerlink" title="1. maven官网"></a>1. <a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">maven官网</a></h2><p>下载maven压缩包</p>
<p><img src="maven1.jpg" alt="image"></p>
<h2 id="2-解压到你要放置的地方，并配置环境变量"><a href="#2-解压到你要放置的地方，并配置环境变量" class="headerlink" title="2. 解压到你要放置的地方，并配置环境变量"></a>2. 解压到你要放置的地方，并配置环境变量</h2><p>先将解压后的根目录路径配置到变量名为 <code>MAVEN_HOME</code><br><img src="maven2.jpg" alt="image"><br>再定位到该路径下的bin文件夹，并将其配置到<code>Path</code>变量，<code>%MAVEN_HOME%\bin</code><br><img src="maven3.jpg" alt="image"></p>
<h2 id="3-新建两个文件夹"><a href="#3-新建两个文件夹" class="headerlink" title="3. 新建两个文件夹"></a>3. 新建两个文件夹</h2><p>一个<code>repo</code>当做本地仓库，一个<code>proj</code>用来放置项目</p>
<h2 id="4-连接maven和本地仓库repo"><a href="#4-连接maven和本地仓库repo" class="headerlink" title="4. 连接maven和本地仓库repo"></a>4. 连接maven和本地仓库<code>repo</code></h2><p>进入之前解压的maven包下的conf文件夹<br><img src="maven4.jpg" alt="image"></p>
<p>打开<code>settings.xml</code>文件</p>
<p><img src="maven5.jpg" alt="image"></p>
<p>我们需要maven标记我们本地仓库<code>repo</code>的位置，但这一行被注释了，我们需要把他放出来，并换上repo的绝对路径</p>
<p><img src="maven6.jpg" alt="image"></p>
<h2 id="5-从maven远程仓库下载资源"><a href="#5-从maven远程仓库下载资源" class="headerlink" title="5. 从maven远程仓库下载资源"></a>5. 从maven远程仓库下载资源</h2><p>打开win命令行，<code>cd</code>到<code>proj</code>然后创建项目文件夹，此处以<code>blog</code>为例，然后在命令行输入以下代码</p>
<pre><code>mvn archetype:generate -DgroupId=com.itbegin.blog -DartifactId=blog -DarchetypeArtifactId=maven-archetype-webapp</code></pre><p><code>DgroupId</code>是java文件的包名，代表组织和整个项目的唯一标志。<br><code>DartifactId</code>是具体项目的名称，它于groupId共同确定一个项目在maven repo中的位置。</p>
<p>按下<code>enter</code>后，如果是第一次，本地仓库会自己去远程仓库下载所需的东西到<code>repo</code>里面，以后就无需下载了。</p>
<h4 id="1-此时，blog目录下会有"><a href="#1-此时，blog目录下会有" class="headerlink" title="1. 此时，blog目录下会有"></a>1. 此时，<code>blog</code>目录下会有</h4><ul>
<li>src </li>
<li>pom.xml<br>其他都是没用的，打开pom.xml</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">  xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.itbegin&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;blog&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; </span><br><span class="line">  &lt;version.spring&gt;4.2.4.RELEASE&lt;/version.spring&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.8.2&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.3&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;version.spring&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;version.spring&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;$&#123;version.spring&#125;&lt;/version&gt;  </span><br><span class="line">      &lt;/dependency&gt; </span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.freemarker&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;freemarker&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.20&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.h2database&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;h2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.186&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;test&lt;/finalName&gt;</span><br><span class="line">    &lt;directory&gt;$&#123;my.target&#125;&lt;/directory&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.1&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;source&gt;1.7&lt;/source&gt;</span><br><span class="line">                &lt;target&gt;1.7&lt;/target&gt;</span><br><span class="line">                &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.6&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;  </span><br><span class="line">                &lt;encoding&gt;UTF-8&lt;/encoding&gt;  </span><br><span class="line">            &lt;/configuration&gt; </span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;path&gt;/&lt;/path&gt;</span><br><span class="line">                &lt;contextReloadable&gt;true&lt;/contextReloadable&gt;</span><br><span class="line">                &lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p>直接用以上全部代码覆盖之前pom.xml的代码，当然有需要的可以改。</p>
<h4 id="2-之后打开proj-blog-src-main-webapp-WEB-INF-下的web-xml-同样用下方的代码进行覆盖"><a href="#2-之后打开proj-blog-src-main-webapp-WEB-INF-下的web-xml-同样用下方的代码进行覆盖" class="headerlink" title="2. 之后打开proj\blog\src\main\webapp\WEB-INF 下的web.xml,同样用下方的代码进行覆盖"></a>2. 之后打开<code>proj\blog\src\main\webapp\WEB-INF</code> 下的<code>web.xml</code>,同样用下方的代码进行覆盖</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line"> <span class="string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"> <span class="string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;display-name&gt;&lt;/display-name&gt;</span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span></span></span><br><span class="line"><span class="class">        &lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">context</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">        &lt;param-value&gt;classpath:applicationContext*.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-创建资源文件"><a href="#3-创建资源文件" class="headerlink" title="3. 创建资源文件"></a>3. 创建资源文件</h4><p>进入<code>proj\blog\src\main\resources</code>下，创建<code>applicationContext-jdbc.xml</code>，并粘贴以下内容。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line"> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span><br><span class="line"> xmlns:jdbc=<span class="string">"http://www.springframework.org/schema/jdbc"</span> </span><br><span class="line"> xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">      http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="line"><span class="string">      http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd </span></span><br><span class="line"><span class="string">"</span>&gt;</span><br><span class="line">   &lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.h2.jdbcx.JdbcConnectionPool"</span></span><br><span class="line">        destroy-method=<span class="string">"dispose"</span>&gt;</span><br><span class="line">        &lt;constructor-arg&gt;</span><br><span class="line">            &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.h2.jdbcx.JdbcDataSource"</span>&gt;</span><br><span class="line">                &lt;!-- 内存模式 --&gt;</span><br><span class="line">               &lt;!--  &lt;property name=<span class="string">"URL"</span> value=<span class="string">"jdbc:h2:"</span> /&gt;--&gt;</span><br><span class="line">                &lt;!-- 文件模式 --&gt;</span><br><span class="line">                &lt;property name=<span class="string">"URL"</span> value=<span class="string">"jdbc:h2:c:\tmp\blog"</span> /&gt;               </span><br><span class="line">                &lt;property name=<span class="string">"user"</span> value=<span class="string">"sa"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"sa"</span> /&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"jdbcTemplate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;  </span><br><span class="line">        &lt;property name = <span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>/&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">    &lt;!-- 初始化数据表结构 --&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4-创建所需的目录结构"><a href="#4-创建所需的目录结构" class="headerlink" title="4. 创建所需的目录结构"></a>4. 创建所需的目录结构</h4><p>在<code>WEB-INF</code>下创建<code>template</code>文件夹，里面放<code>.ftl</code>文件，用来显示view。</p>
<p>到<code>proj\blog\src\main</code>下,创建java的文件夹之后就会有如下所示的大致结构，</p>
<p><img src="maven7.jpg" alt="image"></p>
<p>之后构建<code>proj\blog\src\main\java\com\itbegin</code>这样的路径，在这个目录下可以放置如下的文件夹<br><img src="maven8.jpg" alt="image"></p>
<h2 id="6-启动内置的Tomcat"><a href="#6-启动内置的Tomcat" class="headerlink" title="6. 启动内置的Tomcat"></a>6. 启动内置的Tomcat</h2><p>打开命令行，进入blog项目的根目录，输入<code>clean tomcat7:run</code>,便会自动下载以及启动Tomcat,在网址中输入<code>localhost:8080</code>即可访问</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>spring</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime text 3 插件分享</title>
    <url>/2016/07/10/2016-07-10-sublime-text-3/</url>
    <content><![CDATA[<h2 id="提高效率的Sublime-Text-3插件"><a href="#提高效率的Sublime-Text-3插件" class="headerlink" title="提高效率的Sublime Text 3插件"></a>提高效率的Sublime Text 3插件</h2><blockquote>
<p>虽然是收费的，但网上可以找到注册码<br>如下是网上找来的注册码，打开菜单的 help &gt; Enter License ，复制进去就行了。</p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">—– BEGIN LICENSE —–</span><br><span class="line"></span><br><span class="line">Michael Barnes</span><br><span class="line">Single User License</span><br><span class="line">EA7E<span class="number">-821385</span></span><br><span class="line"><span class="number">8</span>A353C41 <span class="number">872</span>A0D5C DF9B2950 AFF6F667</span><br><span class="line">C458EA6D <span class="number">8</span>EA3C286 <span class="number">98</span>D1D650 <span class="number">131</span>A97AB</span><br><span class="line">AA919AEC EF20E143 B361B1E7 <span class="number">4</span>C8B7F04</span><br><span class="line">B085E65E <span class="number">2</span>F5F5360 <span class="number">8489</span>D422 FB8FC1AA</span><br><span class="line"><span class="number">93</span>F6323C FD7F7544 <span class="number">3</span>F39C318 D95E6480</span><br><span class="line">FCCC7561 <span class="number">8</span>A4A1741 <span class="number">68</span>FA4223 ADCEDE07</span><br><span class="line"><span class="number">200</span>C25BE DBBC4855 C4CFB774 C5EC138C</span><br><span class="line"><span class="number">0</span>FEC1CEF D9DCECEC D3A5DAD1 <span class="number">01316</span>C36</span><br><span class="line"></span><br><span class="line">—— END LICENSE ——</span><br></pre></td></tr></table></figure>

<h3 id="先安装Package-Control"><a href="#先安装Package-Control" class="headerlink" title="先安装Package Control"></a>先安装Package Control</h3><p>点击菜单中的 “View”–“Show Console”（也可通过快捷键 <code>Ctrl + ` </code>(ctrl + `) 打开，不过可能因与系统其他软件快捷键冲突而打不开）调出 Console。然后把下面的代码粘贴进去后回车即可，需稍微等待一段时间。（以下代码可能会因更新而导致失效，请以官网代码为准。<a href="https://packagecontrol.io/installation#st3" target="_blank" rel="noopener">Package Control</a>）</p>
<p><code>sublime text 3</code></p>
<code>
    import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)
</code>

<p>重启Sublime Text即可。</p>
<hr>
<p>建议通过 Package Control 安装Sublime插件<br>使用 <code>Ctrl + Shift + P</code>（shift + command + p） 调出面板，然后输入 <code>pci</code> ，选中“Package Control: Install Package”并回车，然后通过输入插件的名字找到插件并回车安装即可,安装时左下角会显示正在安装的项目。有些插件需要安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>，只要下载并将node.js目录配置到环境变量中即可。</p>
<blockquote>
<h4 id="插件不要使用太多，可能会出现快捷键冲突导致插件失效的情况，当然你也可以修改默认快捷键。"><a href="#插件不要使用太多，可能会出现快捷键冲突导致插件失效的情况，当然你也可以修改默认快捷键。" class="headerlink" title="插件不要使用太多，可能会出现快捷键冲突导致插件失效的情况，当然你也可以修改默认快捷键。"></a>插件不要使用太多，可能会出现快捷键冲突导致插件失效的情况，当然你也可以修改默认快捷键。</h4></blockquote>
<h3 id="1-Emmet"><a href="#1-Emmet" class="headerlink" title="1. Emmet"></a>1. Emmet</h3><p>使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度。本人认为最能提高效率的Sublime Text插件。<br>在html文件开头输入<code>！</code> + <code>Tab键</code></p>
<p><img src="Emmet.jpg" alt="image"></p>
<p><a href="http://www.ruanyifeng.com/blog/2013/06/emmet_and_haml.html" target="_blank" rel="noopener">Emmet语法</a></p>
<p>我在Mac上安装的emmet插件的时候，有遇到过嵌套表达时 tab键失效的情况，</p>
<p><img src="emmet1.png" alt="image"></p>
<ul>
<li>要先确定你的编译环境是html</li>
<li>还可能是pyv8的问题，由于Emmet插件需要pyv8插件，你需要戳 👉👉👉<a href="https://github.com/emmetio/pyv8-binaries" target="_blank" rel="noopener">这里</a> 下载zip。然后解压到sublime的在Packages目录下</li>
</ul>
<p>在页面的最下方👇👇👇 选择你sublime的版本，以及电脑的版本。 </p>
<p><img src="emmet2.png" alt="image"></p>
<p>然后重启sublime 就可以了。</p>
<h3 id="2-CSScomb"><a href="#2-CSScomb" class="headerlink" title="2. CSScomb"></a>2. CSScomb</h3><p>CssComb是为CSS属性进行排序和格式化插件</p>
<p>使用Package Control安装CssComb插件后，你可能发现它并不能运行</p>
<p>它依赖于Node.js</p>
<p>使用方法，编辑窗口直接右键 单击 Run CSScomb，或者 <code>Ctrl</code>+<code>Shift</code>+<code>C</code>，<br>编辑前后的对比</p>
<!-- ![image](CSScomb1.jpg)
![image](CSScomb2.jpg) -->

<img src="CSScomb1.jpg" style="display: inline-block;" width="260px" alt>
<img src="CSScomb2.jpg" style="display: inline-block;" width="260px" alt>

<h3 id="3-Autoprefixer"><a href="#3-Autoprefixer" class="headerlink" title="3. Autoprefixer"></a>3. Autoprefixer</h3><p>这是一款CSS3私有前缀自动补全插件</p>
<p>该插件使用CanIUse资料库，能精准判断哪些属性需要什么前缀</p>
<p>与CssComb插件一样，该插件也需要系统已安装Node.js环境</p>
<p>使用方法：在输入CSS3属性后（冒号前）按Tab键</p>
<p><img src="autoprefixer.gif" alt="image"></p>
<!-- <img src="https://github.com/tangliangdong/Sublime-Text-3/blob/master/images/autoprefixer.gif" width="300px" alt="">
 -->
<p>或者 按 <code>Ctrl</code>+ <code>Shift</code> + <code>P</code>，然后选 <code>Autoprefix CSS</code> 或者设置键盘快捷键 – <code>Preferences &gt; Key Bindings – User</code></p>
<p><img src="autoprefix1.jpg" alt="image"></p>
<h3 id="4-ColorPicker"><a href="#4-ColorPicker" class="headerlink" title="4. ColorPicker"></a>4. ColorPicker</h3><p>通常，如果你想使用一个颜色选择器则可能打开 Photoshop 或 GIMP。而在 Sublime Text 中，你可以使用内置的颜色选择器。安装完成后，只要按下<code>Ctrl / Cmd + Shift + C</code>快捷键。</p>
<p><img src="colorpicker1.jpg" alt="image"></p>
<blockquote>
<p>当然这里和之前的CSScomb 快捷键冲突了，<br>我们需要打开菜单中的 <code>preferences</code>-&gt; <code>Browse Packages</code> 进入插件安装目录，打开ColorPicker文件夹，</p>
</blockquote>
<p><img src="colorpicker.jpg" alt="image"></p>
<p>对应自己电脑的操作系统进入相应的文件进行设置。</p>
<p>本人的是window笔记本，因此打开 <code>Default (Windows)</code> 文件，如图</p>
<p><img src="colorpicker_setting.jpg" alt="image"></p>
<p>将<code>ctrl+shift+c</code> 改为 <code>ctrl+shift+d</code> 即可，当然也可以改成其他的，但是必须避免和其他的快捷键产生冲突。</p>
<h3 id="5-MarkdownEditing-和-OmniMarkupPreviewer"><a href="#5-MarkdownEditing-和-OmniMarkupPreviewer" class="headerlink" title="5.MarkdownEditing 和 OmniMarkupPreviewer"></a>5.MarkdownEditing 和 OmniMarkupPreviewer</h3><p>MarkdownEditing是Markdown写作者必备的插件，它可以不仅可以高亮显示Markdown语法还支持很多编程语言的语法高亮显示。</p>
<p>OmniMarkupPreviewer用来预览markdown 编辑的效果，同样支持渲染代码高亮的样式。<br><code>ctrl</code> + <code>Alt</code> + <code>o</code> 即可在浏览器中实时预览。</p>
<ul>
<li><code>Ctrl + Alt + O</code>: 在浏览器中预览</li>
<li><code>Ctrl + ALt + X</code>: 导出HTML</li>
<li><code>Ctrl + Alt + C</code>: HTML标记拷贝至剪贴板</li>
</ul>
<h3 id="6-Color-Highlighter"><a href="#6-Color-Highlighter" class="headerlink" title="6.Color Highlighter"></a>6.Color Highlighter</h3><p>Color Highlighter这个插件会检测CSS文件中的颜色码，不论是Hex码或者RGB码都能很好的显示。<br>再选中颜色码时会显示颜色。</p>
<p><img src="colorhighlighter.jpg" alt="image"></p>
<p>为让Color Highlighter能够设置成用背景色或者边框提示颜色，我一般在Settings里做这样的设置：</p>
<p><img src="colorhighlighter3.jpg" alt="image"></p>
<p><img src="colorhighlighter2.jpg" alt="image"></p>
<p>不需要选中就可以显示颜色码的颜色。</p>
<h3 id="7-AutoFileName"><a href="#7-AutoFileName" class="headerlink" title="7. AutoFileName"></a>7. AutoFileName</h3><p>文件路径自动提示，不过这个精准度的不够高，很多不是文件路径的地方都会提示。</p>
<h3 id="8-JQuery"><a href="#8-JQuery" class="headerlink" title="8. JQuery"></a>8. JQuery</h3><p>JQuery代码提示<br>输入 <code>ajax</code> + <code>Tab</code>，就会产生图示框架，很方便</p>
<p><img src="JQuery.jpg" alt="image"></p>
<h3 id="9-ConvertToUTF8"><a href="#9-ConvertToUTF8" class="headerlink" title="9. ConvertToUTF8"></a>9. ConvertToUTF8</h3><p>Sublime Text 本对中文支持不太好，如果直接打开 GBK 编码格式的文件会出现乱码的情况，ConvertToUTF8 可以将 GBK 等其他的编码文件转换为 UTF8 显示，解决中文乱码问题。</p>
<blockquote>
<p>通过本插件，您可以编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的 GB2312，GBK，BIG5，EUC-KR，EUC-JP 等。ConvertToUTF8 同时支持 Sublime Text 2 和 3。 ——- ConvertToUTF8 官方介绍</p>
</blockquote>
<hr>
<h2 id="其他还有很多好用方便的-插件，比如"><a href="#其他还有很多好用方便的-插件，比如" class="headerlink" title="其他还有很多好用方便的 插件，比如"></a>其他还有很多好用方便的 插件，比如</h2><ul>
<li>JsFormat (js格式化工具)、</li>
<li>BracketHighlighter (高亮显示匹配的括号、引号和标签)</li>
<li>Alignment (等号对齐)</li>
</ul>
<h2 id="建议不要过多使用，尽量安装自己常用的。"><a href="#建议不要过多使用，尽量安装自己常用的。" class="headerlink" title="建议不要过多使用，尽量安装自己常用的。"></a>建议不要过多使用，尽量安装自己常用的。</h2><!-- [1]:https://github.com/tangliangdong/Sublime-Text-3/blob/master/images/Emmet.jpg
[2]:https://github.com/tangliangdong/Sublime-Text-3/blob/master/images/autoprefix1.jpg
[3]: https://github.com/tangliangdong/Sublime-Text-3/blob/master/images/colorpicker1.jpg
[4]:https://github.com/tangliangdong/Sublime-Text-3/blob/master/images/colorpicker.jpg
[5]: https://github.com/tangliangdong/Sublime-Text-3/blob/master/images/colorpicker_setting.jpg
[6]: https://github.com/tangliangdong/Sublime-Text-3/blob/master/images/colorhighlighter.jpg
[7]: https://github.com/tangliangdong/Sublime-Text-3/blob/master/images/colorhighlighter2.jpg
[8]: https://github.com/tangliangdong/Sublime-Text-3/blob/master/images/JQuery.jpg -->


]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>sublime</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>git 合并commit的步骤</title>
    <url>/2016/07/10/2016-07-10-git-commit-rebase/</url>
    <content><![CDATA[<p>如果是别人的项目，那就首先frok项目，然后克隆到本地，如果是自己的就直接clone到本地。</p>
<pre><code>$ git clone &lt;版本库的网址&gt;</code></pre><p><img src="1.jpg" alt="image"></p>
<p>若要合并<code>second commit</code>和<code>third commit</code>，则</p>
<pre><code>$ git rebase -i &lt;first commit 的SHA-1&gt;</code></pre><p>其中，-i 的参数是不需要合并的 commit 的 hash 值，这里指的是first commit， 接着我们就进入 编辑模式<br>例如此例就是a的SHA-1 (可用git log查看该commit的版本号)</p>
<pre><code>$ git rebase -i 768d796670519c00600d99a90fcfad31182a0773</code></pre><p><img src="2.jpg" alt="image"></p>
<p>pick是会执行该commit，而squash会把这个版本的commit合并到前一个commit。<br>应该改成这样，会合并<code>third commit</code> 和 <code>second commit</code></p>
<p><img src="3.jpg" alt="image"></p>
<p>进入编辑模式，命名 合并后的新commit的信息，</p>
<p><img src="4.jpg" alt="image"></p>
<p>一开始的三个commit,最后只剩下合并后的<code>first commit</code> 和 <code>second and third commits</code>，如图</p>
<p><img src="5.jpg" alt="image"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><pre><code>$ git push origin develop --force

--force 强制合并远程仓库，防止出现错误（因为本地合并之后的commit和远程还没有合并的commit之间会有冲突）</code></pre><p>再发出合并请求</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>备忘录</tag>
      </tags>
  </entry>
  <entry>
    <title>git创建项目</title>
    <url>/2016/07/10/2016-07-12-git-create-project/</url>
    <content><![CDATA[<h2 id="1-首先我们需要创建一个项目，有两种方式："><a href="#1-首先我们需要创建一个项目，有两种方式：" class="headerlink" title="1.首先我们需要创建一个项目，有两种方式："></a>1.首先我们需要创建一个项目，有两种方式：</h2><p><img src="1.jpg" alt="image"><br><img src="2.jpg" alt="image"></p>
<p>之后，我们会进入项目的创建页面</p>
<p><img src="3.jpg" alt="image"></p>
<p>这就是我们项目的首页，</p>
<p><img src="4.jpg" alt="image"></p>
<p>然后我们就需要clone到本地，进行项目的更新，修改。</p>
<p>当然在此之前，我们需要在电脑上下载 <a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>,还有一些需要配置的，可以参考 <a href="https://git-scm.com/book/zh/v1/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git" target="_blank" rel="noopener">git初始配置</a>;</p>
<p><img src="5.jpg" alt="image"></p>
<p>然后在你本地找一个文件夹当做存放git项目的仓库，在该文件夹下，单击右键选择 <code>Git Bash Here</code>，输入 <code>git clone git@github.com:tangliangdong/git-book.git</code></p>
<p><img src="6.jpg" alt="image"></p>
<p>这样就算克隆成功了。这就算刚克隆下来的项目的根目录。</p>
<p><img src="7.jpg" alt="image"></p>
<p>用编辑器打开后就能用<a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">markdown</a>语法进行书写，markdown可以去学习下，不难</p>
<p><img src="8.jpg" alt="image"></p>
<p>在我们完成后，就可以向仓库提交文件。</p>
<p>在我们的项目的根目录下，打开git(就是之前提到的打开步骤)，输入<code>git add .</code> (意思是将所有更新过的文件放到暂存库，等待提交)。</p>
<p><img src="9.jpg" alt="image"></p>
<p>再输入<code>git commit -m &#39;first&#39;</code> (first代表的是我们给这个commit标注的信息)提交到本地仓库，我们可以通过输入<code>git log</code> 来查看我们提交的历史记录。</p>
<p><img src="10.jpg" alt="image"></p>
<p>然后我们可以将其提交到github远程仓库，输入<code>git push origin master</code></p>
<p><img src="11.jpg" alt="image"></p>
<p>这样我们就成功的同步到了github上，我们可以去github上就会发现我们多了一次commit，</p>
<p><img src="12.jpg" alt="image"></p>
<p>这里讲的步骤比较简单，具体的可以看<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">git教程</a></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>备忘录</tag>
      </tags>
  </entry>
</search>
