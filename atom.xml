<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoTang&#39; Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhizhi.tangliangdong.me/"/>
  <updated>2019-11-18T06:40:01.573Z</updated>
  <id>http://zhizhi.tangliangdong.me/</id>
  
  <author>
    <name>XiaoTang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tomcat8登陆用户配置</title>
    <link href="http://zhizhi.tangliangdong.me/2019/11/18/2019-11-18-tomcat8-login-configuration/"/>
    <id>http://zhizhi.tangliangdong.me/2019/11/18/2019-11-18-tomcat8-login-configuration/</id>
    <published>2019-11-18T03:51:34.000Z</published>
    <updated>2019-11-18T06:40:01.573Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="tomcat-users-xml"><a href="#tomcat-users-xml" class="headerlink" title="tomcat-users.xml"></a>tomcat-users.xml</h3><p> 在<strong>Tomcat</strong>根目录下找到 <code>conf/tomcat-users.xml</code>文件，在<code>&lt;tomcat-users&gt;&lt;/tomcat-user&gt;</code>标签中添加如下内容 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-jmx"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-status"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">roles</span>=<span class="string">"manager-gui,manager-script,manager-jmx,manager-status"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="context-xml"><a href="#context-xml" class="headerlink" title="context.xml"></a>context.xml</h3><p>还需要修改<strong>Tomcat</strong> 根目录下的 <code>webapps/manager/META_INF/context.xml</code>文件</p><p>将其中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.RemoteAddrValve"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">allow</span>=<span class="string">"127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>注释掉就行了。 因为默认tomcat不可以通过外部ip访问管理界面。一定要启动Tomcat，不然等构建等时候会报拒绝连接 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment">  contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment">  this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment">  The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment">  (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment">  the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">antiResourceLocking</span>=<span class="string">"false"</span> <span class="attr">privileged</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- &lt;Valve className="org.apache.catalina.valves.RemoteAddrValve"</span></span><br><span class="line"><span class="comment">         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" /&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">sessionAttributeValueClassNameFilter</span>=<span class="string">"java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;tomcat-users-xml&quot;&gt;&lt;a href=&quot;#tomcat-users-xml&quot; class=&quot;headerlink&quot; title=&quot;tomcat-users.xml&quot;&gt;&lt;/a&gt;tomcat-users.xml&lt;/h3
      
    
    </summary>
    
      <category term="Learn" scheme="http://zhizhi.tangliangdong.me/categories/Learn/"/>
    
    
      <category term="tomcat8" scheme="http://zhizhi.tangliangdong.me/tags/tomcat8/"/>
    
  </entry>
  
  <entry>
    <title>jenkins配置构建失败邮件通知</title>
    <link href="http://zhizhi.tangliangdong.me/2019/11/14/2019-11-14-jenkins-email-notification/"/>
    <id>http://zhizhi.tangliangdong.me/2019/11/14/2019-11-14-jenkins-email-notification/</id>
    <published>2019-11-14T06:42:26.000Z</published>
    <updated>2019-11-18T03:38:34.326Z</updated>
    
    <content type="html"><![CDATA[<p>jenkins自动化构建邮件通知开发者功能配置</p><a id="more"></a><h2 id="jenkins系统配置"><a href="#jenkins系统配置" class="headerlink" title="jenkins系统配置"></a>jenkins系统配置</h2><p>先进入 <code>Manage Jenkins --&gt; Configure System</code></p><p><img src="1.png" alt="Configure System"></p><h3 id="Jenkins-Location-gt-系统管理员邮件地址"><a href="#Jenkins-Location-gt-系统管理员邮件地址" class="headerlink" title="Jenkins Location  -&gt;  系统管理员邮件地址"></a>Jenkins Location  -&gt;  系统管理员邮件地址</h3><p>输入你的邮箱地址</p><p><img src="2.png" alt="系统管理员邮件地址"></p><hr><h3 id="Extended-E-mail-Notification-gt-Default-user-E-mail-suffix"><a href="#Extended-E-mail-Notification-gt-Default-user-E-mail-suffix" class="headerlink" title="Extended E-mail Notification -&gt;  Default user E-mail suffix"></a>Extended E-mail Notification -&gt;  Default user E-mail suffix</h3><p><img src="3.png" alt></p><hr><h3 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h3><p><img src="4.png" alt></p><ol><li>SMTP服务器地址需要去对应的邮箱中查看，并需同时开启邮箱的SMTP功能。见下方汇总</li><li>需开启SMTP认证，用户名就是邮箱号，密码需要去邮箱设置。</li><li>SMTP默认是465，也可以在邮箱设置SMTP服务的地方查看。</li><li>最后，可以通过发送测试邮件测试配置，如果出现如图中 <code>Email was successfully sent</code> 信息，则说明邮件通知功能配置成功。</li></ol><p>1、例如网易邮箱配置： <code>设置 -&gt; POP3/SMTP/IMAP</code></p><p><img src="5.png" alt="网易邮箱SMTP服务"></p><p>腾讯企业邮开启<strong>SMTP服务</strong>并查看SMTP服务器地址：<code>设置 -&gt; 收发信设置</code></p><p><img src="6.png" alt="腾讯企业邮SMTP服务"></p><p>可以看到邮箱SMTP服务的端口为465</p><p>2、网易邮箱设置客户端授权密码</p><p><img src="7.png" alt="网易邮箱客户端授权码"></p><p>开启客户端授权码并进行设置就行了，如果之前已经设置过，直接输入到jenkins中就行了。</p><p><strong>腾讯企业邮客户端授权密码</strong></p><p><img src="11.png" alt="腾讯企业邮客户端授权码"></p><p>开启安全登陆 -&gt; 生成客户端专用密码（需保存下来，只显示一次）</p><hr><h2 id="针对项目中进行邮件通知配置"><a href="#针对项目中进行邮件通知配置" class="headerlink" title="针对项目中进行邮件通知配置"></a>针对项目中进行邮件通知配置</h2><p>先新建一个项目</p><p><img src="8.png" alt></p><p>在配置项目信息的地方，其他都不用管，拉到页面的最底下，找到 <strong>构建后操作</strong>，点击 <strong>增加构建后的操作步骤</strong>，选择 <code>E-mail Notification</code></p><p><img src="9.png" alt></p><p>输入需要接受通知的邮箱账号</p><p><img src="10.png" alt></p><h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><p>点击 <code>Build now</code>，构建项目</p><p><img src="12.png" alt></p><p>当项目构建失败时，就会发送邮件到项目配置的邮箱地址。</p><p><img src="13.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jenkins自动化构建邮件通知开发者功能配置&lt;/p&gt;
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="jenkins" scheme="http://zhizhi.tangliangdong.me/tags/jenkins/"/>
    
      <category term="email" scheme="http://zhizhi.tangliangdong.me/tags/email/"/>
    
  </entry>
  
  <entry>
    <title>jenkins配置webhook自动拉取github打包</title>
    <link href="http://zhizhi.tangliangdong.me/2019/11/14/2019-11-14-jenkins-webhook/"/>
    <id>http://zhizhi.tangliangdong.me/2019/11/14/2019-11-14-jenkins-webhook/</id>
    <published>2019-11-14T06:25:24.000Z</published>
    <updated>2019-11-18T03:38:34.378Z</updated>
    
    <content type="html"><![CDATA[<p>当 <em>github</em> 上传代码后，主动通知 <strong>jenkins</strong> 去拉取代码，自动化构建项目。</p><a id="more"></a><h2 id="Github获取-Personal-access-tokens"><a href="#Github获取-Personal-access-tokens" class="headerlink" title="Github获取 Personal access tokens"></a>Github获取 Personal access tokens</h2><p><code>登陆github -&gt; settings -&gt; Developer settings -&gt; Personal access tokens</code></p><p><img src="20.png" alt="获取Personal access tokens`"></p><p>需要选上图中的两个复选框，这样Jenkins才能配置<code>github服务器</code></p><p><img src="21.png" alt></p><p>确认后生成的 token要保存起来，这个只会显示一次。</p><p>然后我们就可以去配置Jenkins的<code>github服务器</code>。</p><h2 id="jenkins-配置-Configure-System"><a href="#jenkins-配置-Configure-System" class="headerlink" title="jenkins 配置 Configure System"></a>jenkins 配置 Configure System</h2><p><img src="22.png" alt="Github服务器配置"></p><p>添加凭据</p><p><img src="23.png" alt></p><p>类型需要选择<code>Secret Text</code>，这里出现的 <strong>Secret</strong> 就是我们之前去github生成的 <code>Personal access tokens</code>，再写个描述，确认就ok了。</p><p>点击连接测试后，如果下方显示的是<code>Credentials verified for user tangliangdong, rate limit: 4994</code>表明连接成功了。</p><h2 id="配置Maven项目"><a href="#配置Maven项目" class="headerlink" title="配置Maven项目"></a>配置Maven项目</h2><p>因为项目使用<code>pom.xml</code>文件构建的，我们就直接创建一个maven项目，选择 <code>构建一个maven项目</code> </p><p><img src="1.png" alt="my_second_github_job"></p><p>如果没有这个选项，则需要去<code>jenkins插件管理</code>中去安装一个 <code>Maven Integration插件</code>，然后重启jenkins就能使用了。</p><p><img src="2.png" alt=" 安装Maven Integration插件 "></p><p>接下来就要带着我们的 <strong>github仓库地址</strong> 到处粘贴了，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/tangliangdong/user-dev.git</span><br></pre></td></tr></table></figure><p><img src="3.png" alt="GitHub项目Url"></p><p><img src="4.png" alt="源码管理"></p><p> Credentials 需要github登陆的凭据。</p><p>源码库浏览器必须指定，输入的url还是github仓库地址，不带 <code>.git</code></p><p><img src="5.png" alt="添加凭据"></p><p><img src="6.png" alt="构建触发器 webhook"></p><p>当我们向<code>user-dev</code> 仓库提交代码后，github会主动通知我们的jenkins去拉取代码，进行一次构建。</p><p>在 <strong>构建环境</strong> 中 <code>Use secret text(s) or file(s)</code>，选择的就是之前添加过的 <code>Github access token</code></p><p><img src="7.png" alt=" Use secret text(s) or file(s) "></p><p>构建前执行 maven的命令 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean package -P <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><img src="8.png" alt=" Pre Steps "></p><p>构建失败后邮件通知。</p><p><img src="9.png" alt=" E-mail Notification "></p><h2 id="配置-Github-Webhook"><a href="#配置-Github-Webhook" class="headerlink" title="配置 Github Webhook"></a>配置 Github Webhook</h2><p><code>进入 Github项目Settings -&gt; Webhook</code>，添加项目的 Webhook</p><p><img src="10.png" alt></p><p>添加Jenkins的Webhook地址，因为这个是Github接收到提交的请求后，去通知Jenkins网站来拉取代码，因此这里的配置Jenkins代码肯定是要在公网能访问到的，但我当时是在我的树莓派上配置的，因此需要用诸如<strong>花生壳</strong>这类的内网映射工具来将本地的IP端口映射到公网上，才能让github访问到。webhook地址如下，直接在访问jenkins访问地址后面加上<code>/github-webhook</code>就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://2m7t216256.wicp.vip:12006/github-webhook/</span><br></pre></td></tr></table></figure><p><img src="11.png" alt></p><p>绿色表示可以使用了，</p><p><img src="12.png" alt></p><p>我们向 <code>user-dev</code> 提交代码，就能看到Jenkins在自动拉取代码进行构建了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当 &lt;em&gt;github&lt;/em&gt; 上传代码后，主动通知 &lt;strong&gt;jenkins&lt;/strong&gt; 去拉取代码，自动化构建项目。&lt;/p&gt;
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="jenkins" scheme="http://zhizhi.tangliangdong.me/tags/jenkins/"/>
    
      <category term="webhook" scheme="http://zhizhi.tangliangdong.me/tags/webhook/"/>
    
  </entry>
  
  <entry>
    <title>树莓派外接2560x1440 2k屏设置</title>
    <link href="http://zhizhi.tangliangdong.me/2019/11/14/2019-11-14-Raspbian-2k-resolution/"/>
    <id>http://zhizhi.tangliangdong.me/2019/11/14/2019-11-14-Raspbian-2k-resolution/</id>
    <published>2019-11-14T01:55:51.000Z</published>
    <updated>2019-11-18T03:38:34.320Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.raspberrypi.org/documentation/configuration/config-txt/" target="_blank" rel="noopener">官网的Raspbian系统 config.txt 配置详解</a></p></blockquote><p>烧录完系统，将tf卡插入到树莓派中，再启动设备。接入2k屏幕，显示的一直是黑屏，需要将系统的配置文件修改下。</p><h3 id="外接2k显示器设置"><a href="#外接2k显示器设置" class="headerlink" title="外接2k显示器设置"></a>外接2k显示器设置</h3><a id="more"></a><p><a href="https://www.raspberrypi.org/documentation/configuration/config-txt/video.md" target="_blank" rel="noopener">Raspbian 显示模式设置</a></p><p><img src="2.png" alt="video config"></p><p>在 <code>/boot/config.txt</code> 中添加2k分辨率的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">start_x=0</span><br><span class="line">hdmi_drive=1</span><br><span class="line">hdmi_group=2</span><br><span class="line">hdmi_mode=87</span><br><span class="line">hdmi_cvt=2560 1440 48</span><br><span class="line"></span><br><span class="line">// 下面可加不加</span><br><span class="line">framebuffer_width=2560</span><br><span class="line">framebuffer_height=1440</span><br><span class="line">max_framebuffer_width=2560</span><br><span class="line">max_framebuffer_height=1440</span><br></pre></td></tr></table></figure><blockquote><p> 最重要的就是hdmi_cvt的设置，其中48代表刷新频率，1440×2560的屏幕只支持48hz的如果设置其他的就不行 </p></blockquote><p><img src="1.png" alt="hdmi_cvt配置"></p><p>将卡插回到树莓派中，然后再启动树莓派，就可以显示在2k屏幕上了。</p><h3 id="树莓派开启ssh"><a href="#树莓派开启ssh" class="headerlink" title="树莓派开启ssh"></a>树莓派开启ssh</h3><p>在电脑上读取装有 <em>Raspbian</em> 系统的 <strong>tf</strong>卡后，在root盘目录下新建 <code>ssh</code>文件（<strong>不带后缀名</strong>）。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/configuration/config-txt/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网的Raspbian系统 config.txt 配置详解&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;烧录完系统，将tf卡插入到树莓派中，再启动设备。接入2k屏幕，显示的一直是黑屏，需要将系统的配置文件修改下。&lt;/p&gt;
&lt;h3 id=&quot;外接2k显示器设置&quot;&gt;&lt;a href=&quot;#外接2k显示器设置&quot; class=&quot;headerlink&quot; title=&quot;外接2k显示器设置&quot;&gt;&lt;/a&gt;外接2k显示器设置&lt;/h3&gt;
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="Raspbian" scheme="http://zhizhi.tangliangdong.me/tags/Raspbian/"/>
    
      <category term="ssh" scheme="http://zhizhi.tangliangdong.me/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>java8函数式编程</title>
    <link href="http://zhizhi.tangliangdong.me/2019/11/06/2019-11-6-jdk8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://zhizhi.tangliangdong.me/2019/11/06/2019-11-6-jdk8函数式编程/</id>
    <published>2019-11-06T02:12:06.000Z</published>
    <updated>2019-11-18T03:38:34.408Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> JDK中已有的一些接口本身就是函数式接口，如<code>Runnable</code>。 JDK 8中又增加了<code>java.util.function</code>包， 提供了常用的函数式接口。 </p></blockquote><a id="more"></a><h2 id="JDK-8之前已有的函数式接口"><a href="#JDK-8之前已有的函数式接口" class="headerlink" title="JDK 8之前已有的函数式接口"></a>JDK 8之前已有的函数式接口</h2><ul><li>java.lang.Runnable</li><li>java.util.concurrent.Callable</li><li>java.security.PrivilegedAction</li><li>java.util.Comparator</li><li>java.io.FileFilter</li><li>java.nio.file.PathMatcher</li><li>java.lang.reflect.InvocationHandler</li><li>java.beans.PropertyChangeListener</li><li>java.awt.event.ActionListener</li><li>javax.swing.event.ChangeListener</li></ul><h2 id="新定义的函数式接口"><a href="#新定义的函数式接口" class="headerlink" title="新定义的函数式接口"></a>新定义的函数式接口</h2><p> <code>java.util.function</code>中定义了几组类型的函数式接口以及针对基本数据类型的子接口。 </p><ul><li>Predicate – 传入一个参数，返回一个bool结果， 方法为<code>boolean test(T t)</code></li><li>Consumer – 传入一个参数，无返回值，纯消费。 方法为<code>void accept(T t)</code></li><li>Function – 传入一个参数，返回一个结果，方法为<code>R apply(T t)</code></li><li>Supplier – 无参数传入，返回一个结果，方法为<code>T get()</code></li><li>UnaryOperator – 一元操作符， 继承Function,传入参数的类型和返回类型相同。</li><li>BinaryOperator – 二元操作符， 传入的两个参数的类型和返回类型相同， 继承BiFunction</li></ul><hr><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只需注明传入参数的类型，返回值为Bool</span></span><br><span class="line">Predicate&lt;Integer&gt; fun1 = (x) -&gt; x &gt; <span class="number">1</span>; </span><br><span class="line">Boolean bool = fun1.test(<span class="number">2</span>);  <span class="comment">// bool = true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用大括号来包住一个代码块，不过需要使用return来确定最后的返回值</span></span><br><span class="line">Predicate&lt;Integer&gt; fun11 = (x) -&gt; &#123;</span><br><span class="line">    Integer sum = x * <span class="number">1000</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> sum &gt; <span class="number">2000</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Boolean bool1 = fun11.test(<span class="number">2</span>); <span class="comment">// bool1 = true</span></span><br></pre></td></tr></table></figure><p>Predicate 扩展的函数列表</p><table><thead><tr><th style="text-align:left">interface</th><th style="text-align:left">functional method</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Predicate<t></t></td><td style="text-align:left">boolean test(T t)</td><td style="text-align:left">接收一个泛型参数</td></tr><tr><td style="text-align:left">IntPredicate</td><td style="text-align:left">boolean test(int value)</td><td style="text-align:left">以下三个接口，接收指定类型的参数</td></tr><tr><td style="text-align:left">LongPredicate</td><td style="text-align:left">boolean test(long value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoublePredicate</td><td style="text-align:left">boolean test(double value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">BiPredicate&lt;T,U&gt;</td><td style="text-align:left">boolean test(T t, U u)</td><td style="text-align:left">接收两个泛型参数，分别为T，U</td></tr></tbody></table><hr><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需注明传入参数的类型，无返回值</span></span><br><span class="line">Consumer&lt;String&gt; fun2 = (x) -&gt; System.out.println(x);</span><br><span class="line">fun2.accept(<span class="string">"hello world"</span>); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>Consumer 扩展的函数列表</p><h4 id="接收一个参数"><a href="#接收一个参数" class="headerlink" title="接收一个参数"></a>接收一个参数</h4><table><thead><tr><th style="text-align:left"><strong>interface</strong></th><th style="text-align:left"><strong>functional method</strong></th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Consumer<t></t></td><td style="text-align:left">void accept(T t)</td><td style="text-align:left">接收一个泛型参数，无返回值</td></tr><tr><td style="text-align:left">IntConsumer</td><td style="text-align:left">void accept(int value)</td><td style="text-align:left">以下三个类，接收一个指定类型的参数</td></tr><tr><td style="text-align:left">LongConsumer</td><td style="text-align:left">void accept(long value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoubleConsumer</td><td style="text-align:left">void accept(double value)</td></tr></tbody></table><h4 id="接收两个参数"><a href="#接收两个参数" class="headerlink" title="接收两个参数"></a>接收两个参数</h4><table><thead><tr><th style="text-align:left">interface</th><th style="text-align:left">functional method</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">BiConsumer&lt;T, U&gt;</td><td style="text-align:left">void accept(T t, U u)</td><td style="text-align:left">接收两个泛型参数</td></tr><tr><td style="text-align:left">ObjIntConsumer<t></t></td><td style="text-align:left">void accept(T t, int value)</td><td style="text-align:left">以下三个类，接收一个泛型参数，一个指定类型的参数</td></tr><tr><td style="text-align:left">ObjLongConsumer<t></t></td><td style="text-align:left">void accept(T t, long value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ObjDoubleConsumer<t></t></td><td style="text-align:left">void accept(T t, double value)</td></tr></tbody></table><hr><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; fun3 = (x) -&gt; Integer.valueOf(x);</span><br><span class="line">Integer num = fun3.apply(<span class="string">"1024"</span>); <span class="comment">// num = 1024</span></span><br></pre></td></tr></table></figure><h4 id="接收单个参数"><a href="#接收单个参数" class="headerlink" title="接收单个参数"></a>接收单个参数</h4><table><thead><tr><th style="text-align:left">Interface</th><th style="text-align:left">functional method</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Function&lt;T,R&gt;</td><td style="text-align:left">R apply(T t)</td><td style="text-align:left">接收参数类型为T，返回参数类型为R</td></tr><tr><td style="text-align:left">IntFunction<r></r></td><td style="text-align:left">R apply(int value)</td><td style="text-align:left">以下三个接口，指定了接收参数类型，返回参数类型为泛型R</td></tr><tr><td style="text-align:left">LongFunction<r></r></td><td style="text-align:left">R apply(long value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Double<r></r></td><td style="text-align:left">R apply(double value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ToIntFunction<t></t></td><td style="text-align:left">int applyAsInt(T value)</td><td style="text-align:left">以下三个接口，指定了返回参数类型，接收参数类型为泛型T</td></tr><tr><td style="text-align:left">ToLongFunction<t></t></td><td style="text-align:left">long applyAsLong(T value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ToDoubleFunction<t></t></td><td style="text-align:left">double applyAsDouble(T value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">IntToLongFunction</td><td style="text-align:left">long applyAsLong(int value)</td><td style="text-align:left">以下六个接口，既指定了接收参数类型，也指定了返回参数类型</td></tr><tr><td style="text-align:left">IntToDoubleFunction</td><td style="text-align:left">double applyAsLong(int value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">LongToIntFunction</td><td style="text-align:left">int applyAsLong(long value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">LongToDoubleFunction</td><td style="text-align:left">double applyAsLong(long value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoubleToIntFunction</td><td style="text-align:left">int applyAsLong(double value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoubleToLongFunction</td><td style="text-align:left">long applyAsLong(double value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">UnaryOperator<t></t></td><td style="text-align:left">T apply(T t)</td><td style="text-align:left">特殊的Function，接收参数类型和返回参数类型一样</td></tr><tr><td style="text-align:left">IntUnaryOperator</td><td style="text-align:left">int applyAsInt(int left, int right)</td><td style="text-align:left">以下三个接口，制定了接收参数和返回参数类型，并且都一样</td></tr><tr><td style="text-align:left">LongUnaryOperator</td><td style="text-align:left">long applyAsInt(long left, long right)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoubleUnaryOperator</td><td style="text-align:left">double applyAsInt(double left, double right)</td></tr></tbody></table><h3 id="接收两个参数-1"><a href="#接收两个参数-1" class="headerlink" title="接收两个参数"></a>接收两个参数</h3><table><thead><tr><th style="text-align:left">interface</th><th style="text-align:left">functional method</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">BiFunction&lt;T, U, R&gt;</td><td style="text-align:left">R apply(T t, U u)</td><td style="text-align:left">接收两个参数的Function</td></tr><tr><td style="text-align:left">ToIntBiFunction&lt;T, U&gt;</td><td style="text-align:left">int applyAsInt(T t, U u)</td><td style="text-align:left">以下三个接口，指定了返回参数类型，接收参数类型分别为泛型T, U</td></tr><tr><td style="text-align:left">ToLongBiFunction&lt;T, U&gt;</td><td style="text-align:left">long applyAsLong(T t, U u)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ToDoubleBiFunction&lt;T,U&gt;</td><td style="text-align:left">double appleyAsDouble(T t, U u)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">BinaryOperator<t></t></td><td style="text-align:left">T apply(T t, T u)</td><td style="text-align:left">特殊的BiFunction, 接收参数和返回参数类型一样</td></tr><tr><td style="text-align:left">IntBinaryOperator</td><td style="text-align:left">int applyAsInt(int left, int right)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">LongBinaryOperator</td><td style="text-align:left">long applyAsInt(long left, long right)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoubleBinaryOperator</td><td style="text-align:left">double applyAsInt(double left, double right)</td></tr></tbody></table><hr><h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参数传入，需注明返回的参数类型</span></span><br><span class="line">Supplier&lt;String&gt; fun4 = () -&gt; <span class="string">"hello world"</span>;</span><br><span class="line">String word = fun4.get(); <span class="comment">// word = "hello world"</span></span><br></pre></td></tr></table></figure><p>Supplier  扩展函数列表</p><table><thead><tr><th style="text-align:left">interface</th><th style="text-align:left">functional method</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Supplier<t></t></td><td style="text-align:left">T get()</td><td style="text-align:left">返回类型为泛型T</td></tr><tr><td style="text-align:left">BooleanSupplier</td><td style="text-align:left">boolean getAsBoolean()</td><td style="text-align:left">以下三个接口，返回指定类型</td></tr><tr><td style="text-align:left">IntSupplier</td><td style="text-align:left">int getAsInt()</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">LongSupplier</td><td style="text-align:left">long getAsLong()</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoubleSupplier</td><td style="text-align:left">double getAsDouble()</td></tr></tbody></table><hr><h3 id="UnaryOperator"><a href="#UnaryOperator" class="headerlink" title="UnaryOperator"></a>UnaryOperator</h3><p>一元操作符， 继承Function,传入参数的类型和返回类型相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注明参数的类型</span></span><br><span class="line">UnaryOperator&lt;String&gt; fun5 = (x) -&gt; <span class="string">"你好，欢迎"</span> + x;</span><br><span class="line">String word = fun5.apply(<span class="string">"张三"</span>); <span class="comment">// word = "你好，欢迎张三"</span></span><br></pre></td></tr></table></figure><hr><h3 id="BinaryOperator"><a href="#BinaryOperator" class="headerlink" title="BinaryOperator"></a>BinaryOperator</h3><p> 二元操作符， 传入的两个参数的类型和返回类型相同， 继承 BiFunction </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为传入的两个参数和返回类型均一致，则只需注明一个类型就行了</span></span><br><span class="line">BinaryOperator&lt;String&gt; fun6 = (x, y) -&gt; x + y;</span><br><span class="line">String word = fun6.apply(<span class="string">"hello "</span>, <span class="string">"java"</span>); <span class="comment">// word = "hello java"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; JDK中已有的一些接口本身就是函数式接口，如&lt;code&gt;Runnable&lt;/code&gt;。 JDK 8中又增加了&lt;code&gt;java.util.function&lt;/code&gt;包， 提供了常用的函数式接口。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="jdk8" scheme="http://zhizhi.tangliangdong.me/tags/jdk8/"/>
    
  </entry>
  
  <entry>
    <title>IDEA的查询引用、调用关系图的功能</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/30/2019-10-30-IDEA%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%BC%95%E7%94%A8%E3%80%81%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB%E5%9B%BE%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/30/2019-10-30-IDEA的查询引用、调用关系图的功能/</id>
    <published>2019-10-30T06:01:10.000Z</published>
    <updated>2019-11-18T03:38:34.282Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="查看Java方法的调用树"><a href="#查看Java方法的调用树" class="headerlink" title="查看Java方法的调用树"></a>查看Java方法的调用树</h2><p> IntelliJ IDEA中可以在主菜单中选择Navigate | Call Hierarchy命令查看一个Java方法调用树（caller和callee两个方向） </p><p><img src="1.png" alt></p><p><img src="2.png" alt></p><p>上图中左上角的两个按钮是<strong>调用</strong>和<strong>被调用</strong>关系的显示。 </p><h2 id="查看表达式、变量和方法参数的传递关系树"><a href="#查看表达式、变量和方法参数的传递关系树" class="headerlink" title="查看表达式、变量和方法参数的传递关系树"></a>查看表达式、变量和方法参数的传递关系树</h2><p>IntelliJ IDEA中可以在主菜单中选择 <strong>Analyze | Data flow from / to Here</strong> 两个命令查看表达式、变量和方法参数的传递关系树。</p><h3 id="Analyze-Data-Flow-from-Here"><a href="#Analyze-Data-Flow-from-Here" class="headerlink" title="Analyze | Data Flow from Here"></a>Analyze | Data Flow from Here</h3><p><img src="3.png" alt></p><p><img src="4.png" alt></p><h3 id="Analyze-Data-Flow-to-Here"><a href="#Analyze-Data-Flow-to-Here" class="headerlink" title="Analyze | Data Flow to Here"></a>Analyze | Data Flow to Here</h3><p><img src="5.png" alt></p><p>查询调用目标方法的地方可以用 <em>Analyze Data flow from Here</em></p><h2 id="查看Java类、方法或变量的直接使用情况"><a href="#查看Java类、方法或变量的直接使用情况" class="headerlink" title="查看Java类、方法或变量的直接使用情况"></a>查看Java类、方法或变量的直接使用情况</h2><p>IntelliJ IDEA的 <em>Find Usage</em> 可以查看一个Java类、方法或变量的直接使用情况。 </p><p>或者直接点击目标对象，使用键盘快捷键：<em>Ctrl+G</em></p><p><img src="6.png" alt></p><h2 id="查看类关系图"><a href="#查看类关系图" class="headerlink" title="查看类关系图"></a>查看类关系图</h2><p> 在包或类上右键点击Diagram或者用快捷键Ctrl+Alt+U。 </p><p><img src="7.png" alt></p><p><img src="8.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;查看Java方法的调用树&quot;&gt;&lt;a href=&quot;#查看Java方法的调用树&quot; class=&quot;headerlink&quot; title=&quot;查看Java方法的调用树&quot;&gt;&lt;/a&gt;查看Java方法的调用树&lt;/h2&gt;&lt;p&gt; IntelliJ ID
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="IDEA" scheme="http://zhizhi.tangliangdong.me/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>python3 使用xpath</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/30/2019-10-30-python-xpath/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/30/2019-10-30-python-xpath/</id>
    <published>2019-10-30T01:19:29.000Z</published>
    <updated>2019-11-18T03:38:34.319Z</updated>
    
    <content type="html"><![CDATA[<p>python爬网页数据可以用xpath 进行标签定位</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://book.douban.com/'</span> <span class="comment">#需要爬数据的网址</span></span><br><span class="line">page = requests.Session().get(url)</span><br><span class="line">tree = html.fromstring(page.text)</span><br></pre></td></tr></table></figure><blockquote><p>使用 lxml 中的 xpath 高效提取文本与标签属性值</p></blockquote><p>先安装 lxml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><h2 id="定位html元素"><a href="#定位html元素" class="headerlink" title="定位html元素"></a>定位html元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">divs1 = tree.xpath(<span class="string">'//div'</span>) <span class="comment">#查找所有div标签</span></span><br><span class="line"></span><br><span class="line">divs2 = tree.xpath(<span class="string">'//div[@id="header"]'</span>) <span class="comment"># 查找id为header的标签</span></span><br><span class="line"></span><br><span class="line">divs3 = tree.xpath(<span class="string">'//div[@class="foot"]'</span>) <span class="comment"># 获取class为foot的div标签</span></span><br><span class="line"></span><br><span class="line">divs4 = tree.xpath(<span class="string">'//div[@class="foot"]//a'</span>) <span class="comment"># 获取class为foot下的a标签</span></span><br></pre></td></tr></table></figure><blockquote><p>属性名称后面的一定要加引号 <code>@class=&quot;foot&quot;</code></p></blockquote><h3 id="定位多属性标签"><a href="#定位多属性标签" class="headerlink" title="定位多属性标签"></a>定位多属性标签</h3><p>原贴链接：<a href="http://stackoverflow.com/questions/1604471/how-can-i-find-an-element-by-css-class-with-xpath" target="_blank" rel="noopener"><a href="https://stackoverflow.com/questions/1604471/how-can-i-find-an-element-by-css-class-with-xpath" target="_blank" rel="noopener">How can I find an element by CSS class with XPath?</a></a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//*[contains(@class, 'Test')]</span><br></pre></td></tr></table></figure><p> 但是这个表达式会把类似 class=”Testvalue” 或者 class=”newTest”也匹配出来。 可以使用如下版本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//*[contains(concat(' ', @class, ' '), ' Test ')]</span><br></pre></td></tr></table></figure><p> 如果你希望匹配的结果尽量精确，你还可以使用 normalize-space 功能来清除class名称周围的空格 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//*[contains(concat(' ', normalize-space(@class), ' '), ' Test ')]</span><br></pre></td></tr></table></figure><p>需要定位具有 <em>menu</em> 属性的<code>ul</code>标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"banner menu"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div5 = tree.xpath(<span class="string">'//div[@class="header"]//ul[contains(@class, "menu")]'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>建议把class换成更好识别的标识执行效率会更高 </p></blockquote><h2 id="取元素属性或文本"><a href="#取元素属性或文本" class="headerlink" title="取元素属性或文本"></a>取元素属性或文本</h2><p>获取 <em>div</em> 标签下的 <em>span</em> 标签中的文本信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content = tree.xpath(<span class="string">'//div//span/text()'</span>)</span><br></pre></td></tr></table></figure><p>获取标签中的属性信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">href = tree.xpath(<span class="string">'//div//a/@href'</span>) <span class="comment">#获取a标签的href图片地址</span></span><br><span class="line"></span><br><span class="line">src = tree.xpath(<span class="string">'//div//a/@alt'</span>) <span class="comment">#获取a标签的alt值</span></span><br></pre></td></tr></table></figure><p>如果获取的是标签，则返回的对象可以继续使用xpath方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">result = tree.xpath(<span class="string">'//ul[contains(@class, "pic-list2")]//li//a'</span>)  <span class="comment"># 获取需要的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">    src = item.xpath(<span class="string">'@src'</span>)[<span class="number">0</span>] <span class="comment"># 获取的是list</span></span><br><span class="line">    alt = item.xpath(<span class="string">'@alt'</span>)[<span class="number">0</span>] <span class="comment"># 获取的是list</span></span><br><span class="line">    print(src, alt)</span><br></pre></td></tr></table></figure><hr><h2 id="爬取豆瓣读书的图片"><a href="#爬取豆瓣读书的图片" class="headerlink" title="爬取豆瓣读书的图片"></a>爬取豆瓣读书的图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 豆瓣读书</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">captureDouBan</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://book.douban.com/'</span> <span class="comment">#需要爬数据的网址</span></span><br><span class="line">    page = requests.Session().get(url)</span><br><span class="line">    tree = html.fromstring(page.text)</span><br><span class="line">    result = tree.xpath(<span class="string">'//div[@class="cover"]//a//img'</span>) <span class="comment">#获取需要的数据</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">        src = item.xpath(<span class="string">'@src'</span>)[<span class="number">0</span>]</span><br><span class="line">        alt = item.xpath(<span class="string">'@alt'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(src, alt)</span><br><span class="line">        request.urlretrieve(src, <span class="string">"E://xiaotang//python3//img//"</span>+alt+<span class="string">".jpg"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python爬网页数据可以用xpath 进行标签定位&lt;/p&gt;
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="python3" scheme="http://zhizhi.tangliangdong.me/tags/python3/"/>
    
      <category term="xpath" scheme="http://zhizhi.tangliangdong.me/tags/xpath/"/>
    
  </entry>
  
  <entry>
    <title>2019-10-29-美国的宪政历程</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/29/2019-10-29-%E7%BE%8E%E5%9B%BD%E7%9A%84%E5%AE%AA%E6%94%BF%E5%8E%86%E7%A8%8B/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/29/2019-10-29-美国的宪政历程/</id>
    <published>2019-10-29T14:27:40.000Z</published>
    <updated>2019-11-18T03:38:34.282Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="阅读" scheme="http://zhizhi.tangliangdong.me/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="美国" scheme="http://zhizhi.tangliangdong.me/tags/%E7%BE%8E%E5%9B%BD/"/>
    
      <category term="法律" scheme="http://zhizhi.tangliangdong.me/tags/%E6%B3%95%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>python3 的一些实用方法</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/29/2019-10-29-python3-%E6%96%B9%E6%B3%95/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/29/2019-10-29-python3-方法/</id>
    <published>2019-10-29T09:33:07.000Z</published>
    <updated>2019-11-18T03:38:34.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python实现list去重"><a href="#python实现list去重" class="headerlink" title="python实现list去重"></a>python实现list去重</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先将列表转化为set，再转化为list就可以实现去重操作</span></span><br><span class="line">list(set(list))  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 用sort即可实现排序</span></span><br><span class="line">list.sort()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quote(item.xpath(<span class="string">'@src'</span>)[<span class="number">0</span>], safe=string.printable)</span><br></pre></td></tr></table></figure><h3 id="python转换编码"><a href="#python转换编码" class="headerlink" title="python转换编码"></a>python转换编码</h3><blockquote><p> 按照标准， URL 只允许一部分 ASCII 字符（数字字母和部分符号），其他的字符（如汉字）是不符合 URL 标准的。<br>所以 URL 中使用其他字符就需要进行 URL 编码。 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># safe表示可以忽略的字符</span></span><br><span class="line"><span class="comment"># string.printable 表示可打印的字符，见下方 string模块</span></span><br><span class="line">quote(<span class="string">'http://www.obzhi.com/wp-content/themes/Loostrive/timthumb.php?src=http://www.obzhi.com/wp-content/uploads/2019/10/eveoline.jpg&amp;h=200&amp;w=300&amp;zc=1'</span>), safe=string.printable)</span><br></pre></td></tr></table></figure><h4 id="String模块中的常量："><a href="#String模块中的常量：" class="headerlink" title="String模块中的常量："></a>String模块中的常量：</h4><blockquote><p>string.digits：数字0~9</p><p>string.letters：所有字母（大小写）</p><p>string.lowercase：所有小写字母</p><p>string.printable：可打印字符的字符串</p><p>string.punctuation：所有标点</p><p>string.uppercase：所有大写字母</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.digits  </span><br><span class="line"><span class="string">'0123456789'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.letters  </span><br><span class="line"><span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_lowercase  </span><br><span class="line"><span class="string">'abcdefghijklmnopqrstuvwxyz'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.printable  </span><br><span class="line"><span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ \t\n\r\x0b\x0c'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.punctuation  </span><br><span class="line"><span class="string">'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_uppercase  </span><br><span class="line"><span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br></pre></td></tr></table></figure><h3 id="python-网页获取的中文乱码"><a href="#python-网页获取的中文乱码" class="headerlink" title="python 网页获取的中文乱码"></a>python 网页获取的中文乱码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取天气的json</span></span><br><span class="line">r = requests.get(<span class="string">'http://www.weather.com.cn/data/sk/101210101.html'</span>)</span><br><span class="line">print(r.content) </span><br><span class="line"><span class="comment">#&#123;'weatherinfo': &#123;'city': 'æ\x9d\xadå·\x9e', 'cityid': '101210101', 'temp': '24.8', 'WD': 'ä¸\x9cå\x8c\x97é£\x8e', 'WS': 'å°\x8fäº\x8e3çº§', 'SD': '81%', 'AP': '1000.3hPa', 'njd': 'æ\x9a\x82æ\x97\xa0å®\x9eå\x86µ', 'WSE': '&lt;3', 'time': '17:50', 'sm': '2.1', 'isRadar': '1', 'Radar': 'JC_RADAR_AZ9571_JB'&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将编码格式改成 utf-8</span></span><br><span class="line">r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(r.json())</span><br><span class="line"><span class="comment">#&#123;'weatherinfo': &#123;'city': '杭州', 'cityid': '101210101', 'temp': '24.8', 'WD': '东北风', 'WS': '小于3级', 'SD': '81%', 'AP': '1000.3hPa', 'njd': '暂无实况', 'WSE': '&lt;3', 'time': '17:50', 'sm': '2.1', 'isRadar': '1', 'Radar': 'JC_RADAR_AZ9571_JB'&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="python-定时器"><a href="#python-定时器" class="headerlink" title="python 定时器"></a>python 定时器</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python实现list去重&quot;&gt;&lt;a href=&quot;#python实现list去重&quot; class=&quot;headerlink&quot; title=&quot;python实现list去重&quot;&gt;&lt;/a&gt;python实现list去重&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="python3" scheme="http://zhizhi.tangliangdong.me/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>记录《电车难题》</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/27/2019-10-27-%E7%94%B5%E8%BD%A6%E9%9A%BE%E9%A2%98/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/27/2019-10-27-电车难题/</id>
    <published>2019-10-27T06:46:33.000Z</published>
    <updated>2019-11-18T03:38:34.281Z</updated>
    
    <content type="html"><![CDATA[<p>杰里米·边沁的“功利主义”：一个行为的正确与否，完全取决于其造成的后果；而我们的行为准则，应当是以“最多数人之最大幸福”为目的。——判断好坏的标准：是否造成幸福的最大化。</p><a id="more"></a><h1 id="全民民意法庭"><a href="#全民民意法庭" class="headerlink" title="全民民意法庭"></a>全民民意法庭</h1><h2 id="检方"><a href="#检方" class="headerlink" title="检方"></a>检方</h2><p>案例一：琼斯女士扳动道岔，将一辆失控的电车引入岔道，挽救了5人的性命，却也因此造成事发当时站在岔道上的法利先生的身亡。</p><p>案例二：创伤外科医生罗德尼·梅普斯接到通知赶往手术室，共有六名伤员被送往该医院，其中两名伤员需要肾移植；另一人需要心脏移植；还有一人需要肝移植；第五人需要肺移植。当梅普斯正为器官来源发愁时，发现第六位伤员没有明显的伤情，梅普斯随即将这名年轻人送入手术室，摘取了他所有的器官，并移植给上述五名病人，因此挽救了他们的生命。他在法庭上说了一句著名的话：“我觉得一名病人死亡，比五名病人死亡的结果要好。”  ——陪审团一致判定梅普斯犯有一级谋杀罪。</p><p>当时检方在审理琼斯女士扳动道闸案时，将此案与梅普斯摘取器官案做类比，请求判处琼斯女士犯有杀人罪。</p><hr><h2 id="辩方："><a href="#辩方：" class="headerlink" title="辩方："></a>辩方：</h2><p>案例三：一名叫克拉拉·墨菲的女子，在乘坐电车时，司机突然昏迷，克拉拉为了挽救前方轨道上5个人的性命而将电车转至侧线，但却撞死了另一个人。—— 多达89%的陪审员认为，卡拉拉将电车转至侧线的行为是可取的。</p><p>案例四： 弗兰克·特里梅因站在横跨电车轨道的人行天桥上。一辆失去控制的电车正沿着轨道，朝站在轨道上的五个人疾驰而去。当时只有一个轨道，没有侧线可供电车转向。弗兰克很快认定，只有在轨道上投以重物才能阻止电车。但是天桥上只有一名体型肥硕的胖子站在旁边。弗兰克发现，要么将这名男子推下桥，拯救那5人；要么任凭那5人被电车撞死。最终他选择了将那人推下桥。 —— 只有仅仅11%的陪审员认为弗兰克此举是可取的。</p><blockquote><p>为什么几乎所有人都认为，将电车转至侧线，撞死一人挽救五人可以接受。但几乎所有人都认为，将一个胖子推下桥挽救五人则不能接受。</p></blockquote><p>其中只有极少数人以道德原因作为决定的基础，只有极少数人在对克拉拉和弗兰克两案作出不同判决时，以道德原因作为决定的基础。只有少数人指出，他们认为两案确实存在差异，并因此按照不同的道德原因，作出了不同的判决。</p><h3 id="1、有些人指出，克拉拉“预见”到如果她扳动道岔，侧线上的那个人将会身亡；而弗兰克则对胖子的死存在主观的“故意”。换句话说，克拉拉并没有“利用”岔道上那个男人的死来挽救另五人，而弗兰克则确实如此利用了那个胖子。"><a href="#1、有些人指出，克拉拉“预见”到如果她扳动道岔，侧线上的那个人将会身亡；而弗兰克则对胖子的死存在主观的“故意”。换句话说，克拉拉并没有“利用”岔道上那个男人的死来挽救另五人，而弗兰克则确实如此利用了那个胖子。" class="headerlink" title="1、有些人指出，克拉拉“预见”到如果她扳动道岔，侧线上的那个人将会身亡；而弗兰克则对胖子的死存在主观的“故意”。换句话说，克拉拉并没有“利用”岔道上那个男人的死来挽救另五人，而弗兰克则确实如此利用了那个胖子。"></a>1、有些人指出，克拉拉“预见”到如果她扳动道岔，侧线上的那个人将会身亡；而弗兰克则对胖子的死存在主观的“故意”。换句话说，克拉拉并没有“利用”岔道上那个男人的死来挽救另五人，而弗兰克则确实如此利用了那个胖子。</h3><blockquote><p>这一区分即 <em>圣·托马斯</em>阿奎那提出的“双效原则”的一部分：一个本来符合伦理的行为，也许存在不良的副作用，但是绝不能以坏的手段来达成好的结果。</p></blockquote><h3 id="2、也有人将区分点放在了这样一个事实上：也即克拉拉的行为并非直接作用于死者，而弗兰克的行为则是直接的。（可以理解为，克拉拉并没有直接接触到岔道上的那个男人，而弗兰克的双手则确实接触到了那个胖子。）"><a href="#2、也有人将区分点放在了这样一个事实上：也即克拉拉的行为并非直接作用于死者，而弗兰克的行为则是直接的。（可以理解为，克拉拉并没有直接接触到岔道上的那个男人，而弗兰克的双手则确实接触到了那个胖子。）" class="headerlink" title="2、也有人将区分点放在了这样一个事实上：也即克拉拉的行为并非直接作用于死者，而弗兰克的行为则是直接的。（可以理解为，克拉拉并没有直接接触到岔道上的那个男人，而弗兰克的双手则确实接触到了那个胖子。）"></a>2、也有人将区分点放在了这样一个事实上：也即克拉拉的行为并非直接作用于死者，而弗兰克的行为则是直接的。（可以理解为，克拉拉并没有直接接触到岔道上的那个男人，而弗兰克的双手则确实接触到了那个胖子。）</h3><h3 id="3、克拉拉的行为是转移了一个既有的危险，而弗兰克则创造了一个新的危险。"><a href="#3、克拉拉的行为是转移了一个既有的危险，而弗兰克则创造了一个新的危险。" class="headerlink" title="3、克拉拉的行为是转移了一个既有的危险，而弗兰克则创造了一个新的危险。"></a>3、克拉拉的行为是转移了一个既有的危险，而弗兰克则创造了一个新的危险。</h3><blockquote><p>我是比较赞成第一种观点的。</p></blockquote><h2 id="双效原则"><a href="#双效原则" class="headerlink" title="双效原则"></a>双效原则</h2><p>圣·托马斯指出，同一行为通常兼有善恶两种效果。而在某种特定条件下，一个善的行为，虽然兼有恶的结果，也是可以允许的，哪怕这恶的结果，在通常情况下是必须避免的。</p><p>四个条件：</p><ol><li><p>该行动本身，在道德上必须是善的，或至少是中性的。</p></li><li><p>行为人不能主观希望恶果的发生，但可以允许其发生。如果能够避免恶果而同样达成善的效果，他应当这样做。</p></li><li><p>善果和行为本身的关系，其直接程度，必须等同或高于善果与恶果之间的关系。换句话说，善的结果必须是由这行为直接造成的，而不是通过恶果间接造成的。否则，行为人就是以恶果为工具来达成善果，这是永远不能为允许的。</p></li><li><p>善果之可取，必须足以弥补恶果之恶。</p></li></ol><blockquote><p>设置条件三是为了避免过度细分的诡辩术，体现了天才的智慧。例如梅普斯案中将摘除必要器官和杀人行文区分开。</p></blockquote><h3 id="将这些标准运用与达芙妮·琼斯一案："><a href="#将这些标准运用与达芙妮·琼斯一案：" class="headerlink" title="将这些标准运用与达芙妮·琼斯一案："></a>将这些标准运用与达芙妮·琼斯一案：</h3><ol><li>如果我们将行为与其结果剥离，改变电车路径的行为在道德上是中性的，所以符合第一个条件。</li><li>据我们所知，琼斯女士并不“希望”造成法利先生死亡。她为了拯救另外五人，仅仅“预见”并“允许”了这一副作用的发生。我们也可以认定，如果琼斯女士有办法不造成法利先生的死亡而同样挽救那五人的生命，她一定会那么做。</li><li>琼斯女士在扳动道岔时，并不是先杀死法利先生，然后利用他的身体去制止电车。她的行为，其直接、立刻的效果是拯救了五人的生命。只是后来，电车造成了法利先生的死亡。条件三符合。</li><li>拯救五人的善超过了失去一人的恶。条件四符合。</li></ol><h3 id="但梅普斯医生的行为不符合双效原则中的四个条件："><a href="#但梅普斯医生的行为不符合双效原则中的四个条件：" class="headerlink" title="但梅普斯医生的行为不符合双效原则中的四个条件："></a>但梅普斯医生的行为不符合双效原则中的四个条件：</h3><ol><li>杀死一个无辜者的行为，本身不是善的，因此不符合条件一。</li><li>从表面上看，梅普斯医生似乎一定有造成六号病人鲍勃·蒂瑟林顿先生死亡的主观故意，因为医生知道，摘除蒂瑟林顿的必要器官无异于夺走他的生命。因此，条件二也不符合。</li><li>梅普斯医生实际上是用一个恶的手段（摘取蒂瑟林顿先生的器官，并立即造成其死亡）来达成一个善的目的，这是永远不能被允许的。</li><li>我们愿意接受，梅普斯医生的情况也许符合条件四。善果似乎的确胜过恶果。</li></ol><blockquote><p>陪审员南希：我们的道德抉择最终还是出自情感的本能，因此一切分析都只不过是为我们的道德直觉寻找理由罢了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;杰里米·边沁的“功利主义”：一个行为的正确与否，完全取决于其造成的后果；而我们的行为准则，应当是以“最多数人之最大幸福”为目的。——判断好坏的标准：是否造成幸福的最大化。&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://zhizhi.tangliangdong.me/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="电车难题" scheme="http://zhizhi.tangliangdong.me/tags/%E7%94%B5%E8%BD%A6%E9%9A%BE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>bash快捷键</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/25/2019-10-25-bash%E5%91%BD%E4%BB%A4/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/25/2019-10-25-bash命令/</id>
    <published>2019-10-25T07:37:06.000Z</published>
    <updated>2019-11-18T03:38:34.280Z</updated>
    
    <content type="html"><![CDATA[<p>生活在 Bash shell 中，熟记以下快捷键，将极大的提高你的命令行操作效率。</p><a id="more"></a><h3 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h3><ul><li>Ctrl + a ：移到命令行首</li><li>Ctrl + e ：移到命令行尾</li><li>Ctrl + f ：按字符前移（右向）</li><li>Ctrl + b ：按字符后移（左向）</li><li>Alt + f ：按单词前移（右向）</li><li>Alt + b ：按单词后移（左向）</li><li>Ctrl + xx：在命令行首和光标之间移动</li><li>Ctrl + u ：从光标处删除至命令行首</li><li>Ctrl + k ：从光标处删除至命令行尾</li><li>Ctrl + w ：从光标处删除至字首</li><li>Alt + d ：从光标处删除至字尾</li><li>Ctrl + d ：删除光标处的字符</li><li>Ctrl + h ：删除光标前的字符</li><li>Ctrl + y ：粘贴至光标后</li><li>Alt + c ：从光标处更改为首字母大写的单词</li><li>Alt + u ：从光标处更改为全部大写的单词</li><li>Alt + l ：从光标处更改为全部小写的单词</li><li>Ctrl + t ：交换光标处和之前的字符</li><li>Alt + t ：交换光标处和之前的单词</li><li>Alt + Backspace：与 Ctrl + w <del>相同</del>类似，分隔符有些差别 [感谢 rezilla 指正]</li></ul><h3 id="重新执行命令"><a href="#重新执行命令" class="headerlink" title="重新执行命令"></a>重新执行命令</h3><ul><li>Ctrl + r：逆向搜索命令历史</li><li>Ctrl + g：从历史搜索模式退出</li><li>Ctrl + p：历史中的上一条命令</li><li>Ctrl + n：历史中的下一条命令</li><li>Alt + .：使用上一条命令的最后一个参数</li></ul><h3 id="控制命令"><a href="#控制命令" class="headerlink" title="控制命令"></a>控制命令</h3><ul><li>Ctrl + l：清屏</li><li>Ctrl + o：执行当前命令，并选择上一条命令</li><li>Ctrl + s：阻止屏幕输出</li><li>Ctrl + q：允许屏幕输出</li><li>Ctrl + c：终止命令</li><li>Ctrl + z：挂起命令</li></ul><h3 id="Bang-命令"><a href="#Bang-命令" class="headerlink" title="Bang (!) 命令"></a>Bang (!) 命令</h3><ul><li>!!：执行上一条命令</li><li>!blah：执行最近的以 blah 开头的命令，如 !ls</li><li>!blah:p：仅打印输出，而不执行</li><li>!$：上一条命令的最后一个参数，与 Alt + . 相同</li><li>!$:p：打印输出 !$ 的内容</li><li>!*：上一条命令的所有参数</li><li>!<em>:p：打印输出 !</em> 的内容</li><li>^blah：删除上一条命令中的 blah</li><li>^blah^foo：将上一条命令中的 blah 替换为 foo</li><li>^blah^foo^：将上一条命令中所有的 blah 都替换为 foo</li></ul><p><em>友情提示</em>：</p><ol><li>以上介绍的大多数 Bash 快捷键仅当在 emacs 编辑模式时有效，若你将 Bash 配置为 vi 编辑模式，那将遵循 vi 的按键绑定。Bash 默认为 emacs 编辑模式。如果你的 Bash 不在 emacs 编辑模式，可通过 <code>set -o emacs</code> 设置。</li><li>^S、^Q、^C、^Z 是由终端设备处理的，可用 <code>stty</code> 命令设置。</li></ol><p>转载至 <a href="https://linuxtoy.org/archives/bash-shortcuts.html" target="_blank" rel="noopener">让你提升命令行效率的 Bash 快捷键 [完整版]</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生活在 Bash shell 中，熟记以下快捷键，将极大的提高你的命令行操作效率。&lt;/p&gt;
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="快捷键" scheme="http://zhizhi.tangliangdong.me/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
      <category term="bash" scheme="http://zhizhi.tangliangdong.me/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>docker命令</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/23/2019-10-23-docker%E5%91%BD%E4%BB%A4/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/23/2019-10-23-docker命令/</id>
    <published>2019-10-23T14:42:20.000Z</published>
    <updated>2019-11-18T03:38:34.200Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker通过Dockerfile构建镜像"><a href="#docker通过Dockerfile构建镜像" class="headerlink" title="docker通过Dockerfile构建镜像"></a>docker通过Dockerfile构建镜像</h3><p>在Dockerfile同级目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t tangliangdong/nginx .</span><br></pre></td></tr></table></figure><h3 id="docker-开机自动启动"><a href="#docker-开机自动启动" class="headerlink" title="docker 开机自动启动"></a>docker 开机自动启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker.service</span><br></pre></td></tr></table></figure><h3 id="docker-容器开机自启动"><a href="#docker-容器开机自启动" class="headerlink" title="docker 容器开机自启动"></a>docker 容器开机自启动</h3><p>在运行docker容器时可以加如下参数来保证每次docker服务重启后容器也自动重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><p>如果已经启动了则可以使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=always &lt;IMAGE ID&gt;</span><br></pre></td></tr></table></figure><p>查看容器的重启设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f "&#123;&#123; .State.StartedAt &#125;&#125;" &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><h3 id="docker-进入已经运行的容器"><a href="#docker-进入已经运行的容器" class="headerlink" title="docker 进入已经运行的容器"></a>docker 进入已经运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker attach &lt;CONTAINER ID&gt;</span><br><span class="line"></span><br><span class="line">docker exec -it &lt;CONTAINER ID&gt; /bin/bash</span><br></pre></td></tr></table></figure><h3 id="docker查看网络"><a href="#docker查看网络" class="headerlink" title="docker查看网络"></a>docker查看网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p>查看使用该网络的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect app</span><br></pre></td></tr></table></figure><p>容器连接网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect app &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><h3 id="docker-使用挂载"><a href="#docker-使用挂载" class="headerlink" title="docker 使用挂载"></a>docker 使用挂载</h3><p>docker可以再创建容器时将宿主机的目录挂载到容器中，这样更新宿主机的目录，即可更新docker容器中的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -v &lt;宿主机绝对目录&gt;:&lt;容器绝对路径&gt;</span><br><span class="line"></span><br><span class="line">docker run -d -p 80 --name website -v $PWD/website:/var/www/html/website xiaotang/nginx nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;docker通过Dockerfile构建镜像&quot;&gt;&lt;a href=&quot;#docker通过Dockerfile构建镜像&quot; class=&quot;headerlink&quot; title=&quot;docker通过Dockerfile构建镜像&quot;&gt;&lt;/a&gt;docker通过Dockerfile构建
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="docker" scheme="http://zhizhi.tangliangdong.me/tags/docker/"/>
    
      <category term="mysql" scheme="http://zhizhi.tangliangdong.me/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>树莓派切换openjdk版本</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/23/2019-10-23-%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%87%E6%8D%A2openjdk%E7%89%88%E6%9C%AC/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/23/2019-10-23-树莓派切换openjdk版本/</id>
    <published>2019-10-23T05:44:33.000Z</published>
    <updated>2019-11-18T03:38:34.201Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树莓派安装openjdk"><a href="#树莓派安装openjdk" class="headerlink" title="树莓派安装openjdk"></a>树莓派安装openjdk</h3><p>将tf卡烧制好官方推荐的操作系统 <a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">Raspbian</a></p><p><img src="1.png" alt="Raspbian"></p><p><img src="2.png" alt="Raspbian"></p><p>再将树莓派插上电源启动，</p><p><img src="3.png" alt></p><p><img src="4.png" alt></p><p>Raspbian系统自带的是jdk是openjdk11的，但我还需要使用jdk8的，因此需要下载openjdk8</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure><blockquote><p>这里安装的不能是openjdk-8-jre，不然在jenkins配置jdk时，openjdk-8的安装目录是不能使用的，因为装的是openjdk-8-jre，而安装openjdk-8-jre会将open-8-jre一起安装</p></blockquote><p><img src="7.png" alt="sudo apt-get install openjdk-8-jdk"></p><p>安装成功后，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>显示的仍旧是openjdk11，因此需要进行切换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure><p><img src="5.png" alt></p><p>同时该命令将安装的各个jdk地址也显示出来了。</p><p><code>/usr/lib/jvm</code></p><blockquote><p>如果操作的时候出错，提示权限不足，则使用sudo命令已管理员身份执行，就可以通过了。</p><p>如果update-alternatives没有，则通过 <code>apt-get install update-alternatives</code> 先下载安装命令</p></blockquote><hr><h3 id="树莓派4B-4G内存版"><a href="#树莓派4B-4G内存版" class="headerlink" title="树莓派4B 4G内存版"></a>树莓派4B 4G内存版</h3><p><img src="6.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;树莓派安装openjdk&quot;&gt;&lt;a href=&quot;#树莓派安装openjdk&quot; class=&quot;headerlink&quot; title=&quot;树莓派安装openjdk&quot;&gt;&lt;/a&gt;树莓派安装openjdk&lt;/h3&gt;&lt;p&gt;将tf卡烧制好官方推荐的操作系统 &lt;a href=&quot;http
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="树莓派" scheme="http://zhizhi.tangliangdong.me/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="openjdk" scheme="http://zhizhi.tangliangdong.me/tags/openjdk/"/>
    
  </entry>
  
  <entry>
    <title>2019-10-15-docker安装redis</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/15/2019-10-15-docker%E5%AE%89%E8%A3%85redis/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/15/2019-10-15-docker安装redis/</id>
    <published>2019-10-15T03:25:26.000Z</published>
    <updated>2019-11-18T03:38:34.197Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载拉取Redis镜像"><a href="#下载拉取Redis镜像" class="headerlink" title="下载拉取Redis镜像"></a>下载拉取Redis镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p><img src="1.png" alt></p><h3 id="运行docker"><a href="#运行docker" class="headerlink" title="运行docker"></a>运行docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-redis -d redis</span><br></pre></td></tr></table></figure><p>其它启动方式：</p><p>启动redis实例并指定<strong>端口</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name redis -d -p 6379:6379 redis</span><br></pre></td></tr></table></figure><p>启动redis实例，指定<strong>端口</strong>和<strong>密码</strong>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name redis -d -p 6379:6379 redis --requirepass "123456"</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下载拉取Redis镜像&quot;&gt;&lt;a href=&quot;#下载拉取Redis镜像&quot; class=&quot;headerlink&quot; title=&quot;下载拉取Redis镜像&quot;&gt;&lt;/a&gt;下载拉取Redis镜像&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="docker" scheme="http://zhizhi.tangliangdong.me/tags/docker/"/>
    
      <category term="redis" scheme="http://zhizhi.tangliangdong.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>解决springboot的websocket无法注入service的问题</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/12/2019-10-12-springboot%E7%9A%84websocket%E6%97%A0%E6%B3%95%E6%B3%A8%E5%85%A5service/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/12/2019-10-12-springboot的websocket无法注入service/</id>
    <published>2019-10-12T01:36:01.000Z</published>
    <updated>2019-11-18T03:38:34.196Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用main方法启动的内置tomcat方法"><a href="#使用main方法启动的内置tomcat方法" class="headerlink" title="使用main方法启动的内置tomcat方法"></a>使用main方法启动的内置tomcat方法</h3><h4 id="springboot启动类"><a href="#springboot启动类" class="headerlink" title="springboot启动类"></a>springboot启动类</h4><p>在启动类给websocket拦截器注入应用上下文，以供拦截中获取 <em>service</em> 使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(exclude= &#123;DataSourceAutoConfiguration.class&#125;)</span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@ImportResource</span>(&#123;<span class="string">"classpath:dubbo.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorpApplication</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext applicationContext = SpringApplication.run(CorpApplication.class, args);</span><br><span class="line">        WebSocketHandshakeInterceptor.setApplicationContext(applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="websocket拦截器"><a href="#websocket拦截器" class="headerlink" title="websocket拦截器"></a>websocket拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.global.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.api.AccountApi;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.dto.AccountDto;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.service.AiWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.pay.common.emun.LogTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServletServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketHandshakeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在启动类中调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span></span>&#123;</span><br><span class="line">        applicationContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Exception e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After Handshake"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LogTemplate.LogForInfo(<span class="string">"before Handshake"</span>);</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ServletServerHttpRequest) &#123;</span><br><span class="line">            ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request;</span><br><span class="line">            HttpSession session = servletRequest.getServletRequest().getSession();</span><br><span class="line">            <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">                HttpServletRequest req = ((ServletServerHttpRequest) request).getServletRequest();</span><br><span class="line">                String account = req.getParameter(<span class="string">"account"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//使用account区分WebSocketHandler，以便定向发送消息</span></span><br><span class="line">                AccountDto accountDto = (AccountDto) session.getAttribute(AiWebSocketHandler.WEBSOCKET_USERINFO);</span><br><span class="line">                <span class="keyword">if</span> (accountDto == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 获取accountApi</span></span><br><span class="line">                    AccountApi accountApi = applicationContext.getBean(AccountApi.class);</span><br><span class="line">                    accountDto = accountApi.getAccount(account);</span><br><span class="line">                &#125;</span><br><span class="line">                attributes.put(AiWebSocketHandler.WEBSOCKET_USERINFO, accountDto);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>部署到测试环境，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AccountApi accountApi = applicationContext.getBean(AccountApi.class);</span><br></pre></td></tr></table></figure><p>直接报错，因为测试环境不是用的内置tomcat，不会调用Springboot的启动类，所以 <code>applicationContext</code>自然为空，自然会报错。</p><hr><h3 id="部署到Tomcat启动应用，获取service的方法"><a href="#部署到Tomcat启动应用，获取service的方法" class="headerlink" title="部署到Tomcat启动应用，获取service的方法"></a>部署到Tomcat启动应用，获取service的方法</h3><h3 id="将-WebSocketHandshakeInterceptor-添加到spring的应用上下文中"><a href="#将-WebSocketHandshakeInterceptor-添加到spring的应用上下文中" class="headerlink" title="将 WebSocketHandshakeInterceptor 添加到spring的应用上下文中"></a>将 WebSocketHandshakeInterceptor 添加到spring的应用上下文中</h3><blockquote><p>使用 WebSocketConfig 中注入 WebSocketHandshakeInterceptor </p><p>WebSocketConfig 相当于是 xml配置文件</p></blockquote><h4 id="1、方法一-（通过-Bean）"><a href="#1、方法一-（通过-Bean）" class="headerlink" title="1、方法一 （通过@Bean）"></a>1、方法一 （通过@Bean）</h4><h5 id="websocket配置文件"><a href="#websocket配置文件" class="headerlink" title="websocket配置文件"></a>websocket配置文件</h5><blockquote><p>必须加上<code>@Configuration</code>注解，<code>Spring</code>才能统一管理当前的拦截器实例。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.global.interceptors.WebSocketHandshakeInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.service.AiWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.注册WebSocket</span></span><br><span class="line">        <span class="comment">// webSocketHandshakeInterceptor()调用下面@Bean里的方法</span></span><br><span class="line">        registry.addHandler(webSocketHandler(), <span class="string">"/websocket"</span>)</span><br><span class="line">.addInterceptors(webSocketHandshakeInterceptor())</span><br><span class="line">.setAllowedOrigins(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.注册SockJS，提供SockJS支持(主要是兼容ie8)</span></span><br><span class="line">        registry.addHandler(webSocketHandler(),<span class="string">"/websocket"</span>)</span><br><span class="line">            .addInterceptors(webSocketHandshakeInterceptor())</span><br><span class="line">            .setAllowedOrigins(<span class="string">"*"</span>)</span><br><span class="line">            .withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TextWebSocketHandler <span class="title">webSocketHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AiWebSocketHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebSocketHandshakeInterceptor <span class="title">webSocketHandshakeInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebSocketHandshakeInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>之前 WebSocketConfig 配置了 <code>WebSocketHandshakeInterceptor</code>，springboot启动一直报错，<code>WebSocketHandshakeInterceptor</code>不能被重写</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">The bean &apos;webSocketHandshakeInterceptor&apos;, defined in class path resource [com/gonghui/intelligentization/config/WebSocketConfig.class], could not be registered. A bean with that name has already been defined in file [E:\tangliangdong\gfp-intelligentization-platform\corp\target\classes\com\gonghui\intelligentization\global\interceptors\WebSocketHandshakeInterceptor.class] and overriding is disabled.</span><br></pre></td></tr></table></figure><p>因为在 <code>WebSocketHandshakeInterceptor</code>类上加了 <code>@Component</code>，因此不能再次注入了</p><h5 id="websocket拦截器（游离在spring应用上下文环境之外）"><a href="#websocket拦截器（游离在spring应用上下文环境之外）" class="headerlink" title="websocket拦截器（游离在spring应用上下文环境之外）"></a>websocket拦截器（游离在spring应用上下文环境之外）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.global.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.api.AccountApi;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.dto.AccountDto;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.service.AiWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.pay.common.emun.LogTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServletServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketHandshakeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已经将 WebSocketHandshakeInterceptor 接入spring的上下文环境了，所以可以直接注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountApi accountApi;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Exception e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After Handshake"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LogTemplate.LogForInfo(<span class="string">"before Handshake"</span>);</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ServletServerHttpRequest) &#123;</span><br><span class="line">            ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request;</span><br><span class="line">            HttpSession session = servletRequest.getServletRequest().getSession();</span><br><span class="line">            <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">                HttpServletRequest req = ((ServletServerHttpRequest) request).getServletRequest();</span><br><span class="line">                String account = req.getParameter(<span class="string">"account"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//使用userName区分WebSocketHandler，以便定向发送消息</span></span><br><span class="line">                AccountDto accountDto = (AccountDto) session.getAttribute(AiWebSocketHandler.WEBSOCKET_USERINFO);</span><br><span class="line">                <span class="keyword">if</span> (accountDto == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    accountDto = accountApi.getAccount(account);</span><br><span class="line">                &#125;</span><br><span class="line">                attributes.put(AiWebSocketHandler.WEBSOCKET_USERINFO, accountDto);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、方法二-（通过-Component-实现注入）"><a href="#2、方法二-（通过-Component-实现注入）" class="headerlink" title="2、方法二 （通过 @Component 实现注入）"></a>2、方法二 （通过 @Component 实现注入）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在WebSocketHandshakeInterceptor加上了@Component，已经成功加入到应用上下文，可以直接注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebSocketHandshakeInterceptor webSocketHandshakeInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AiWebSocketHandler aiWebSocketHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 1.注册WebSocket</span></span><br><span class="line">        <span class="comment">// 直接使用 @Autowired注入的类</span></span><br><span class="line">        registry.addHandler(aiWebSocketHandler, <span class="string">"/websocket"</span>)</span><br><span class="line">                .addInterceptors(webSocketHandshakeInterceptor)</span><br><span class="line">                .setAllowedOrigins(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.注册SockJS，提供SockJS支持(主要是兼容ie8)</span></span><br><span class="line">        registry.addHandler(aiWebSocketHandler, <span class="string">"/websocket"</span>)</span><br><span class="line">                .addInterceptors(webSocketHandshakeInterceptor)</span><br><span class="line">                .setAllowedOrigins(<span class="string">"*"</span>)</span><br><span class="line">                .withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>websocket拦截器类上要加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br></pre></td></tr></table></figure><hr><p>在此感谢公司带我的 CTO 雷老板 ヾ(๑╹◡╹)ﾉ”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用main方法启动的内置tomcat方法&quot;&gt;&lt;a href=&quot;#使用main方法启动的内置tomcat方法&quot; class=&quot;headerlink&quot; title=&quot;使用main方法启动的内置tomcat方法&quot;&gt;&lt;/a&gt;使用main方法启动的内置tomcat方法&lt;/
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="springboot" scheme="http://zhizhi.tangliangdong.me/tags/springboot/"/>
    
      <category term="websocket" scheme="http://zhizhi.tangliangdong.me/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>docker安装mysql</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/11/2019-10-11-docker%E5%AE%89%E8%A3%85mysql/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/11/2019-10-11-docker安装mysql/</id>
    <published>2019-10-11T07:44:44.000Z</published>
    <updated>2019-11-18T03:38:34.184Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-docker中搜索可用镜像"><a href="#1-docker中搜索可用镜像" class="headerlink" title="1. docker中搜索可用镜像"></a>1. docker中搜索可用镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><p><img src="1.png" alt></p><blockquote><p>如果需要查看mysql可用的版本标签号，则需要去 <a href="https://hub.docker.com/" target="_blank" rel="noopener"><em>docker register</em></a> 查看。</p></blockquote><p><img src="2.png" alt></p><h3 id="2-拉取MySQL镜像"><a href="#2-拉取MySQL镜像" class="headerlink" title="2. 拉取MySQL镜像"></a>2. 拉取MySQL镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p><img src="3.png" alt></p><h3 id="3-查看本地mysql镜像"><a href="#3-查看本地mysql镜像" class="headerlink" title="3. 查看本地mysql镜像"></a>3. 查看本地mysql镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls mysql</span><br></pre></td></tr></table></figure><p><img src="4.png" alt></p><h3 id="4-生成并运行mysql容器"><a href="#4-生成并运行mysql容器" class="headerlink" title="4. 生成并运行mysql容器"></a>4. 生成并运行mysql容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql5.7 -e MYSQL_ROOT_PASSWORD=123456 -d -i -p 3306:3306 --restart=always  mysql:5.7</span><br></pre></td></tr></table></figure><p><img src="5.png" alt></p><p>以上参数的含义：</p><ul><li>–name mysql5.7  将容器命名为mysql5.7，后面可以用这个name进行容器的启动暂停等操作</li><li>-e  MYSQL_ROOT_PASSWORD=123456 设置MySQL密码为123456</li><li>-d  此容器在后台运行,并且返回容器的ID</li><li>-i  以交互模式运行容器</li><li>-p  进行端口映射，格式为<code>主机(宿主)端口:容器端口</code></li><li>–restart=always  当docker重启时，该容器自动重启</li></ul><h3 id="进入mysql容器"><a href="#进入mysql容器" class="headerlink" title="进入mysql容器"></a>进入mysql容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -ti mysql bash</span><br></pre></td></tr></table></figure><p><img src="6.png" alt></p><hr><p>参考自 <a href="https://juejin.im/post/5babba8e5188255c960c3c63" target="_blank" rel="noopener">瑜戈的基于docker安装MySQL</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-docker中搜索可用镜像&quot;&gt;&lt;a href=&quot;#1-docker中搜索可用镜像&quot; class=&quot;headerlink&quot; title=&quot;1. docker中搜索可用镜像&quot;&gt;&lt;/a&gt;1. docker中搜索可用镜像&lt;/h3&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="docker" scheme="http://zhizhi.tangliangdong.me/tags/docker/"/>
    
      <category term="mysql" scheme="http://zhizhi.tangliangdong.me/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>spring实现websocket</title>
    <link href="http://zhizhi.tangliangdong.me/2019/09/30/2019-9-30-websocket-spring/"/>
    <id>http://zhizhi.tangliangdong.me/2019/09/30/2019-9-30-websocket-spring/</id>
    <published>2019-09-29T21:00:00.000Z</published>
    <updated>2019-11-18T03:38:34.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三种方式配置websocket"><a href="#三种方式配置websocket" class="headerlink" title="三种方式配置websocket"></a>三种方式配置websocket</h3><ul><li>使用Java提供的@ServerEndpoint注解实现</li><li>使用Spring提供的低层级WebSocket API实现</li><li>使用STOMP消息实现</li></ul><hr><blockquote><p>要注意所需的包要兼容，不然可能无法初始化 <code>bean</code></p></blockquote><h4 id="一、使用Java提供的-ServerEndpoint注解实现"><a href="#一、使用Java提供的-ServerEndpoint注解实现" class="headerlink" title="一、使用Java提供的@ServerEndpoint注解实现"></a>一、使用Java提供的@ServerEndpoint注解实现</h4><blockquote><p>使用@ServerEndpoint注解监听一个WebSocket请求路径：</p></blockquote><p>这里监听的是 <code>/websocket</code> ，后面的<code>{account}</code>是websocket建立连接时传递的参数，在方法里通过 <code>@PathParam(&quot;account&quot;) String account</code> 来获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/websocket/&#123;account&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketEndpoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Session session, @PathParam(<span class="string">"account"</span>)</span>String account) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"已连接"</span>);</span><br><span class="line">        System.out.println(<span class="string">"用户"</span>+account+<span class="string">" 登录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Session session, String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        session.getBasicRemote().sendText(<span class="string">"Receive message: "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Session session, Throwable t)</span></span>&#123;</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"连接关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WebSocket</code> 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.service.WebSocketEndpoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * websocket相关配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebSocketEndpoint <span class="title">WebSocketEndpoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebSocketEndpoint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="二、使用Spring提供的低层级WebSocket-API实现"><a href="#二、使用Spring提供的低层级WebSocket-API实现" class="headerlink" title="二、使用Spring提供的低层级WebSocket API实现"></a>二、使用Spring提供的低层级WebSocket API实现</h4><h5 id="1-添加一个WebSocketHandler："><a href="#1-添加一个WebSocketHandler：" class="headerlink" title="1. 添加一个WebSocketHandler："></a>1. 添加一个WebSocketHandler：</h5><p>定义一个继承了AbstractWebSocketHandler类的消息处理类，然后自定义对”建立连接“、”接收/发送消息“、”异常情况“等情况进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AiWebSocketHandler</span> <span class="keyword">extends</span> <span class="title">TextWebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(WebSocketHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//已建立连接的用户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ArrayList&lt;WebSocketSession&gt; users = <span class="keyword">new</span> ArrayList&lt;WebSocketSession&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理前端发送的文本信息</span></span><br><span class="line"><span class="comment">     * js调用websocket.send时候，会调用该方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String username = (String) session.getAttributes().get(<span class="string">"WEBSOCKET_USERNAME"</span>);</span><br><span class="line">        <span class="comment">// 获取提交过来的消息详情</span></span><br><span class="line">        LOGGER.debug(<span class="string">"收到用户 "</span> + username + <span class="string">"的消息:"</span> + message.toString());</span><br><span class="line">        <span class="comment">//回复一条信息，</span></span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> TextMessage(<span class="string">"reply msg:"</span> + message.getPayload()));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当新连接建立的时候，被调用</span></span><br><span class="line"><span class="comment">     * 连接成功时候，会触发页面上onOpen方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        users.add(session);</span><br><span class="line">        String username = (String) session.getAttributes().get(<span class="string">"WEBSOCKET_USERNAME"</span>);</span><br><span class="line">        LOGGER.info(<span class="string">"用户 "</span> + username + <span class="string">" Connection Established"</span>);</span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> TextMessage(username + <span class="string">" connect"</span>));</span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> TextMessage(<span class="string">"hello wellcome"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当连接关闭时被调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String username = (String) session.getAttributes().get(<span class="string">"WEBSOCKET_USERNAME"</span>);</span><br><span class="line">        LOGGER.info(<span class="string">"用户 "</span> + username + <span class="string">" Connection closed. Status: "</span> + status);</span><br><span class="line">        users.remove(session);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传输错误时调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String username = (String) session.getAttributes().get(<span class="string">"WEBSOCKET_USERNAME"</span>);</span><br><span class="line">        <span class="keyword">if</span> (session.isOpen()) &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.debug(<span class="string">"用户: "</span> + username + <span class="string">" websocket connection closed......"</span>);</span><br><span class="line">        users.remove(session);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给所有在线用户发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToUsers</span><span class="params">(TextMessage message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (WebSocketSession user : users) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (user.isOpen()) &#123;</span><br><span class="line">                    user.sendMessage(message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给某个用户发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToUser</span><span class="params">(String userName, TextMessage message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (WebSocketSession user : users) &#123;</span><br><span class="line">            <span class="keyword">if</span> (user.getAttributes().get(<span class="string">"WEBSOCKET_USERNAME"</span>).equals(userName)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (user.isOpen()) &#123;</span><br><span class="line">                        user.sendMessage(message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-创建一个WebSocket握手拦截器"><a href="#2-创建一个WebSocket握手拦截器" class="headerlink" title="2. 创建一个WebSocket握手拦截器"></a>2. 创建一个WebSocket握手拦截器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.global.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServletServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketHandshakeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span></span>&#123;</span><br><span class="line">        applicationContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Exception e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After Handshake"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LogTemplate.LogForInfo(<span class="string">"before Handshake"</span>);</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ServletServerHttpRequest) &#123;</span><br><span class="line">            ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request;</span><br><span class="line">            HttpSession session = servletRequest.getServletRequest().getSession();</span><br><span class="line">            <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">                HttpServletRequest req = ((ServletServerHttpRequest) request).getServletRequest();</span><br><span class="line">                <span class="comment">// websocket连接传递的参数 account</span></span><br><span class="line">                String account = req.getParameter(<span class="string">"account"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//使用userName区分WebSocketHandler，以便定向发送消息</span></span><br><span class="line">                String userName = (String) session.getAttribute(<span class="string">"SESSION_USERNAME"</span>);</span><br><span class="line">                <span class="keyword">if</span> (userName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    userName = <span class="string">"system-"</span> + session.getId();</span><br><span class="line">                &#125;</span><br><span class="line">                attributes.put(<span class="string">"SESSION_USERNAME"</span>, accountDto);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-Spring-WebSocket的配置文件，采用的是注解的方式"><a href="#3-Spring-WebSocket的配置文件，采用的是注解的方式" class="headerlink" title="3. Spring WebSocket的配置文件，采用的是注解的方式"></a>3. Spring WebSocket的配置文件，采用的是注解的方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.global.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.注册WebSocket</span></span><br><span class="line"></span><br><span class="line">        registry.addHandler(webSocketHandler(), <span class="string">"/websocket"</span>).</span><br><span class="line">                addInterceptors(<span class="keyword">new</span> WebSocketHandshakeInterceptor()).setAllowedOrigins(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.注册SockJS，提供SockJS支持(主要是兼容ie8)</span></span><br><span class="line">registry.addHandler(webSocketHandler(),<span class="string">"/websocket"</span>).</span><br><span class="line">                addInterceptors(<span class="keyword">new</span> WebSocketHandshakeInterceptor()).setAllowedOrigins(<span class="string">"*"</span>).</span><br><span class="line">                withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TextWebSocketHandler <span class="title">webSocketHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AiWebSocketHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端页面配置"><a href="#前端页面配置" class="headerlink" title="前端页面配置"></a>前端页面配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Java后端WebSocket的Tomcat实现&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    请输入：&lt;textarea rows="3" cols="100" id="inputMsg" name="inputMsg"&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;button οnclick="doSend();" id="button"&gt;发送&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type="text/javascript" src="http://cdn.bootcss.com/jquery/3.1.0/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type="text/javascript" src="http://cdn.bootcss.com/sockjs-client/1.1.1/sockjs.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    var websocket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//判断当前浏览器是否支持WebSocket</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'WebSocket'</span> in window) &#123;</span><br><span class="line">        <span class="comment">//Websocket的连接</span></span><br><span class="line">        websocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:9999/websocket?account=13567175138"</span>);<span class="comment">//WebSocket对应的地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'MozWebSocket'</span> in window) &#123;</span><br><span class="line">        <span class="comment">//Websocket的连接</span></span><br><span class="line">        websocket = <span class="keyword">new</span> MozWebSocket(<span class="string">"ws://localhost:9999/websocket"</span>);<span class="comment">//SockJS对应的地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//SockJS的连接</span></span><br><span class="line">        websocket = <span class="keyword">new</span> SockJS(<span class="string">"ws://localhost:9999/websocket"</span>);    <span class="comment">//SockJS对应的地址</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    websocket.onopen = onOpen;</span><br><span class="line">    websocket.onmessage = onMessage;</span><br><span class="line">    websocket.onerror = onError;</span><br><span class="line">    websocket.onclose = onClose;</span><br><span class="line"> </span><br><span class="line">    <span class="function">function <span class="title">onOpen</span><span class="params">(openEvt)</span> </span>&#123;</span><br><span class="line">    console.log(<span class="string">"成功连接"</span>)</span><br><span class="line">    console.log(openEvt)</span><br><span class="line">        <span class="comment">//alert(openEvt.Data);</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function">function <span class="title">onMessage</span><span class="params">(evt)</span> </span>&#123;</span><br><span class="line">        console.log(evt.data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">function <span class="title">onError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    console.log(<span class="string">"websocket出现错误"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">function <span class="title">onClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    console.log(<span class="string">"websocket关闭"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(function()&#123;</span><br><span class="line">        $(<span class="string">"#button"</span>).click(function(e)&#123;</span><br><span class="line">            console.log(e)</span><br><span class="line">            <span class="keyword">if</span> (websocket.readyState == websocket.OPEN) &#123;</span><br><span class="line">                var msg = document.getElementById(<span class="string">"inputMsg"</span>).value;</span><br><span class="line">                console.log(msg)</span><br><span class="line">                websocket.send(msg);<span class="comment">//调用后台handleTextMessage方法</span></span><br><span class="line">                console.log((<span class="string">"发送成功!"</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                console.log((<span class="string">"连接失败!"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="三、使用STOMP消息实现"><a href="#三、使用STOMP消息实现" class="headerlink" title="三、使用STOMP消息实现"></a>三、使用STOMP消息实现</h4><p>STOMP是一个用于C/S之间进行异步消息传输的简单文本协议, 全称是Simple Text Oriented Messaging Protocol。</p><blockquote><p>其实STOMP协议并不是为WS所设计的, 它其实是消息队列的一种协议, 和AMQP,JMS是平级的。 只不过由于它的简单性恰巧可以用于定义WS的消息体格式。 目前很多服务端消息队列都已经支持了STOMP, 比如RabbitMQ, Apache ActiveMQ等。很多语言也都有STOMP协议的客户端解析库，像JAVA的Gozirra，C的libstomp，Python的pyactivemq，JavaScript的stomp.js等等。</p></blockquote><h4 id="1、Spring配置STOMP消息"><a href="#1、Spring配置STOMP消息" class="headerlink" title="1、Spring配置STOMP消息"></a>1、Spring配置STOMP消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.global.interceptors.WebSocketInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.ChannelRegistration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketTransportRegistration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * websocket相关配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/9/30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//用来注册Endpoint，“/gs-guide-websocket”即为客户端尝试建立连接的地址。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 需要 setAllowedOrigins("*")，不然无法访问</span></span><br><span class="line">        registry.addEndpoint(<span class="string">"/stomp-websocket"</span>)</span><br><span class="line">            .setAllowedOrigins(<span class="string">"*"</span>)</span><br><span class="line">            .withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//实现WebSocketMessageBrokerConfigurer中的此方法，配置消息代理（broker）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry config)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//将"message"前缀绑定到MessageMapping注解指定的方法上。如"message/hello"被指定用greeting()方法来处理.</span></span><br><span class="line">        config.setApplicationDestinationPrefixes(<span class="string">"/message"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//启用SimpleBroker，使得订阅到此"topic"前缀的客户端可以收到greeting消息.</span></span><br><span class="line">        config.enableSimpleBroker(<span class="string">"/ai"</span>, <span class="string">"/user"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//点对点推送时，客户端订阅消息的前缀,/user为默认值，也需把 '/user' 添加到 enableSimpleBroker()中。</span></span><br><span class="line">        config.setUserDestinationPrefix(<span class="string">"/user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureWebSocketTransport</span><span class="params">(WebSocketTransportRegistration registry)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureClientInboundChannel</span><span class="params">(ChannelRegistration registration)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureClientOutboundChannel</span><span class="params">(ChannelRegistration registration)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addReturnValueHandlers</span><span class="params">(List&lt;HandlerMethodReturnValueHandler&gt; returnValueHandlers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;MessageConverter&gt; messageConverters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、收发消息的控制器"><a href="#2、收发消息的控制器" class="headerlink" title="2、收发消息的控制器"></a>2、收发消息的控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.MessageMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.SendTo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.annotation.SendToUser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.SimpMessagingTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/10/8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 9:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpMessagingTemplate simpMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @SendTo 群发推送</span></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@SendTo</span>(<span class="string">"/ai/greetings"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"account"</span>, account);</span><br><span class="line">        map.put(<span class="string">"content"</span>, <span class="string">"hello "</span>+ account);</span><br><span class="line">        <span class="keyword">return</span> JSONObject.toJSONString(map);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// SendToUser为点对点推送</span></span><br><span class="line">    <span class="comment">// 客户端需订阅 '/user/&#123;account&#125;/ai/message'</span></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/queue"</span>)</span><br><span class="line"><span class="meta">@SendToUser</span>(<span class="string">"/ai/message"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queue</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"account"</span>, account);</span><br><span class="line">        map.put(<span class="string">"content"</span>, <span class="string">"hello "</span>+ account);</span><br><span class="line">        simpMessagingTemplate.convertAndSendToUser(account, <span class="string">"/queue/greetings"</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务端主动向客户端进行一对一推送"><a href="#服务端主动向客户端进行一对一推送" class="headerlink" title="服务端主动向客户端进行一对一推送"></a>服务端主动向客户端进行一对一推送</h4><ul><li>simpMessagingTemplate.convertAndSend(String destination, Object payload); // 群发</li><li>simpMessagingTemplate.convertAndSendToUser(String user, String destination, Object payload); // 一对一<ul><li><em>user</em> 是发送的用户标识</li><li><em>destination</em> 是发送路径</li><li><em>payload</em> 是发送的消息</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gonghui.intelligentization.service.websocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.dto.AccountWebSocketDto;</span><br><span class="line"><span class="keyword">import</span> com.gonghui.intelligentization.dto.AiWebsocketAlarmDto;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.SimpMessagingTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/10/8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 15:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"AiWebsocketService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AiWebsocketService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供给用户发送消息处理</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpMessagingTemplate simpMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToUser</span><span class="params">(String account, Map&lt;String, Object&gt; data)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给某个用户发送消息"</span>);</span><br><span class="line">        <span class="comment">// 实际发送的地址是 /user/&#123;account&#125;/ai/websocket</span></span><br><span class="line">        <span class="comment">// 客户端订阅的websocket地址为 /user/&#123;account&#125;/ai/websocket</span></span><br><span class="line">        simpMessagingTemplate.convertAndSendToUser(account, <span class="string">"/ai/websocket"</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToUser</span><span class="params">(Map&lt;String, Object&gt; data)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给某个用户发送消息"</span>);</span><br><span class="line">        <span class="comment">// 实际发送的地址是 /user/&#123;account&#125;/ai/websocket</span></span><br><span class="line">        <span class="comment">// 客户端订阅的websocket地址为 /user/&#123;account&#125;/ai/websocket</span></span><br><span class="line">        simpMessagingTemplate.convertAndSend(<span class="string">"/ai/message"</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、前端页面-SockJS"><a href="#4、前端页面-SockJS" class="headerlink" title="4、前端页面 SockJS"></a>4、前端页面 SockJS</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//使用SockJS和stomp.js来打开“gs-guide-websocket”地址的连接，这也是我们使用Spring构建的SockJS服务。</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.1.4/sockjs.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> socket = <span class="keyword">new</span> SockJS(<span class="string">'http://localhost:9998/stomp-websocket'</span>);</span></span><br><span class="line"><span class="undefined">        stompClient = Stomp.over(socket);</span></span><br><span class="line"><span class="javascript">        stompClient.connect(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">frame</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//连接成功后的回调方法</span></span></span><br><span class="line"><span class="javascript">            setConnected(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'Connected: '</span> + frame);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//订阅/ai/greetings地址，当服务端向此地址发送消息时，客户端即可收到。</span></span></span><br><span class="line"><span class="javascript">            stompClient.subscribe(<span class="string">'/ai/greetings'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">greeting</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//收到消息时的回调方法，展示欢迎信息。</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(greeting.body).content);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">// 订阅一对一发送消息接口， 'xiaotang' 为用户标识</span></span></span><br><span class="line"><span class="javascript">            stompClient.subscribe(<span class="string">'/user/xiaotang/ai/websocket'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">greeting</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//收到消息时的回调方法，展示欢迎信息。</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(greeting.body).content);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//断开连接的方法</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">disconnect</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (stompClient !== <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="undefined">            stompClient.disconnect();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        setConnected(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"Disconnected"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//将用户输入的账号信息,使用STOMP客户端发送到"/message/hello"地址。它正是我们在GreetingController中定义的greeting()方法所处理的地址.</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sendName</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        stompClient.send(<span class="string">"/message/hello"</span>, &#123;&#125;, <span class="built_in">JSON</span>.stringify(&#123;<span class="string">'account'</span>: $(<span class="string">"#account"</span>).val()&#125;));</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>要确保 <code>spring-websocket</code> 、<code>spring-messaging</code>与 <code>spring-core</code> 的版本号一致，不然会无法创建 <em>bean</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-messaging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>转载自：</p><ul><li><a href="https://www.zifangsky.cn/1355.html" target="_blank" rel="noopener">Spring Boot中使用WebSocket总结（一）：几种实现方式详解</a></li><li><a href="https://blog.csdn.net/zsg88/article/details/76862495" target="_blank" rel="noopener">使用spring-websocket包搭建websocket服务</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;三种方式配置websocket&quot;&gt;&lt;a href=&quot;#三种方式配置websocket&quot; class=&quot;headerlink&quot; title=&quot;三种方式配置websocket&quot;&gt;&lt;/a&gt;三种方式配置websocket&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用Java提供的@Se
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="spring" scheme="http://zhizhi.tangliangdong.me/tags/spring/"/>
    
      <category term="websocket" scheme="http://zhizhi.tangliangdong.me/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>2019-8-14-navicat完成离线激活</title>
    <link href="http://zhizhi.tangliangdong.me/2019/08/14/2019-8-14-navicat%E5%AE%8C%E6%88%90%E7%A6%BB%E7%BA%BF%E6%BF%80%E6%B4%BB/"/>
    <id>http://zhizhi.tangliangdong.me/2019/08/14/2019-8-14-navicat完成离线激活/</id>
    <published>2019-08-14T07:45:43.000Z</published>
    <updated>2019-11-18T03:38:34.410Z</updated>
    
    <content type="html"><![CDATA[<p>这份repo将会告诉你Navicat是怎么完成离线激活的。</p><p><a href="https://blog.csdn.net/wqq1027/article/details/86677079" target="_blank" rel="noopener">注册机是怎么工作的?</a></p><h2 id="如何使用这个注册机"><a href="#如何使用这个注册机" class="headerlink" title="如何使用这个注册机"></a>如何使用这个注册机</h2><ol><li><p><a href="https://github.com/DoubleLabyrinth/navicat-keygen/releases" target="_blank" rel="noopener">从这里</a>下载最新的release。</p></li><li><p>使用<code>navicat-patcher.exe</code>替换掉<code>navicat.exe</code>和<code>libcc.dll</code>里的Navicat激活公钥。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navicat-patcher.exe &lt;Navicat installation path&gt; [RSA-2048 PEM file]</span><br></pre></td></tr></table></figure><ul><li><code>&lt;Navicat installation path&gt;</code>: Navicat的完整安装路径。</li></ul><p><strong>这个参数必须指定。</strong></p><ul><li><code>[RSA-2048 PEM file]</code>: RSA-2048私钥文件的完整路径或相对路径。</li></ul><p><strong>这个参数是可选的。</strong> 如果未指定，<code>navicat-patcher.exe</code>将会在当前目录生成一个新的RSA-2048私钥文件。</p><p><strong>例如：(在cmd.exe中)</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navicat-patcher.exe &quot;C:\Program Files\PremiumSoft\Navicat Premium 12&quot;</span><br></pre></td></tr></table></figure><blockquote><p>地址字符串必须用双引号，使用单引号会报错</p></blockquote><p><img src="3.png" alt></p><hr><p><strong>Navicat Premium 12.1.12 简体中文版已通过测试</strong>。下面将是一份样例输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">***************************************************</span><br><span class="line">*       Navicat Patcher by @DoubleLabyrinth       *</span><br><span class="line">*           Release date: Jan 19 2019             *</span><br><span class="line">***************************************************</span><br><span class="line"> </span><br><span class="line">Press Enter to continue or Ctrl + C to abort.</span><br><span class="line"> </span><br><span class="line">MESSAGE: PatchSolution0 will be omitted.</span><br><span class="line"> </span><br><span class="line">MESSAGE: PatchSolution3: Keywords[0] has been found:</span><br><span class="line">         Relative Machine Code Offset = +0x0000000001644a08</span><br><span class="line">         Relative Machine Code RVA    = +0x0000000001645608</span><br><span class="line">         Patch Offset                 = +0x00000000023d56e4</span><br><span class="line">         Patch Size                   = 3 byte(s)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">MESSAGE: PatchSolution3: Keywords[110] has been found:</span><br><span class="line">         Relative Machine Code Offset = +0x000000000165155e</span><br><span class="line">         Relative Machine Code RVA    = +0x000000000165215e</span><br><span class="line">         Patch Offset                 = +0x0000000001651561</span><br><span class="line">         Patch Size                   = 1 byte(s)</span><br><span class="line"> </span><br><span class="line">MESSAGE: PatchSolution2 will be omitted.</span><br><span class="line"> </span><br><span class="line">MESSAGE: PatchSolution1: Keywords[0] has been found: offset = +0x021f7390.</span><br><span class="line">MESSAGE: PatchSolution1: Keywords[1] has been found: offset = +0x0074bd39.</span><br><span class="line">MESSAGE: PatchSolution1: Keywords[2] has been found: offset = +0x021f70a0.</span><br><span class="line">MESSAGE: PatchSolution1: Keywords[3] has been found: offset = +0x0074bd1f.</span><br><span class="line">MESSAGE: PatchSolution1: Keywords[4] has been found: offset = +0x021f708c.</span><br><span class="line"> </span><br><span class="line">MESSAGE: Generating new RSA private key, it may take a long time.</span><br><span class="line">MESSAGE: New RSA private key has been saved to RegPrivateKey.pem.</span><br><span class="line"> </span><br><span class="line">Your RSA public key:</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsWnV5hQxlXvDA3Ad4k5N</span><br><span class="line">ZLz4cO+iGEPegSovIDcwTo097I+0pXYKPTVl+0iKC5JtJRObb4Xx9yK9gGwqkcxo</span><br><span class="line">o6WzKq0xY1jz7X6obxwlQCNse3Os1wr0rIY0UzP1dCpkW/5MwGbFxiB6PEVqkzmJ</span><br><span class="line">CmHBzZDRu/jAuL1nyoiGnUStqwENNYhyl4k7r8AiJkBZGMOCrj6v0JfgNna25Ce6</span><br><span class="line">QCFojlY4dkYQ5/7njQ3qpLwMeLEXEysMW3aUScSB68/vsHnB4C0fIkwfEPYZ/AC5</span><br><span class="line">AqbWHVbNmveB3rjV+tZZxXcLE8ArgKh1Gs+2VtnL09gwHm6WcpyPZ42G6tMDjWyw</span><br><span class="line">1wIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line"> </span><br><span class="line">******************************************</span><br><span class="line">*            PatchSulution3              *</span><br><span class="line">******************************************</span><br><span class="line">@ +023d56e4: 4D 49 49 ---&gt; 4D 49 49</span><br><span class="line">@ +01644a63: 42 49 ---&gt; 42 49</span><br><span class="line">@ +01644a68: 6A ---&gt; 6A</span><br><span class="line">@ +01644ace: 41 ---&gt; 41</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">@ +023d58d4: 36 63 6A ---&gt; 47 36 74</span><br><span class="line">@ +023d58d8: 78 6C 6A 75 75 51 61 ---&gt; 4D 44 6A 57 79 77 31</span><br><span class="line">@ +023d58e8: 77 49 44 41 ---&gt; 77 49 44 41</span><br><span class="line">@ +0165155c: 51 41 ---&gt; 51 41</span><br><span class="line">@ +01651561: 42 ---&gt; 42</span><br><span class="line"> </span><br><span class="line">******************************************</span><br><span class="line">*            PatchSulution1              *</span><br><span class="line">******************************************</span><br><span class="line">@ +0x021f7390</span><br><span class="line">Previous:</span><br><span class="line">+0x00000000021F7390  44 37 35 31 32 35 42 37 30 37 36 37 42 39 34 31  D75125B70767B941</span><br><span class="line">+0x00000000021F73A0  34 35 42 34 37 43 31 43 42 33 43 30 37 35 35 45  45B47C1CB3C0755E</span><br><span class="line">+0x00000000021F73B0  37 43 43 42 38 38 32 35 43 35 44 43 45 30 43 35  7CCB8825C5DCE0C5</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">@ +0x021f708c</span><br><span class="line">Previous:</span><br><span class="line">+0x00000000021F7080  31 32 32 35 4f 45 29 2e 00 00 00 00 39 32 39 33  1225OE).....9293</span><br><span class="line">+0x00000000021F7090  33 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  3...............</span><br><span class="line">After:</span><br><span class="line">+0x00000000021F7080  31 32 32 35 4f 45 29 2e 00 00 00 00 32 37 45 38  1225OE).....27E8</span><br><span class="line">+0x00000000021F7090  45 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  E...............</span><br><span class="line"> </span><br><span class="line">MESSAGE: Patch has been done successfully.</span><br></pre></td></tr></table></figure><ol start="3"><li>接下来使用<code>navicat-keygen.exe</code>来生成序列号和激活码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navicat-keygen.exe &lt;-bin|-text&gt; [-adv] &lt;RSA-2048 PrivateKey(PEM file)&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;-bin|-text&gt;</code>: 必须是<code>-bin</code>或<code>-text</code>。</li></ul><p>如果指定了<code>-bin</code>，<code>navicat-keygen.exe</code>最终将生成<code>license_file</code>文件。这个选项是给Navicat旧激活方式使用的。</p><p>如果指定了<code>-text</code>，<code>navicat-keygen.exe</code>最终将生成Base64样式的激活码。这个选项是给Navicat新激活方式使用的。</p><p><strong>这个参数必须指定。</strong></p><ul><li><code>[-adv]</code>: 开启高级模式。</li></ul><p><strong>这个参数是可选的。</strong> 如果指定了这个参数，<code>navicat-keygen.exe</code>将会要求你手工填写产品ID号、语言标识号。这个选项一般是给以后用的。</p><ul><li><code>&lt;RSA-2048 PrivateKey(PEM file)&gt;</code>: RSA-2048私钥文件的完整路径或相对路径。</li></ul><p><strong>这个参数必须指定。</strong></p><p><strong>例如：(在cmd.exe中)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navicat-keygen.exe -text .\RegPrivateKey.pem</span><br></pre></td></tr></table></figure><p>你会被要求选择Navicat产品类别、语言以及输入主版本号。之后会随机生成一个序列号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Select Navicat product:</span><br><span class="line">0. DataModeler</span><br><span class="line">1. Premium</span><br><span class="line">2. MySQL</span><br><span class="line">3. PostgreSQL</span><br><span class="line">4. Oracle</span><br><span class="line">5. SQLServer</span><br><span class="line">6. SQLite</span><br><span class="line">7. MariaDB</span><br><span class="line">8. MongoDB</span><br><span class="line">9. ReportViewer</span><br><span class="line"> </span><br><span class="line">(Input index)&gt; 1</span><br><span class="line"> </span><br><span class="line">Select product language:</span><br><span class="line">0. English</span><br><span class="line">1. Simplified Chinese</span><br><span class="line">2. Traditional Chinese</span><br><span class="line">3. Japanese</span><br><span class="line">4. Polish</span><br><span class="line">5. Spanish</span><br><span class="line">6. French</span><br><span class="line">7. German</span><br><span class="line">8. Korean</span><br><span class="line">9. Russian</span><br><span class="line">10. Portuguese</span><br><span class="line"> </span><br><span class="line">(Input index)&gt; 1</span><br><span class="line"> </span><br><span class="line">(Input major version number, range: 0 ~ 15, default: 12)&gt; 12</span><br><span class="line"> </span><br><span class="line">Serial number:</span><br><span class="line">NAVO-2ORP-IN5A-GQEE</span><br><span class="line"> </span><br><span class="line">Your name:</span><br></pre></td></tr></table></figure><p>你可以使用这个序列号暂时激活Navicat。</p><p>接下来你会被要求输入<code>用户名</code>和<code>组织名</code>；请随便填写，但不要太长。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Your name: root</span><br><span class="line">Your organization: root</span><br><span class="line">Input request code (in Base64), input empty line to end:</span><br></pre></td></tr></table></figure><p>之后你会被要求填入请求码，该请求码是在navicat中输入上方生成序列号进行离线激活后，会生成一段请求码，然后复制过来。注意 <strong>不要关闭命令行</strong>.</p><p><strong>断开网络</strong> 并打开Navicat。找到<code>注册</code>窗口，并填入keygen给你的序列号。然后点击<code>激活</code>按钮。</p><p><img src="1.png" alt></p><p>一般来说在线激活肯定会失败，这时候Navicat会询问你是否<code>手动激活</code>，直接选吧。</p><p>在<code>手动激活</code>窗口你会得到一个请求码，复制它并把它粘贴到keygen里。最后别忘了连按至少 <strong>两下回车</strong> 结束输入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Your name: root</span><br><span class="line">Your organization: root</span><br><span class="line"></span><br><span class="line">Input request code (in Base64), input empty line to end:</span><br><span class="line">EnoJQKOD5h08rGvcpxJ288YwA0e5AjIlu/WQUVde9rcnjC4RfYPQ83Rp047nohWBn02UELpAt9NAVWp6Nww+4gxQjgkXJ19wb6cRY+V68xLIJbZXmByXBQwWL4X4lB3RxpcS5y2fAk/iipFaFu5XE8yhC1o129IVuuaCE3lwzAuB563BKSKmp4Xr1vSqW6EDeCtKp8PY91nSt4htHF11Sfx8v0ASfdbu75ePTB3Rf/nzkbCKv8E63E6mVSRWqDuQ8didqXQhci7qjPICvBD6ne5FZhDGEJi6hNSwdKeTbj/ZUBxFScZYWsskFjVL5u5RcdLo0Gzp8H7YOTI7OfJarg==</span><br><span class="line"></span><br><span class="line">Request Info:</span><br><span class="line">&#123;&quot;K&quot;:&quot;NAVADD22GI4NXPU5&quot;, &quot;DI&quot;:&quot;DJym852txVo8XGZkDzPn&quot;, &quot;P&quot;:&quot;WIN&quot;&#125;</span><br><span class="line"></span><br><span class="line">Response Info:</span><br><span class="line">&#123;&quot;K&quot;:&quot;NAVADD22GI4NXPU5&quot;,&quot;DI&quot;:&quot;DJym852txVo8XGZkDzPn&quot;,&quot;N&quot;:&quot;root&quot;,&quot;O&quot;:&quot;root&quot;,&quot;T&quot;:1565768523&#125;</span><br><span class="line"></span><br><span class="line">License:</span><br><span class="line">GUk9coMkfoI2AtUiQ2PfDjlR6rybOrhY+q6azg5f7H+AwgIsVp6jWS1vb2NgkiXx</span><br><span class="line">u9NuoNeR8T2JiOqRC90umfdEqit0MGaGpDL/Wk6o+HNcKZmdbl9tImhGxxaj3Qib</span><br><span class="line">Yn3EzIQOz+hP7ipoG7kmIxzvmBOok0tDhrOhDzhzsPmAvFxTndQgU5hgCOIcHJVT</span><br><span class="line">PerF/SK/lTMHSWqgwNyl2M3APBCxvCIjw6omFNwRXY3JD3zKUIiSWqsQT0mCBDby</span><br><span class="line">4k1V7IhCBzOHpBTHLLbjSG8copp37rgcn8PK0FFL8yUCDCmYzDBvE8B1KTYgmNn6</span><br><span class="line">dWf7BT0jyOoRIoYwIApNmQ==</span><br></pre></td></tr></table></figure><p><img src="2.png" alt></p><p>如果不出意外，你会得到一个看似用Base64编码的激活码 <em>license</em>。直接复制它，并把它粘贴到Navicat的<code>手动激活</code>窗口，最后点<code>激活</code>按钮。如果没什么意外的话应该能成功激活。</p><p>转载至 <a href="https://blog.csdn.net/weixin_43160151/article/details/82913382" target="_blank" rel="noopener">Navicat脱机激活(亲测Navicat for MySQL)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这份repo将会告诉你Navicat是怎么完成离线激活的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wqq1027/article/details/86677079&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;注册机是
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="navicat" scheme="http://zhizhi.tangliangdong.me/tags/navicat/"/>
    
  </entry>
  
  <entry>
    <title>mysql实现主从复制</title>
    <link href="http://zhizhi.tangliangdong.me/2019/08/09/2019-8-9-mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://zhizhi.tangliangdong.me/2019/08/09/2019-8-9-mysql主从复制/</id>
    <published>2019-08-09T03:30:09.000Z</published>
    <updated>2019-11-18T03:38:34.429Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h4><table><thead><tr><th>角色</th><th style="text-align:center">系统</th><th style="text-align:center">mysql 版本</th><th style="text-align:center">ip</th></tr></thead><tbody><tr><td>主</td><td style="text-align:center">centos7</td><td style="text-align:center">5.6</td><td style="text-align:center">192.168.139.132</td></tr><tr><td>从</td><td style="text-align:center">ubuntu 18.04.2</td><td style="text-align:center">5.7</td><td style="text-align:center">192.168.139.131</td></tr></tbody></table><a id="more"></a><h4 id="2-两个数据库版本尽量保持一致"><a href="#2-两个数据库版本尽量保持一致" class="headerlink" title="2. 两个数据库版本尽量保持一致"></a>2. 两个数据库版本尽量保持一致</h4><h4 id="3-创建复制账号"><a href="#3-创建复制账号" class="headerlink" title="3. 创建复制账号"></a>3. 创建复制账号</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// master mysql 5.6</span><br><span class="line">$ mysql -uroot -p</span><br><span class="line">// Enter password</span><br><span class="line">mysql&gt; grant replication slave on *.* to 'backup'@'192.168.139.131' identified by '123456';</span><br><span class="line"></span><br><span class="line">// 如果不行，就执行下面的步骤</span><br><span class="line">mysql&gt; create user 'backup'@'192.168.139.132' identified by '123456';</span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO 'backup'@'192.168.139.132';</span><br></pre></td></tr></table></figure><h4 id="4-配置主服务器"><a href="#4-配置主服务器" class="headerlink" title="4. 配置主服务器"></a>4. 配置主服务器</h4><p>mysql5.6 的配置文件在 <code>/etc/my.cnf</code> 中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>找到<code>[mysqld]</code>，在下面添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=1 # 服务器id</span><br><span class="line">log-bin = mysql-bin </span><br><span class="line">binlog-do-db=gonghui  #需要被复制的数据库名，如果被复制多个数据库，重复设置这个选项即可</span><br><span class="line">binlog-ignore-db=mysql  #不需要被复制的数据库名</span><br><span class="line">innodb_flush_log_at_trx_commit = 0</span><br></pre></td></tr></table></figure><h4 id="5-配置从服务器"><a href="#5-配置从服务器" class="headerlink" title="5. 配置从服务器"></a>5. 配置从服务器</h4><p>mysql5.7 的配置文件是 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code></p><p>找到<code>[mysqld]</code>，在其下加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2  # 服务器id</span><br><span class="line">log-bin = mysql-bin #binlog日志名</span><br><span class="line">replicate-do-db = gonghui  #需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可</span><br><span class="line">replicate-ignore-db= mysql  #不需要复制的数据库名</span><br></pre></td></tr></table></figure><blockquote><p>配置主从服务器的my.cnf时，留心各自的server-id一定要彼此独立，不能重复，否则，会出现如下错误：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Slave: received end packet FROM server, apparent master shutdown</span><br></pre></td></tr></table></figure><p>重启主从数据库，即可生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart mysql</span><br></pre></td></tr></table></figure><p>然后在<strong>主数据库</strong>上输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| mysql-bin.000013 |      881 | gonghui      | mysql            |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br></pre></td></tr></table></figure><p>该<em>File</em> 和 <em>Position</em>信息，需要在下一步在从数据库上使用</p><h4 id="6-设置从数据库复制参数"><a href="#6-设置从数据库复制参数" class="headerlink" title="6. 设置从数据库复制参数"></a>6. 设置从数据库复制参数</h4><ul><li><code>master_log_file</code> 为主数据库的<em>File</em>值</li><li><code>master_log_pos</code>为主数据库的<em>Position</em>值</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line"></span><br><span class="line">// 修改参数之前需要先关闭 slave</span><br><span class="line">mysql&gt; stop slave</span><br><span class="line"></span><br><span class="line">mysql&gt; CHANGE MASTER TO master_host = '192.168.139.132',</span><br><span class="line">master_user = 'tld',</span><br><span class="line">master_password = '123456',</span><br><span class="line">master_log_file = 'mysql-bin.000013',</span><br><span class="line">master_log_pos = 881;</span><br><span class="line"></span><br><span class="line">// 修改完毕再开启，即可生效</span><br><span class="line">mysql&gt; start slave</span><br></pre></td></tr></table></figure><p>输入以下代码即可查看是否成功完成主从复制，若是如下方所示，就是完成主从复制</p><ul><li><code>Slave_IO_Running: Yes</code></li><li><code>Slave_SQL_Running: Yes</code></li></ul><blockquote><p> 若是没有对应上，则根据<code>Last_SQL_Error</code> 的错误提示进行错误定位并修改</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.139.132</span><br><span class="line">                  Master_User: backup</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000013</span><br><span class="line">          Read_Master_Log_Pos: 881</span><br><span class="line">               Relay_Log_File: ubuntu-relay-bin.000004</span><br><span class="line">                Relay_Log_Pos: 442</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000013</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: gonghui</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 881</span><br><span class="line">              Relay_Log_Space: 650</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0 </span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0 </span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID:</span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:      </span><br><span class="line">           Master_SSL_Crlpath:      </span><br><span class="line">           Retrieved_Gtid_Set:       </span><br><span class="line">            Executed_Gtid_Set:        </span><br><span class="line">                Auto_Position: 0      </span><br><span class="line">         Replicate_Rewrite_DB:          </span><br><span class="line">                 Channel_Name:       </span><br><span class="line">           Master_TLS_Version:      </span><br><span class="line">1 row in set (0.00 sec)     </span><br><span class="line">                  </span><br><span class="line">ERROR:             </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure><h3 id="若是要实现双向的主从复制，只要主从对调之后再次执行之前的步骤即可。"><a href="#若是要实现双向的主从复制，只要主从对调之后再次执行之前的步骤即可。" class="headerlink" title="若是要实现双向的主从复制，只要主从对调之后再次执行之前的步骤即可。"></a>若是要实现双向的主从复制，只要主从对调之后再次执行之前的步骤即可。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-环境说明&quot;&gt;&lt;a href=&quot;#1-环境说明&quot; class=&quot;headerlink&quot; title=&quot;1. 环境说明&quot;&gt;&lt;/a&gt;1. 环境说明&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;角色&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;系统&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;mysql 版本&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;ip&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;主&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;centos7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5.6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;192.168.139.132&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;从&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ubuntu 18.04.2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5.7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;192.168.139.131&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="spring" scheme="http://zhizhi.tangliangdong.me/tags/spring/"/>
    
      <category term="java" scheme="http://zhizhi.tangliangdong.me/tags/java/"/>
    
      <category term="websocket" scheme="http://zhizhi.tangliangdong.me/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>linxu上的mysql只能sudo登陆</title>
    <link href="http://zhizhi.tangliangdong.me/2019/08/08/2019-8-8-linux%E4%B8%8A%E7%9A%84mysql%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://zhizhi.tangliangdong.me/2019/08/08/2019-8-8-linux上的mysql使用问题/</id>
    <published>2019-08-08T06:30:00.000Z</published>
    <updated>2019-11-18T03:38:34.414Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ubuntu上的数据库修改密码"><a href="#Ubuntu上的数据库修改密码" class="headerlink" title="Ubuntu上的数据库修改密码"></a>Ubuntu上的数据库修改密码</h3><p>Ubuntu上的数据库安装好之后没有提示输入密码，自然后来 <code>mysql -uroot -p</code>不知道是什么密码，均是报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1045 (28000): Access denied <span class="keyword">for</span> user <span class="string">'root'</span>@<span class="string">'localhost'</span> (using password: YES)</span><br></pre></td></tr></table></figure><p>需要打开一个文件 <code>/etc/mysql/debian.cnf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure><p><img src="mysql4.png" alt></p><p>将终端里登陆用的用户名root换成文件里的 <strong><em>debian-sys-maint</em></strong> 和 <strong><em>password</em></strong>值 进行数据库的登陆操作，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u debian-sys-maint -p</span><br></pre></td></tr></table></figure><p>这时再输入对应的密码就可以顺利登陆了，然后就要修改root的密码，不然用这个密码可太麻烦了。</p><p>系统所使用的是5.7版本的mysql，password字段已经被删除，取而代之的是authentication_string字段，所以要更改密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update mysql.user set authentication_string=password(&apos;password&apos;) where user=&apos;root&apos;and Host = &apos;localhost&apos;;</span><br></pre></td></tr></table></figure><p>若是出现下图则代表修改成功，之后只需要重启mysql就可以登陆了。</p><p><img src="mysql5.png" alt></p><hr><h3 id="Ubuntu-上的mysql只能sudo登陆"><a href="#Ubuntu-上的mysql只能sudo登陆" class="headerlink" title="Ubuntu 上的mysql只能sudo登陆"></a>Ubuntu 上的mysql只能sudo登陆</h3><p><img src="mysql1.png" alt="linxu上的mysql只能sudo登陆"></p><p>Ubuntu上安装好的mysql 5.7，无法用 <code>mysql -uroot -p</code> 进行登陆，只能通过<code>sudo mysql -uroot -p</code></p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p><strong>修改MySQL配置文件，添加一句skip-grant-tables，重启即可无需密码登录</strong></p><h4 id="旧版mysql"><a href="#旧版mysql" class="headerlink" title="旧版mysql"></a>旧版mysql</h4><p>在Ubuntu，默认安装配置文件全路径 /etc/mysql/my.cnf</p><h4 id="新版MySQL"><a href="#新版MySQL" class="headerlink" title="新版MySQL"></a>新版MySQL</h4><p>对于5.7.23等高版本，配置文件路径和命令已经改变</p><p>此时的 <code>/etc/mysql/my.cnf</code> 文件已经是一个软链接，里面只有指向链接的语句。</p><p><img src="mysql2.png" alt="新版MySQL"></p><p>真正的配置文件是 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p><img src="mysql3.png" alt></p><p>在图中的位置添加 <code>skip-grant-tables</code>，之后重启mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysql</span><br></pre></td></tr></table></figure><hr><h3 id="解决mysql无法远程连接的问题"><a href="#解决mysql无法远程连接的问题" class="headerlink" title="解决mysql无法远程连接的问题"></a>解决mysql无法远程连接的问题</h3><h4 id="创建远程登陆用户"><a href="#创建远程登陆用户" class="headerlink" title="创建远程登陆用户"></a>创建远程登陆用户</h4><p>Ubuntu上的mysql在默认情况下不支持用户通过非本机连接上数据库服务器，因此先要在mysql.user中创建可以远程连接的用户。</p><ol><li>先登陆数据库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><ol start="2"><li>选择数据库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建远程登陆用户</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><ul><li>root ：用户名</li><li>%：任何ip都可登陆</li><li>123456：密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><ol start="4"><li>重启mysql</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysql</span><br><span class="line">service mysqld restart // 皆可</span><br></pre></td></tr></table></figure><h4 id="修改mysql配置文件"><a href="#修改mysql配置文件" class="headerlink" title="修改mysql配置文件"></a>修改mysql配置文件</h4><p>修改 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code></p><p>将里面的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address = 127.0.0.1 #注释掉</span><br></pre></td></tr></table></figure><p>然后重启mysql，</p><p>就可以远程访问mysql了。</p><hr><h3 id="如何删除mysql"><a href="#如何删除mysql" class="headerlink" title="如何删除mysql"></a>如何删除mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoremove --purge mysql-server-5.7</span><br><span class="line">sudo apt-get remove mysql-server</span><br><span class="line">sudo apt-get autoremove mysql-server</span><br><span class="line">sudo apt-get remove mysql-common</span><br></pre></td></tr></table></figure><p><strong>之后需要清理残余数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l |grep ^rc|awk <span class="string">'&#123;print $2&#125;'</span> |sudo xargs dpkg -P</span><br></pre></td></tr></table></figure><p>摘录自:point_right::point_right::point_right:<a href="https://blog.csdn.net/sinat_21302587/article/details/76870457" target="_blank" rel="noopener">ubuntu安装mysql 时未提示输入密码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ubuntu上的数据库修改密码&quot;&gt;&lt;a href=&quot;#Ubuntu上的数据库修改密码&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu上的数据库修改密码&quot;&gt;&lt;/a&gt;Ubuntu上的数据库修改密码&lt;/h3&gt;&lt;p&gt;Ubuntu上的数据库安装好之后没有
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="mysql" scheme="http://zhizhi.tangliangdong.me/tags/mysql/"/>
    
      <category term="linux" scheme="http://zhizhi.tangliangdong.me/tags/linux/"/>
    
  </entry>
  
</feed>
