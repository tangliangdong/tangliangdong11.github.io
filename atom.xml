<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoTang&#39; Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhizhi.tangliangdong.me/"/>
  <updated>2019-12-17T08:37:34.295Z</updated>
  <id>http://zhizhi.tangliangdong.me/</id>
  
  <author>
    <name>XiaoTang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务消费者Feign访问springcloud服务提供者</title>
    <link href="http://zhizhi.tangliangdong.me/2019/12/17/2019-12-17-springcloud-feignclient/"/>
    <id>http://zhizhi.tangliangdong.me/2019/12/17/2019-12-17-springcloud-feignclient/</id>
    <published>2019-12-17T01:59:13.000Z</published>
    <updated>2019-12-17T08:37:34.295Z</updated>
    
    <content type="html"><![CDATA[<p><code>Feign</code>是一个声明式的伪<code>Http</code>客户端，它使得写<code>Http</code>客户端变得更简单。</p><p>使用<code>Feign</code>，只需要创建一个接口并注解，它具有可插拔的注解特性，可使用<code>Feign</code> 注解和<code>JAX-RS</code>注解，<code>Feign</code>支持可插拔的编码器和解码器，<code>Feign</code>默认集成了<code>Ribbon</code>，并和<code>Eureka</code>结合，默认实现了负载均衡的效果。</p><a id="more"></a><h3 id="Feign-简介"><a href="#Feign-简介" class="headerlink" title="Feign 简介"></a>Feign 简介</h3><p><strong><code>Feign</code> 具有如下特性：</strong></p><ul><li>可插拔的注解支持，包括<code>Feign</code>注解和<code>JAX-RS</code>注解</li><li>支持可插拔的<code>HTTP</code>编码器和解码器</li><li>支持<code>Hystrix</code>和它的<code>Fallback</code></li><li>支持<code>Ribbon</code>的负载均衡</li><li>支持<code>HTTP</code>请求和响应的压缩<code>Feign</code>是一个声明式的<code>Web Service</code>客户端，它的目的就是让<code>Web Service</code>调用更加简单。它整合了<code>Ribbon</code>和<code>Hystrix</code>，从而不再需要显式地使用这两个组件。<code>Feign</code>还提供了<code>HTTP</code>请求的模板，通过编写简单的接口和注解，就可以定义好<code>HTTP</code>请求的参数、格式、地址等信息。接下来，<code>Feign</code>会完全代理<code>HTTP</code>的请求，我们只需要像调用方法一样调用它就可以完成服务请求。</li></ul><p>简而言之：<code>Feign</code>能干<code>Ribbon</code>和<code>Hystrix</code>的事情，但是要用<code>Ribbon</code>和<code>Hystrix</code>自带的注解必须要引入相应的<code>jar</code>包才可以。</p><p>结构：</p><p><img src="1.png" alt></p><ul><li>springcloud  服务注册中心</li><li>springserver  服务提供者 （服务名：SERVER-01）</li><li>springclient  服务消费者</li></ul><blockquote><p>前一篇文章写过如何配置使用服务器注册中心，这一次主要是讲如何用 <em>Feign</em> 代替 <em>RestTemplate</em> 实现消费者访问提供者的接口</p><p><strong>服务提供者不需要修改任何代码，主要是对服务消费者进行改造。</strong></p></blockquote><h1 id="配置Feign消费者"><a href="#配置Feign消费者" class="headerlink" title="配置Feign消费者"></a>配置Feign消费者</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="开启Feign"><a href="#开启Feign" class="headerlink" title="开启Feign"></a>开启Feign</h2><p>在工程的启动类中,通过<code>@EnableFeignClients</code> 注解开启Feign的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringclientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringclientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h2><p>通过<code>@FeignClient（&quot;服务名&quot;）</code>，来指定调用哪个服务。<br>比如在代码中调用了<code>SERVER-01</code>服务的 <code>/</code> 接口，<code>/</code> 就是调用：服务提供者项目：<code>springserver</code> 的 <code>index()</code> 方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springclient.consumers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"SERVER-01"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OpenClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"open/index"</span>)</span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getIndex</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> String age)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费方法"><a href="#消费方法" class="headerlink" title="消费方法"></a>消费方法</h2><p>在Controller中调用提供者提供的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springclient.controllers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springclient.consumers.OpenClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"open"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpenController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OpenClient openClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getIndex</span><span class="params">(String name, String age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> openClient.getIndex(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8011</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">client-01</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line">    <span class="comment">#eureka主机名，会在控制页面中显示</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment">#eureka服务器页面中status的请求路径</span></span><br><span class="line"><span class="attr">    status-page-url:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/index</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line">      <span class="comment">#在注册中心中进行注册</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8001/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h3><p><img src="2.png" alt="服务注册中心"></p><hr><p>参考自 <a href="https://segmentfault.com/a/1190000012312123" target="_blank" rel="noopener"><a href="https://segmentfault.com/a/1190000012312123" target="_blank" rel="noopener">Spring Cloud（四） 服务提供者 Eureka + 服务消费者 Feign</a></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Feign&lt;/code&gt;是一个声明式的伪&lt;code&gt;Http&lt;/code&gt;客户端，它使得写&lt;code&gt;Http&lt;/code&gt;客户端变得更简单。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;Feign&lt;/code&gt;，只需要创建一个接口并注解，它具有可插拔的注解特性，可使用&lt;code&gt;Feign&lt;/code&gt; 注解和&lt;code&gt;JAX-RS&lt;/code&gt;注解，&lt;code&gt;Feign&lt;/code&gt;支持可插拔的编码器和解码器，&lt;code&gt;Feign&lt;/code&gt;默认集成了&lt;code&gt;Ribbon&lt;/code&gt;，并和&lt;code&gt;Eureka&lt;/code&gt;结合，默认实现了负载均衡的效果。&lt;/p&gt;
    
    </summary>
    
      <category term="Learn" scheme="http://zhizhi.tangliangdong.me/categories/Learn/"/>
    
    
      <category term="springcloud" scheme="http://zhizhi.tangliangdong.me/tags/springcloud/"/>
    
      <category term="feign" scheme="http://zhizhi.tangliangdong.me/tags/feign/"/>
    
  </entry>
  
  <entry>
    <title>spring restTemplate调用提供者方法</title>
    <link href="http://zhizhi.tangliangdong.me/2019/12/17/2019-12-17-springcloud-restTemplate/"/>
    <id>http://zhizhi.tangliangdong.me/2019/12/17/2019-12-17-springcloud-restTemplate/</id>
    <published>2019-12-17T01:00:00.000Z</published>
    <updated>2019-12-17T08:36:52.987Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> RestTemplate 简化了发起HTTP请求以及处理响应的过程，并且支持REST</p></blockquote><a id="more"></a><p>只需要引入spring-web包即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>先配置 <code>RestTemplate</code> 的 configuration 文件，</p><p>还要进行中文乱码的配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springclient.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.client.RestTemplateBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.StringHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplateBuilder()</span><br><span class="line">                .setConnectTimeout(Duration.ofSeconds(<span class="number">1</span>))</span><br><span class="line">                .setReadTimeout(Duration.ofSeconds(<span class="number">1</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 防止RestTemplate获取的中文乱码</span></span><br><span class="line">        restTemplate.getMessageConverters().add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span><br><span class="line"></span><br><span class="line">        StringHttpMessageConverter stringHttpMessageConverter = <span class="keyword">new</span> StringHttpMessageConverter(StandardCharsets.UTF_8);</span><br><span class="line">        stringHttpMessageConverter.setWriteAcceptCharset(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;MediaType&gt; mediaTypeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        mediaTypeList.add(MediaType.ALL);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; restTemplate.getMessageConverters().size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (restTemplate.getMessageConverters().get(i) <span class="keyword">instanceof</span> StringHttpMessageConverter) &#123;</span><br><span class="line">                restTemplate.getMessageConverters().remove(i);</span><br><span class="line">                restTemplate.getMessageConverters().add(i, stringHttpMessageConverter);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(restTemplate.getMessageConverters().get(i) <span class="keyword">instanceof</span> MappingJackson2HttpMessageConverter)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    ((MappingJackson2HttpMessageConverter) restTemplate.getMessageConverters().get(i)).setSupportedMediaTypes(mediaTypeList);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Controller</code>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springclient.controllers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springclient.consumers.OpenClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.LinkedMultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/12/12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 15:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"open"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpenController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String name, String age)</span></span>&#123;</span><br><span class="line">        MultiValueMap&lt;String, Object&gt; map = <span class="keyword">new</span> LinkedMultiValueMap();</span><br><span class="line">        map.add(<span class="string">"name"</span>, name);</span><br><span class="line">        map.add(<span class="string">"age"</span>, age);</span><br><span class="line">        String response = restTemplate.postForObject(<span class="string">"http://SERVER-01/open/index"</span>, map, String.class);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>RestTemplate的post参数不能使用MultiValueMap而不能使用HashMap</li><li>SERVER-01 是服务提供者的服务名</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; RestTemplate 简化了发起HTTP请求以及处理响应的过程，并且支持REST&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Learn" scheme="http://zhizhi.tangliangdong.me/categories/Learn/"/>
    
    
      <category term="springcloud" scheme="http://zhizhi.tangliangdong.me/tags/springcloud/"/>
    
      <category term="restTemplate" scheme="http://zhizhi.tangliangdong.me/tags/restTemplate/"/>
    
  </entry>
  
  <entry>
    <title>springboot 2.x springcloud Eureka 注册</title>
    <link href="http://zhizhi.tangliangdong.me/2019/12/12/2019-12-12-springcloud-config/"/>
    <id>http://zhizhi.tangliangdong.me/2019/12/12/2019-12-12-springcloud-config/</id>
    <published>2019-12-12T03:15:55.000Z</published>
    <updated>2019-12-12T03:55:53.880Z</updated>
    
    <content type="html"><![CDATA[<p>基于SpringBoot 2.x的Spring Cloud服务注册与发现</p><p><a href="https://github.com/tangliangdong/springboot-integration" target="_blank" rel="noopener">github项目地址</a></p><a id="more"></a><h1 id="创建服务注册中心"><a href="#创建服务注册中心" class="headerlink" title="创建服务注册中心"></a>创建服务注册中心</h1><h2 id="创建springboot工程"><a href="#创建springboot工程" class="headerlink" title="创建springboot工程"></a>创建springboot工程</h2><p>1、在<strong><a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io</a></strong>中创建</p><p>2、选择Maven Project、Java、2.2.2，添加 <em>Eureka server</em> 依赖</p><p><img src="1.png" alt></p><p>3、点击Generate Project，解压下载的zip压缩包，再用Ideal打开。</p><h2 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h2><p>启动类添加 <code>@EnableEurekaServer</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcloudApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>1、修改pom.xml如下，基本上不需要修改什么，主要是引入<code>spring-cloud-starter-netflix-eureka-server</code>包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-integration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Eureka Server包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、在 <code>application.yml</code> 中添加以下配置 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8001</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line">    <span class="comment">#服务名</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">service-01</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line">    <span class="comment"># eureka主机名，会在控制页面中显示</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line">    <span class="comment"># 是否将自己注册到Eureka Server，默认为true</span></span><br><span class="line">    <span class="comment"># 由于当前这个应用就是Eureka Server，故而设为false</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 表示是否从Eureka Server获取注册信息，默认为true。因为这是一个单点的Eureka Server，</span></span><br><span class="line">    <span class="comment"># 不需要同步其他的Eureka Server节点的数据，故而设为false</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line">      <span class="comment"># eureka注册中心服务器地址</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>启动Spring Boot项目，在浏览器中输入<a href="http://localhost:8001" target="_blank" rel="noopener">http://localhost:8001</a> 即可进入Eureka主页面。</p><p><img src="3.png" alt="spring Eureka"></p><h1 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h1><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>提供者项目创建方式与注册中心服务器基本相同，只需做以下修改：</p><p>1、修改启动类注解@EnableEurekaServer为@EnableEurekaClient</p><p>2、将pom.xml文件中的  <code>spring-cloud-starter-netflix-eureka-server</code>换成 <code>spring-cloud-starter-netflix-eureka-client</code>，并加入如下的 <em>web</em> 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-integration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springclient<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring cloud client<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不加入这个web包，该客户端启动会直接关闭 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Eureka Client 服务提供方的包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、修改application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">server-01</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line">    <span class="comment">#eureka主机名，会在控制页面中显示</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment">#eureka服务器页面中status的请求路径</span></span><br><span class="line"><span class="attr">    status-page-url:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/index</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line">      <span class="comment">#在注册中心中进行注册</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8001/eureka/</span></span><br></pre></td></tr></table></figure><h2 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h2><p>启动项目成功后，即可在服务中心 <strong>DS Replicas -&gt; Instances currently registered with Eureka</strong> 下发现此服务提供者了。</p><p><img src="4.png" alt="启动服务后"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于SpringBoot 2.x的Spring Cloud服务注册与发现&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tangliangdong/springboot-integration&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github项目地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Learn" scheme="http://zhizhi.tangliangdong.me/categories/Learn/"/>
    
    
      <category term="springcloud" scheme="http://zhizhi.tangliangdong.me/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>springboot分布式事务atomikos</title>
    <link href="http://zhizhi.tangliangdong.me/2019/12/09/2019-12-9-springboot-atomikos/"/>
    <id>http://zhizhi.tangliangdong.me/2019/12/09/2019-12-9-springboot-atomikos/</id>
    <published>2019-12-09T06:56:21.000Z</published>
    <updated>2019-12-10T02:55:20.833Z</updated>
    
    <content type="html"><![CDATA[<p>场景：现有两个不同的数据库，一个叫db_user，一个叫db_account。一个操作，要同时更新db_user的user表和db_account的account表。失败，则两个表一起回滚。</p><a id="more"></a><h3 id="项目目录："><a href="#项目目录：" class="headerlink" title="项目目录："></a>项目目录：</h3><p><img src="1.png" alt="项目目录结构"></p><ul><li><em>com.example.atomikos.config</em>  数据源配置信息</li><li><em>com.example.atomikos.db1</em>  数据库db_user的业务和对象</li><li><em>com.example.atomikos.db2</em>  数据库db_account的业务和对象</li><li><em>resources/mapper/user</em>  db_user数据库的映射文件</li><li><em>resources/mapper/account</em>  db_account数据库的映射文件</li></ul><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atomikos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>atomikos<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mysql数据库连接包，需指定版本，不然会使用8.0的jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- alibaba的druid数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- jta-atomikos 分布式事务管理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jta-atomikos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.persistence-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!--在application.yml文件中使用@占位符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delimiters</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">delimiter</span>&gt;</span>@<span class="tag">&lt;/<span class="name">delimiter</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">delimiters</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">useDefaultDelimiters</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useDefaultDelimiters</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--防止ico二进制文件损坏--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">nonFilteredFileExtensions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nonFilteredFileExtension</span>&gt;</span>ico<span class="tag">&lt;/<span class="name">nonFilteredFileExtension</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">nonFilteredFileExtensions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开发环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 测试环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>test<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>连接的mysql数据库是5.7的，因此使用 <code>mysql-connector-java</code>的是5.1的版本，而mysql 6以上的数据库则需要使用 <code>mysql-connector-java</code>6.0以上，对应的驱动为 <code>com.mysql.cj.jdbc.Driver</code></p></blockquote><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8091</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">@env@</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 该配置节点为独立的节点，不是在在spring的节点下</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapping/*/*.xml</span>  <span class="comment">#注意：一定要对应mapper映射xml文件的所在路径</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.example.atomikos.model</span>  <span class="comment"># 注意：对应实体类的路径</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line"><span class="attr">    log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#控制台打印sql</span></span><br></pre></td></tr></table></figure><h3 id="application-dev-yml"><a href="#application-dev-yml" class="headerlink" title="application-dev.yml"></a>application-dev.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 开发环境配置</span></span><br><span class="line"><span class="attr">  profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      one:</span>  <span class="comment">#数据源1</span></span><br><span class="line"><span class="attr">        driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">jdbc:mysql://116.62.14.208:3306/db_user?useUnicode=true&amp;amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">        username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">        password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="comment">#初始化时建立物理连接的个数</span></span><br><span class="line"><span class="attr">        initialSize:</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#池中最大连接数</span></span><br><span class="line"><span class="attr">        maxActive:</span> <span class="number">20</span></span><br><span class="line">        <span class="comment">#最小空闲连接</span></span><br><span class="line"><span class="attr">        minIdle:</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#获取连接时最大等待时间，单位毫秒</span></span><br><span class="line"><span class="attr">        maxWait:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment">#有两个含义：</span></span><br><span class="line">        <span class="comment">#1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span></span><br><span class="line">        <span class="comment">#2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</span></span><br><span class="line"><span class="attr">        timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment">#连接保持空闲而不被驱逐的最小时间，单位是毫秒</span></span><br><span class="line"><span class="attr">        minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">        <span class="comment">#使用该SQL语句检查链接是否可用。如果validationQuery=null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。</span></span><br><span class="line"><span class="attr">        validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">        <span class="comment">#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line"><span class="attr">        testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span></span><br><span class="line"><span class="attr">        testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment">#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span></span><br><span class="line"><span class="attr">        testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line"><span class="attr">        filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">        <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">        <span class="comment">#connectionProperties.druid.stat.mergeSql: true</span></span><br><span class="line">        <span class="comment">#connectionProperties.druid.stat.slowSqlMillis: 5000</span></span><br><span class="line">        <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br><span class="line">        <span class="comment">#useGlobalDataSourceStat: true</span></span><br><span class="line">        <span class="comment">#default-auto-commit: true 默认</span></span><br><span class="line">        <span class="comment">#default-auto-commit: false</span></span><br><span class="line"><span class="attr">      two:</span> <span class="comment">#数据源2</span></span><br><span class="line"><span class="attr">        driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">jdbc:mysql://116.62.14.208:3306/db_account?useUnicode=true&amp;amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">        username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">        password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="comment">#初始化时建立物理连接的个数</span></span><br><span class="line"><span class="attr">        initialSize:</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#池中最大连接数</span></span><br><span class="line"><span class="attr">        maxActive:</span> <span class="number">20</span></span><br><span class="line">        <span class="comment">#最小空闲连接</span></span><br><span class="line"><span class="attr">        minIdle:</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#获取连接时最大等待时间，单位毫秒</span></span><br><span class="line"><span class="attr">        maxWait:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment">#有两个含义：</span></span><br><span class="line">        <span class="comment">#1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span></span><br><span class="line">        <span class="comment">#2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</span></span><br><span class="line"><span class="attr">        timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment">#连接保持空闲而不被驱逐的最小时间，单位是毫秒</span></span><br><span class="line"><span class="attr">        minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">        <span class="comment">#使用该SQL语句检查链接是否可用。如果validationQuery=null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。</span></span><br><span class="line"><span class="attr">        validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">        <span class="comment">#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line"><span class="attr">        testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span></span><br><span class="line"><span class="attr">        testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment">#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span></span><br><span class="line"><span class="attr">        testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line"><span class="attr">        filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">        <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">        <span class="comment">#connectionProperties.druid.stat.mergeSql: true</span></span><br><span class="line">        <span class="comment">#connectionProperties.druid.stat.slowSqlMillis: 5000</span></span><br><span class="line">        <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br><span class="line">        <span class="comment">#useGlobalDataSourceStat: true</span></span><br><span class="line">        <span class="comment">#default-auto-commit: true 默认</span></span><br><span class="line">        <span class="comment">#default-auto-commit: false</span></span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(&#123;<span class="string">"com.example.atomikos.db1.dao"</span>,<span class="string">"com.example.atomikos.db2.dao"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomikosApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AtomikosApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第一个数据源配置Properties"><a href="#第一个数据源配置Properties" class="headerlink" title="第一个数据源配置Properties"></a>第一个数据源配置Properties</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Data注解 提供类所有属性的 get 和 set 方法，此外还提供了equals、canEqual、hashCode、toString 方法。</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.druid.one"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneDataSourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer initialSize;</span><br><span class="line">    <span class="keyword">private</span> Integer maxActive;</span><br><span class="line">    <span class="keyword">private</span> Integer minIdle;</span><br><span class="line">    <span class="keyword">private</span> Integer maxWait;</span><br><span class="line">    <span class="keyword">private</span> Integer timeBetweenEvictionRunsMillis;</span><br><span class="line">    <span class="keyword">private</span> Integer minEvictableIdleTimeMillis;</span><br><span class="line">    <span class="keyword">private</span> String validationQuery;</span><br><span class="line">    <span class="keyword">private</span> Boolean testWhileIdle;</span><br><span class="line">    <span class="keyword">private</span> Boolean testOnBorrow;</span><br><span class="line">    <span class="keyword">private</span> Boolean testOnReturn;</span><br><span class="line">    <span class="keyword">private</span> String filters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二个数据源配置Properties"><a href="#第二个数据源配置Properties" class="headerlink" title="第二个数据源配置Properties"></a>第二个数据源配置Properties</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.druid.two"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoDataSourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer initialSize;</span><br><span class="line">    <span class="keyword">private</span> Integer maxActive;</span><br><span class="line">    <span class="keyword">private</span> Integer minIdle;</span><br><span class="line">    <span class="keyword">private</span> Integer maxWait;</span><br><span class="line">    <span class="keyword">private</span> Integer timeBetweenEvictionRunsMillis;</span><br><span class="line">    <span class="keyword">private</span> Integer minEvictableIdleTimeMillis;</span><br><span class="line">    <span class="keyword">private</span> String validationQuery;</span><br><span class="line">    <span class="keyword">private</span> Boolean testWhileIdle;</span><br><span class="line">    <span class="keyword">private</span> Boolean testOnBorrow;</span><br><span class="line">    <span class="keyword">private</span> Boolean testOnReturn;</span><br><span class="line">    <span class="keyword">private</span> String filters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第一个数据源配置"><a href="#第一个数据源配置" class="headerlink" title="第一个数据源配置"></a>第一个数据源配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.xa.DruidXADataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jta.atomikos.AtomikosDataSourceBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//这里要指明这个数据适用于哪些mapper，和这个数据源的sqlsessionFactory</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.atomikos.db1.dao"</span>, sqlSessionFactoryRef = <span class="string">"oneSqlSessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneDataSourceConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> OneDataSourceProperties oneDataSourceProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置第一个数据源</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"oneDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">oneDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里datasource要使用阿里的支持XA的DruidXADataSource</span></span><br><span class="line">        DruidXADataSource datasource = <span class="keyword">new</span> DruidXADataSource();</span><br><span class="line">        BeanUtils.copyProperties(oneDataSourceProperties,datasource);</span><br><span class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">        xaDataSource.setXaDataSource(datasource);</span><br><span class="line">        xaDataSource.setUniqueResourceName(<span class="string">"oneDataSource"</span>);</span><br><span class="line">        <span class="keyword">return</span> xaDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置第一个sqlsessionFactory</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"oneSqlSessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">oneSqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"oneDataSource"</span>)</span> DataSource oneDataSource)</span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(oneDataSource);</span><br><span class="line">        ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">bean.setMapperLocations(resolver.getResources(<span class="string">"classpath:mapper/user/*.xml"</span>));</span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二个数据源配置"><a href="#第二个数据源配置" class="headerlink" title="第二个数据源配置"></a>第二个数据源配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.xa.DruidXADataSource;</span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.config.TwoDataSourceProperties;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jta.atomikos.AtomikosDataSourceBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.atomikos.db2.dao"</span>, sqlSessionFactoryRef = <span class="string">"twoSqlSessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoDataSourceConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> TwoDataSourceProperties twoDataSourceProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"twoDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">twoDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidXADataSource datasource = <span class="keyword">new</span> DruidXADataSource();</span><br><span class="line">        BeanUtils.copyProperties(twoDataSourceProperties,datasource);</span><br><span class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">        xaDataSource.setXaDataSource(datasource);</span><br><span class="line">        xaDataSource.setUniqueResourceName(<span class="string">"twoDataSource"</span>);</span><br><span class="line">        <span class="keyword">return</span> xaDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"twoSqlSessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">twoSqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"twoDataSource"</span>)</span> DataSource twoDataSource)</span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(twoDataSource);</span><br><span class="line">        ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        bean.setMapperLocations(resolver.getResources(<span class="string">"classpath:mapper/account/*.xml"</span>));</span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service层使用事务回滚演示"><a href="#service层使用事务回滚演示" class="headerlink" title="service层使用事务回滚演示"></a>service层使用事务回滚演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.db1.service.user;</span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.db1.dao.user.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.db1.model.user.User;</span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.db2.model.account.Account;</span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.db2.service.account.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> javax.transaction.Transactional;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@ClassName</span>: UserService</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> tangliangdong</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2019-12-6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---------增删改查基础部分S--------</span></span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">save</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testAtomikos</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(name);</span><br><span class="line">        accountService.save(account);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(name);</span><br><span class="line">        save(user);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"done"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意@Transactional 引入的包是<code>javax.transaction.Transactional</code></p></blockquote><p>源码地址 <a href="https://github.com/tangliangdong/springboot-atomikos" target="_blank" rel="noopener">springboot-atomikos</a></p><p>参考自：<a href="https://blog.csdn.net/jy02268879/article/details/84398657" target="_blank" rel="noopener">【十九】Spring Boot之分布式事务(JTA、Atomikos、Druid、Mybatis)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;场景：现有两个不同的数据库，一个叫db_user，一个叫db_account。一个操作，要同时更新db_user的user表和db_account的account表。失败，则两个表一起回滚。&lt;/p&gt;
    
    </summary>
    
      <category term="Learn" scheme="http://zhizhi.tangliangdong.me/categories/Learn/"/>
    
    
      <category term="springboot" scheme="http://zhizhi.tangliangdong.me/tags/springboot/"/>
    
      <category term="atomikos" scheme="http://zhizhi.tangliangdong.me/tags/atomikos/"/>
    
  </entry>
  
  <entry>
    <title>java8 stream流</title>
    <link href="http://zhizhi.tangliangdong.me/2019/11/21/2019-11-21-java8-features/"/>
    <id>http://zhizhi.tangliangdong.me/2019/11/21/2019-11-21-java8-features/</id>
    <published>2019-11-21T01:33:59.000Z</published>
    <updated>2019-11-22T09:34:52.003Z</updated>
    
    <content type="html"><![CDATA[<p>java8新增了很多新的特性，值得去学习下。</p><p>新增加的Stream API (<strong>java.util.stream</strong>)引入了在Java里可以工作的函数式编程。这是目前为止对java库最大的一次功能添加，希望程序员通过编写有效、整洁和简明的代码，能够大大提高生产率。虽然效率没有简单for循环那么快，但是依旧值得我们去学习。 </p><a id="more"></a><blockquote><p>回顾编程的发展历史，我们不难发现一个规律，那就是先是从最初的C/C++演变到Java/.net，这是编程界的一大进步，因为我们不再关注于指针操作，比如在java中JVM虚拟机已经帮我们完成了相应的操作，由于这一进步，这付出的代价是执行效率会降低，但是带来的好处就在于加快了编程开发的速度。</p><p>当编程由Java/.net演变到JavaScript/PHP/Kotlin，这又是编程界的另一大进步，这意味着我们在编写程序时没有必要再关注于数据类型，而该数据类型是由相应的语言在运行时确定，这样，这又一次降低了程序的运行速度，但是相应的又提升了代码编写的效率，因而通过回顾历史我们不难得出如下结论：</p><p>在编写代码时，<em>一定要以最简洁为原则</em>，毕竟运行程序的硬件成本会随着时间的推移在不断降低，而<strong>程序员的薪资则不会</strong>。</p></blockquote><p>参考自 <a href="https://blog.csdn.net/zzy1078689276/article/details/79430772" target="_blank" rel="noopener">for-forEach-stream三种遍历方法执行效率比较与选用思考</a></p><p><img src="1.png" alt="java.util.stream"></p><p> 从上图中可以看见stream包中的接口比较多，类和枚举比较少。我们先来看接口： </p><p><img src="2.png" alt="Stream"></p><p>DoubleStream，IntStream,LongStream，Stream都继承于BaseStream接口。并且它们都有各自的Builder接口：DoubleStream.Builder，IntStream.Builder，LongStream.Builder，Stream.Builder。剩下就只有Collector接口，Collectors，StreamSupport类，Collector,Characteristics枚举。</p><h1 id="Stream接口"><a href="#Stream接口" class="headerlink" title="Stream接口"></a>Stream接口</h1><p>Stream接口是一个泛型接口，而DoubleStream,IntStream,LongStream只不过是对double,int,long的包装而已，所以我们弄懂Stream，其他的接口也都大同小异。 </p><p>范例类：<strong>学生成绩类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grade</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String student;</span><br><span class="line">    <span class="keyword">public</span> String course;</span><br><span class="line">    <span class="keyword">public</span> Integer score;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Grade</span><span class="params">(String student, String course, Integer score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.student = student;</span><br><span class="line">        <span class="keyword">this</span>.course = course;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="forEach-Consumer-lt-super-T-gt-action"><a href="#forEach-Consumer-lt-super-T-gt-action" class="headerlink" title="forEach(Consumer&lt;? super T&gt; action)"></a>forEach(Consumer&lt;? super T&gt; action)</h2><p>forEach接收一个Consumer接口，该接口只接收一个参数，没有返回值。</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"Hello"</span>, <span class="string">"World"</span>, <span class="string">"!!!"</span>);</span><br><span class="line">stream.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>System.out.println方法我们都很熟悉了，它接收一个参数，并且在控制台打印出来。这正好符合Consumer接口，所以这里输出的结果是 ： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">!!!</span><br></pre></td></tr></table></figure><h2 id="forEachOrdered-Consumer-lt-super-T-gt-action"><a href="#forEachOrdered-Consumer-lt-super-T-gt-action" class="headerlink" title="forEachOrdered(Consumer&lt;? super T&gt; action)"></a>forEachOrdered(Consumer&lt;? super T&gt; action)</h2><p>forEachOrdered 表示严格按照顺序取数据 ，并且主要用于 parallelStream 流并行处理（并行处理可能会导致结果无序）</p><h2 id="peek-Consumer-lt-super-T-gt-action"><a href="#peek-Consumer-lt-super-T-gt-action" class="headerlink" title="peek(Consumer&lt;? super T&gt; action)"></a>peek(Consumer&lt;? super T&gt; action)</h2><p>peek方法也是接收一个Consumer功能型接口，它与forEach的区别就是它会返回Stream接口，也就是说forEach是一个Terminal操作，而peek是一个Intermediate操作，forEach完了以后Stream就消费完了，不能继续再使用，而peek还可以继续使用。</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"Hello"</span>, <span class="string">"World"</span>, <span class="string">"!!!"</span>);</span><br><span class="line">stream.peek(System.out::println).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p> 输出结果: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I</span><br><span class="line">I</span><br><span class="line">love</span><br><span class="line">love</span><br><span class="line">you</span><br><span class="line">you</span><br></pre></td></tr></table></figure><p>因为peek是一个Intermediate操作，它并不会马上执行，当forEach的时候才会把peek和forEach一起执行，来提高效率，所以等于是每个stream元素执行两次打印操作，再执行下一个元素。</p><h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h2><p>将此流中的元素根据自然顺序排序，</p><p><code>sorted(Comparator&lt;? super T&gt; comparator)</code></p><p>sorted方法还有一个重载方法，可以传入一个Comparator，这样就可以根据Comparator来排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Grade grade1 = <span class="keyword">new</span> Grade(<span class="string">"张三"</span>, <span class="string">"英语"</span>, <span class="number">99</span>);</span><br><span class="line">Grade grade2 = <span class="keyword">new</span> Grade(<span class="string">"张三"</span>, <span class="string">"数学"</span>, <span class="number">59</span>);</span><br><span class="line">Grade grade3 = <span class="keyword">new</span> Grade(<span class="string">"张三"</span>, <span class="string">"计算机"</span>, <span class="number">67</span>);</span><br><span class="line">Grade grade4 = <span class="keyword">new</span> Grade(<span class="string">"李四"</span>, <span class="string">"英语"</span>, <span class="number">20</span>);</span><br><span class="line">Grade grade5 = <span class="keyword">new</span> Grade(<span class="string">"李四"</span>, <span class="string">"英语"</span>, <span class="number">80</span>);</span><br><span class="line">Grade grade6 = <span class="keyword">new</span> Grade(<span class="string">"王五"</span>, <span class="string">"英语"</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Grade&gt; list = Arrays.asList(grade1, grade2, grade3, grade4, grade5, grade6);</span><br><span class="line"><span class="comment">// 根据成绩从高到低进行排序</span></span><br><span class="line">list.stream().sorted(Comparator.comparing(</span><br><span class="line">    Grade::getScore, Integer::compareTo).reversed())</span><br><span class="line">    .forEach(System.out::println);</span><br></pre></td></tr></table></figure><p> 自然序逆序元素，使用<code>Comparator</code> 提供的<code>reverseOrder()</code> 方法  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().sorted(Comparator.reverseOrder())</span><br></pre></td></tr></table></figure><h2 id="map-Function-lt-super-T-extends-R-gt-mapper"><a href="#map-Function-lt-super-T-extends-R-gt-mapper" class="headerlink" title="map(Function&lt;? super T, ? extends R&gt; mapper)"></a>map(Function&lt;? super T, ? extends R&gt; mapper)</h2><p>map方法接收一个功能型接口，功能型接口接收一个参数，返回一个值。map用途是将旧数据转换后变为新数据，是一种1：1的映射，每个输入元素按照规则转换成另一个元素。该方法是Intermediate操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>);</span><br><span class="line">stream.map(String::toUpperCase).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="flatMap-Function-lt-super-T-extends-Stream-lt-extends-R-gt-gt-mapper"><a href="#flatMap-Function-lt-super-T-extends-Stream-lt-extends-R-gt-gt-mapper" class="headerlink" title="flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper)"></a>flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper)</h2><p> flatMap从结构上来看跟map差不多，主要是可以用来将stream层级扁平化。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.of(</span><br><span class="line">    Arrays.asList(<span class="number">1</span>),</span><br><span class="line">    Arrays.asList(<span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">    Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">);</span><br><span class="line">inputStream.flatMap((n)-&gt;n.stream()).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="collect-Collector-lt-super-T-A-R-gt-collector"><a href="#collect-Collector-lt-super-T-A-R-gt-collector" class="headerlink" title="collect(Collector&lt;? super T,A,R&gt; collector)"></a>collect(Collector&lt;? super T,A,R&gt; collector)</h2><p>collect方法跟reduce方法功能很类似，都是聚合方法。不同的是，reduce方法在操作每一个元素时总创建一个新，而collect方法只是修改现存的值，而不是创建一个新值。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">collect(Collector&lt;? <span class="keyword">super</span> T,A,R&gt; collector)</span><br><span class="line">collect(Supplier&lt;R&gt; supplier, BiConsumer&lt;R,? <span class="keyword">super</span> T&gt; accumulator, BiConsumer&lt;R,R&gt; combiner)</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据科目，将学生的成绩分类</span></span><br><span class="line">Map&lt;String, List&lt;Grade&gt;&gt; list = list.stream().collect(Collectors.groupingBy(Grade::getCourse));</span><br></pre></td></tr></table></figure><h2 id="reduce-BinaryOperator-accumulator"><a href="#reduce-BinaryOperator-accumulator" class="headerlink" title="reduce(BinaryOperator accumulator)"></a>reduce(BinaryOperator<t> accumulator)</t></h2><p>reduce提供了三种重载方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Optional&lt;T&gt; <span class="title">reduce</span><span class="params">(BinaryOperator&lt;T&gt; accumulator)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//BinaryOperator 二元操作符，有类型相同的两个参数和一个返回值</span></span></span><br><span class="line"><span class="function">T <span class="title">reduce</span><span class="params">(T identity, BinaryOperator&lt;T&gt; accumulator)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// BiFunction 接收两个参数，有一个返回值</span></span></span><br><span class="line"><span class="function">&lt;U&gt; U <span class="title">reduce</span><span class="params">(U identity, BiFunction&lt;U,? <span class="keyword">super</span> T,U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</span></span></span><br></pre></td></tr></table></figure><p>若是集合中元素类型是对象，那reduce操作可能会影响集合中对象的值。</p><h2 id="concat-Stream-lt-extends-T-gt-a-Stream-lt-extends-T-gt-b"><a href="#concat-Stream-lt-extends-T-gt-a-Stream-lt-extends-T-gt-b" class="headerlink" title="concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)"></a>concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</h2><p>该方法是Stream的静态方法，用于组合两个Stream生成新的Stream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.concat(Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), Stream.of(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="of-T-t"><a href="#of-T-t" class="headerlink" title="of(T t)"></a>of(T t)</h2><p>用于构造Stream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Stream&lt;T&gt; <span class="title">of</span><span class="params">(T t)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T&gt; Stream&lt;T&gt; <span class="title">of</span><span class="params">(T... values)</span></span></span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="generate-Supplier-s"><a href="#generate-Supplier-s" class="headerlink" title="generate(Supplier s)"></a>generate(Supplier<t> s)</t></h2><p>用于生成一个无限长度的Stream，接收只有一个参数，没有返回值的Supplier函数</p><blockquote><p>这个无限长度 Stream是懒加载，一般这种无限长度的Stream都会配合Stream的limit()方法来用。</p></blockquote><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取10个随机数的Stream流</span></span><br><span class="line">Stream.generate(() -&gt; Math.random()).limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="builder"><a href="#builder" class="headerlink" title="builder()"></a>builder()</h2><p> 当使用builder()的时候,要声明希望存放的元素类型,此方法就会创建一个流对象 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.&lt;String&gt;builder().add(<span class="string">"a"</span>).add(<span class="string">"b"</span>).add(<span class="string">"c"</span>).build();</span><br></pre></td></tr></table></figure><h2 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h2><p>empty()方法用来创建一个空的流</p><blockquote><p>这个方法经常被用在创建一个不含元素的空的流进行返回,避免返回null </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Stream&lt;String&gt; <span class="title">streamOf</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list == <span class="keyword">null</span> || list.isEmpty() ? Stream.empty() : list.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="filter-Predicate-lt-super-T-gt-predicate"><a href="#filter-Predicate-lt-super-T-gt-predicate" class="headerlink" title="filter(Predicate&lt;? super T&gt; predicate )"></a>filter(Predicate&lt;? super T&gt; predicate )</h2><p>filter方法接收一个断言型的接口，断言型接口接收一个参数，返回一个<strong>Boolean</strong>类型。filter 方法根据某个条件对stream元素进行过滤，通过过滤的元素将生成一个新的stream。 </p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过滤掉小于等于2的数字</span></span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>).filter((x) -&gt; x &gt; <span class="number">2</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="min-max-Comparator-lt-super-T-gt-comparator"><a href="#min-max-Comparator-lt-super-T-gt-comparator" class="headerlink" title="min/max(Comparator&lt;? super T&gt; comparator)"></a>min/max(Comparator&lt;? super T&gt; comparator)</h2><p>Stream接口中的这两个方法接收一个Comparator参数，通过Comparator返回此流最小或者最大的元素。IntStream,DoubleStream.LongStream则不需要传入Comparator。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取成绩最高的学生对象</span></span><br><span class="line">list.stream().max(Comparator.comparing(Grade::getScore));</span><br><span class="line"><span class="comment">// 获取最高的数字</span></span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>).max(Integer::compareTo);</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h2><p> 返回此流元素的数量。 </p><h2 id="distinct"><a href="#distinct" class="headerlink" title="distinct()"></a>distinct()</h2><p> 消除重复元素后返回一个新Stream。 </p><h2 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch()"></a>allMatch()</h2><p> Stream中的所有元素满足传入的断言型接口，就返回true。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>).allMatch( x -&gt; x == <span class="number">1</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch()"></a>anyMatch()</h2><p> Stream中的只要有一个元素满足传入的断言型接口，就返回true。 </p><h2 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h2><p> Stream中没有元素满足传入的断言型接口，就返回true。 </p><h2 id="findAny-findFirst"><a href="#findAny-findFirst" class="headerlink" title="findAny()  / findFirst()"></a>findAny()  / findFirst()</h2><ul><li><p>findAny() 在Stream流中查找到任何一个就返回 Optional </p></li><li><p>findFirst() 在Stream流中查找到任何一个就返回 Optional </p></li></ul><blockquote><p>findAny() 在串行情况下会返回第一个，和findFirst() 结果一致，而在并行的情况下就不能保证是第一个</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">list.parallelStream().findAny(); <span class="comment">// Optional[6]</span></span><br><span class="line">list.parallelStream().findFirst(); <span class="comment">// Optional[1]</span></span><br></pre></td></tr></table></figure><h2 id="skip-long-n"><a href="#skip-long-n" class="headerlink" title="skip(long n)"></a>skip(long n)</h2><p> 接收一个long类型的参数，表示跳过几个元素。 </p><h2 id="limit-long-maxSize"><a href="#limit-long-maxSize" class="headerlink" title="limit(long maxSize)"></a>limit(long maxSize)</h2><p> 该方法接收一个long型参数，表示一共返回几个元素。 </p><h2 id="toArray"><a href="#toArray" class="headerlink" title="toArray()"></a>toArray()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">toArray()</span><br><span class="line"><span class="comment">// 接收一个int类型的参数，和一个泛型返回值</span></span><br><span class="line">toArray(IntFunction&lt;A[]&gt; generator)</span><br></pre></td></tr></table></figure><blockquote><p>参考自 <a href="https://www.jianshu.com/p/b1b7e334ff79" target="_blank" rel="noopener">JAVA8你只需要知道这些（3）</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java8新增了很多新的特性，值得去学习下。&lt;/p&gt;
&lt;p&gt;新增加的Stream API (&lt;strong&gt;java.util.stream&lt;/strong&gt;)引入了在Java里可以工作的函数式编程。这是目前为止对java库最大的一次功能添加，希望程序员通过编写有效、整洁和简明的代码，能够大大提高生产率。虽然效率没有简单for循环那么快，但是依旧值得我们去学习。 &lt;/p&gt;
    
    </summary>
    
      <category term="Learn" scheme="http://zhizhi.tangliangdong.me/categories/Learn/"/>
    
    
      <category term="git" scheme="http://zhizhi.tangliangdong.me/tags/git/"/>
    
      <category term="备忘录" scheme="http://zhizhi.tangliangdong.me/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>jenkins持续集成docker部署</title>
    <link href="http://zhizhi.tangliangdong.me/2019/11/20/2019-11-20-jenkins-docker-deploy/"/>
    <id>http://zhizhi.tangliangdong.me/2019/11/20/2019-11-20-jenkins-docker-deploy/</id>
    <published>2019-11-20T03:09:49.000Z</published>
    <updated>2019-11-20T03:32:34.935Z</updated>
    
    <content type="html"><![CDATA[<p>每次都手动打包springboot项目，部署war包到docker中，显然效率太低了，因此可以使用jenkins实现持续集成部署。</p><a id="more"></a><p>创建一个maven项目，使用git进行源码管理，可以配置<code>webhook</code>，也可以手动构建项目</p><h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><p>构建中使用Maven进行项目的打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean package -pl corp -P dev</span><br></pre></td></tr></table></figure><ul><li>-pl：指定打包的子模块</li><li>-P：指定打包的测试环境（<font color="red">必须是大写</font>）</li></ul><p><img src="1.png" alt="jenkins 项目配置"></p><h3 id="Post-Steps"><a href="#Post-Steps" class="headerlink" title="Post Steps"></a><strong>Post Steps</strong></h3><p>选择执行shell命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建挂载的目录</span></span><br><span class="line">mkdir -p /mnt/service/intelligentization/corp/</span><br><span class="line"><span class="comment"># 清空挂载目录</span></span><br><span class="line">rm -rf /mnt/service/intelligentization/corp/*</span><br><span class="line"><span class="comment"># 将jenkins项目打包的项目war包拷贝到docker的挂载目录</span></span><br><span class="line">cp ./corp/target/ROOT.war /mnt/service/intelligentization/corp/</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment"># 防止因为代码出错，导致命令执行中断。停止容器</span></span><br><span class="line"><span class="comment"># try</span></span><br><span class="line">docker stop intelligentization-corp</span><br><span class="line">docker rm intelligentization-corp</span><br><span class="line">&#125; || &#123;</span><br><span class="line"><span class="comment"># catch</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"失败"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 docker 容器，并指定挂载目录和映射端口</span></span><br><span class="line">docker run -itd --privileged=<span class="literal">true</span> -v /mnt/service/intelligentization/corp/:/usr/<span class="built_in">local</span>/tomcat/webapps/ -p 9998:8080 --name intelligentization-corp tomcat:8</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --privileged=<span class="literal">true</span> -v /mnt/service/intelligentization/corp/:/usr/<span class="built_in">local</span>/tomcat/webapps/ -p 9998:8080 --name intelligentization-corp tomcat:8</span><br></pre></td></tr></table></figure><ul><li><code>-v /mnt/service/intelligentization/corp/:/usr/local/tomcat/webapps/</code> 前一个是挂载的本机的目录，后一个是docker容器的目录，docker会将挂载目录的内容拷贝到docker对应的目录，而且tomcat会热部署，一旦挂载的war包发生变动，tomcat就会自动重新部署</li><li><code>-p 9998:8080</code> 前一个9998是映射的本机端口，一个8080是docker容器的端口</li></ul><h3 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h3><p>​    因为要部署的war包并不在docker容器中，而是通过挂载的形式，那每次构建之后新建的docker容器其实是一样的，所以在第一次新建容器之后，其实并不需要每次都去重新构建一次容器，只需要更新docker挂载目录的内容即可。</p><p>​    因此，之前执行的shell命令可以简化一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建挂载的目录</span></span><br><span class="line">mkdir -p /mnt/service/intelligentization/corp/</span><br><span class="line"><span class="comment"># 清空挂载目录</span></span><br><span class="line">rm -rf /mnt/service/intelligentization/corp/*</span><br><span class="line"><span class="comment"># 将jenkins项目打包的项目war包拷贝到docker的挂载目录</span></span><br><span class="line">cp ./corp/target/ROOT.war /mnt/service/intelligentization/corp/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次都手动打包springboot项目，部署war包到docker中，显然效率太低了，因此可以使用jenkins实现持续集成部署。&lt;/p&gt;
    
    </summary>
    
      <category term="Learn" scheme="http://zhizhi.tangliangdong.me/categories/Learn/"/>
    
    
      <category term="docker" scheme="http://zhizhi.tangliangdong.me/tags/docker/"/>
    
      <category term="jenkins" scheme="http://zhizhi.tangliangdong.me/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>jenkins执行脚本权限不足</title>
    <link href="http://zhizhi.tangliangdong.me/2019/11/19/2019-11-19-jenkins-user-permissions/"/>
    <id>http://zhizhi.tangliangdong.me/2019/11/19/2019-11-19-jenkins-user-permissions/</id>
    <published>2019-11-19T06:31:20.000Z</published>
    <updated>2019-11-19T06:54:08.495Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> jenkins默认用户为jenkins , 普通用户执行shell脚本,会缺失某些权限 </p></blockquote><a id="more"></a><h3 id="打开Jenkins的配置文件"><a href="#打开Jenkins的配置文件" class="headerlink" title="打开Jenkins的配置文件"></a>打开Jenkins的配置文件</h3><p>将Jenkins的执行用户修改为 <code>root</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure><h3 id="修改jenkins用户为root，"><a href="#修改jenkins用户为root，" class="headerlink" title="修改jenkins用户为root，"></a>修改jenkins用户为<code>root</code>，</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JENKINS_USER=<span class="string">"root"</span></span><br></pre></td></tr></table></figure><h3 id="修改Jenkins相关文件夹用户权限"><a href="#修改Jenkins相关文件夹用户权限" class="headerlink" title="修改Jenkins相关文件夹用户权限"></a>修改Jenkins相关文件夹用户权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown -R root:root /var/lib/jenkins</span><br><span class="line">chown -R root:root /var/cache/jenkins</span><br><span class="line">chown -R root:root /var/<span class="built_in">log</span>/jenkins</span><br></pre></td></tr></table></figure><h3 id="重启Jenkins"><a href="#重启Jenkins" class="headerlink" title="重启Jenkins"></a>重启Jenkins</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service jenkins restart</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure><h3 id="查看Jenkins进程所属用户"><a href="#查看Jenkins进程所属用户" class="headerlink" title="查看Jenkins进程所属用户"></a>查看Jenkins进程所属用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep jenkins</span><br></pre></td></tr></table></figure><p>若是显示进程的用户是root，则表示修改成功。</p><p><img src="1.png" alt="ps -ef | grep jenkins"></p><p>转载自 <a href="https://www.blog.lijinghua.club/article/jenkins_权限不足" target="_blank" rel="noopener">Jenkins执行脚本报权限不足错误</a></p>]]></content>
    
    <summary type="html">
    
      jenkins项目构建时执行的shell总会遇到权限不足的问题
    
    </summary>
    
      <category term="Learn" scheme="http://zhizhi.tangliangdong.me/categories/Learn/"/>
    
    
      <category term="jenkins" scheme="http://zhizhi.tangliangdong.me/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>tomcat8登陆用户配置</title>
    <link href="http://zhizhi.tangliangdong.me/2019/11/18/2019-11-18-tomcat8-login-configuration/"/>
    <id>http://zhizhi.tangliangdong.me/2019/11/18/2019-11-18-tomcat8-login-configuration/</id>
    <published>2019-11-18T03:51:34.000Z</published>
    <updated>2019-11-18T06:40:01.573Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="tomcat-users-xml"><a href="#tomcat-users-xml" class="headerlink" title="tomcat-users.xml"></a>tomcat-users.xml</h3><p> 在<strong>Tomcat</strong>根目录下找到 <code>conf/tomcat-users.xml</code>文件，在<code>&lt;tomcat-users&gt;&lt;/tomcat-user&gt;</code>标签中添加如下内容 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-jmx"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-status"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">roles</span>=<span class="string">"manager-gui,manager-script,manager-jmx,manager-status"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="context-xml"><a href="#context-xml" class="headerlink" title="context.xml"></a>context.xml</h3><p>还需要修改<strong>Tomcat</strong> 根目录下的 <code>webapps/manager/META_INF/context.xml</code>文件</p><p>将其中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.RemoteAddrValve"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">allow</span>=<span class="string">"127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>注释掉就行了。 因为默认tomcat不可以通过外部ip访问管理界面。一定要启动Tomcat，不然等构建等时候会报拒绝连接 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment">  contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment">  this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment">  The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment">  (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment">  the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">antiResourceLocking</span>=<span class="string">"false"</span> <span class="attr">privileged</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- &lt;Valve className="org.apache.catalina.valves.RemoteAddrValve"</span></span><br><span class="line"><span class="comment">         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" /&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">sessionAttributeValueClassNameFilter</span>=<span class="string">"java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;tomcat-users-xml&quot;&gt;&lt;a href=&quot;#tomcat-users-xml&quot; class=&quot;headerlink&quot; title=&quot;tomcat-users.xml&quot;&gt;&lt;/a&gt;tomcat-users.xml&lt;/h3
      
    
    </summary>
    
      <category term="Learn" scheme="http://zhizhi.tangliangdong.me/categories/Learn/"/>
    
    
      <category term="tomcat8" scheme="http://zhizhi.tangliangdong.me/tags/tomcat8/"/>
    
  </entry>
  
  <entry>
    <title>jenkins配置构建失败邮件通知</title>
    <link href="http://zhizhi.tangliangdong.me/2019/11/14/2019-11-14-jenkins-email-notification/"/>
    <id>http://zhizhi.tangliangdong.me/2019/11/14/2019-11-14-jenkins-email-notification/</id>
    <published>2019-11-14T06:42:26.000Z</published>
    <updated>2019-11-18T03:38:34.326Z</updated>
    
    <content type="html"><![CDATA[<p>jenkins自动化构建邮件通知开发者功能配置</p><a id="more"></a><h2 id="jenkins系统配置"><a href="#jenkins系统配置" class="headerlink" title="jenkins系统配置"></a>jenkins系统配置</h2><p>先进入 <code>Manage Jenkins --&gt; Configure System</code></p><p><img src="1.png" alt="Configure System"></p><h3 id="Jenkins-Location-gt-系统管理员邮件地址"><a href="#Jenkins-Location-gt-系统管理员邮件地址" class="headerlink" title="Jenkins Location  -&gt;  系统管理员邮件地址"></a>Jenkins Location  -&gt;  系统管理员邮件地址</h3><p>输入你的邮箱地址</p><p><img src="2.png" alt="系统管理员邮件地址"></p><hr><h3 id="Extended-E-mail-Notification-gt-Default-user-E-mail-suffix"><a href="#Extended-E-mail-Notification-gt-Default-user-E-mail-suffix" class="headerlink" title="Extended E-mail Notification -&gt;  Default user E-mail suffix"></a>Extended E-mail Notification -&gt;  Default user E-mail suffix</h3><p><img src="3.png" alt></p><hr><h3 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h3><p><img src="4.png" alt></p><ol><li>SMTP服务器地址需要去对应的邮箱中查看，并需同时开启邮箱的SMTP功能。见下方汇总</li><li>需开启SMTP认证，用户名就是邮箱号，密码需要去邮箱设置。</li><li>SMTP默认是465，也可以在邮箱设置SMTP服务的地方查看。</li><li>最后，可以通过发送测试邮件测试配置，如果出现如图中 <code>Email was successfully sent</code> 信息，则说明邮件通知功能配置成功。</li></ol><p>1、例如网易邮箱配置： <code>设置 -&gt; POP3/SMTP/IMAP</code></p><p><img src="5.png" alt="网易邮箱SMTP服务"></p><p>腾讯企业邮开启<strong>SMTP服务</strong>并查看SMTP服务器地址：<code>设置 -&gt; 收发信设置</code></p><p><img src="6.png" alt="腾讯企业邮SMTP服务"></p><p>可以看到邮箱SMTP服务的端口为465</p><p>2、网易邮箱设置客户端授权密码</p><p><img src="7.png" alt="网易邮箱客户端授权码"></p><p>开启客户端授权码并进行设置就行了，如果之前已经设置过，直接输入到jenkins中就行了。</p><p><strong>腾讯企业邮客户端授权密码</strong></p><p><img src="11.png" alt="腾讯企业邮客户端授权码"></p><p>开启安全登陆 -&gt; 生成客户端专用密码（需保存下来，只显示一次）</p><hr><h2 id="针对项目中进行邮件通知配置"><a href="#针对项目中进行邮件通知配置" class="headerlink" title="针对项目中进行邮件通知配置"></a>针对项目中进行邮件通知配置</h2><p>先新建一个项目</p><p><img src="8.png" alt></p><p>在配置项目信息的地方，其他都不用管，拉到页面的最底下，找到 <strong>构建后操作</strong>，点击 <strong>增加构建后的操作步骤</strong>，选择 <code>E-mail Notification</code></p><p><img src="9.png" alt></p><p>输入需要接受通知的邮箱账号</p><p><img src="10.png" alt></p><h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><p>点击 <code>Build now</code>，构建项目</p><p><img src="12.png" alt></p><p>当项目构建失败时，就会发送邮件到项目配置的邮箱地址。</p><p><img src="13.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jenkins自动化构建邮件通知开发者功能配置&lt;/p&gt;
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="jenkins" scheme="http://zhizhi.tangliangdong.me/tags/jenkins/"/>
    
      <category term="email" scheme="http://zhizhi.tangliangdong.me/tags/email/"/>
    
  </entry>
  
  <entry>
    <title>jenkins配置webhook自动拉取github打包</title>
    <link href="http://zhizhi.tangliangdong.me/2019/11/14/2019-11-14-jenkins-webhook/"/>
    <id>http://zhizhi.tangliangdong.me/2019/11/14/2019-11-14-jenkins-webhook/</id>
    <published>2019-11-14T06:25:24.000Z</published>
    <updated>2019-11-18T03:38:34.378Z</updated>
    
    <content type="html"><![CDATA[<p>当 <em>github</em> 上传代码后，主动通知 <strong>jenkins</strong> 去拉取代码，自动化构建项目。</p><a id="more"></a><h2 id="Github获取-Personal-access-tokens"><a href="#Github获取-Personal-access-tokens" class="headerlink" title="Github获取 Personal access tokens"></a>Github获取 Personal access tokens</h2><p><code>登陆github -&gt; settings -&gt; Developer settings -&gt; Personal access tokens</code></p><p><img src="20.png" alt="获取Personal access tokens`"></p><p>需要选上图中的两个复选框，这样Jenkins才能配置<code>github服务器</code></p><p><img src="21.png" alt></p><p>确认后生成的 token要保存起来，这个只会显示一次。</p><p>然后我们就可以去配置Jenkins的<code>github服务器</code>。</p><h2 id="jenkins-配置-Configure-System"><a href="#jenkins-配置-Configure-System" class="headerlink" title="jenkins 配置 Configure System"></a>jenkins 配置 Configure System</h2><p><img src="22.png" alt="Github服务器配置"></p><p>添加凭据</p><p><img src="23.png" alt></p><p>类型需要选择<code>Secret Text</code>，这里出现的 <strong>Secret</strong> 就是我们之前去github生成的 <code>Personal access tokens</code>，再写个描述，确认就ok了。</p><p>点击连接测试后，如果下方显示的是<code>Credentials verified for user tangliangdong, rate limit: 4994</code>表明连接成功了。</p><h2 id="配置Maven项目"><a href="#配置Maven项目" class="headerlink" title="配置Maven项目"></a>配置Maven项目</h2><p>因为项目使用<code>pom.xml</code>文件构建的，我们就直接创建一个maven项目，选择 <code>构建一个maven项目</code> </p><p><img src="1.png" alt="my_second_github_job"></p><p>如果没有这个选项，则需要去<code>jenkins插件管理</code>中去安装一个 <code>Maven Integration插件</code>，然后重启jenkins就能使用了。</p><p><img src="2.png" alt=" 安装Maven Integration插件 "></p><p>接下来就要带着我们的 <strong>github仓库地址</strong> 到处粘贴了，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/tangliangdong/user-dev.git</span><br></pre></td></tr></table></figure><p><img src="3.png" alt="GitHub项目Url"></p><p><img src="4.png" alt="源码管理"></p><p> Credentials 需要github登陆的凭据。</p><p>源码库浏览器必须指定，输入的url还是github仓库地址，不带 <code>.git</code></p><p><img src="5.png" alt="添加凭据"></p><p><img src="6.png" alt="构建触发器 webhook"></p><p>当我们向<code>user-dev</code> 仓库提交代码后，github会主动通知我们的jenkins去拉取代码，进行一次构建。</p><p>在 <strong>构建环境</strong> 中 <code>Use secret text(s) or file(s)</code>，选择的就是之前添加过的 <code>Github access token</code></p><p><img src="7.png" alt=" Use secret text(s) or file(s) "></p><p>构建前执行 maven的命令 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean package -P <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><img src="8.png" alt=" Pre Steps "></p><p>构建失败后邮件通知。</p><p><img src="9.png" alt=" E-mail Notification "></p><h2 id="配置-Github-Webhook"><a href="#配置-Github-Webhook" class="headerlink" title="配置 Github Webhook"></a>配置 Github Webhook</h2><p><code>进入 Github项目Settings -&gt; Webhook</code>，添加项目的 Webhook</p><p><img src="10.png" alt></p><p>添加Jenkins的Webhook地址，因为这个是Github接收到提交的请求后，去通知Jenkins网站来拉取代码，因此这里的配置Jenkins代码肯定是要在公网能访问到的，但我当时是在我的树莓派上配置的，因此需要用诸如<strong>花生壳</strong>这类的内网映射工具来将本地的IP端口映射到公网上，才能让github访问到。webhook地址如下，直接在访问jenkins访问地址后面加上<code>/github-webhook</code>就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://2m7t216256.wicp.vip:12006/github-webhook/</span><br></pre></td></tr></table></figure><p><img src="11.png" alt></p><p>绿色表示可以使用了，</p><p><img src="12.png" alt></p><p>我们向 <code>user-dev</code> 提交代码，就能看到Jenkins在自动拉取代码进行构建了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当 &lt;em&gt;github&lt;/em&gt; 上传代码后，主动通知 &lt;strong&gt;jenkins&lt;/strong&gt; 去拉取代码，自动化构建项目。&lt;/p&gt;
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="jenkins" scheme="http://zhizhi.tangliangdong.me/tags/jenkins/"/>
    
      <category term="webhook" scheme="http://zhizhi.tangliangdong.me/tags/webhook/"/>
    
  </entry>
  
  <entry>
    <title>树莓派外接2560x1440 2k屏设置</title>
    <link href="http://zhizhi.tangliangdong.me/2019/11/14/2019-11-14-Raspbian-2k-resolution/"/>
    <id>http://zhizhi.tangliangdong.me/2019/11/14/2019-11-14-Raspbian-2k-resolution/</id>
    <published>2019-11-14T01:55:51.000Z</published>
    <updated>2019-11-18T03:38:34.320Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.raspberrypi.org/documentation/configuration/config-txt/" target="_blank" rel="noopener">官网的Raspbian系统 config.txt 配置详解</a></p></blockquote><p>烧录完系统，将tf卡插入到树莓派中，再启动设备。接入2k屏幕，显示的一直是黑屏，需要将系统的配置文件修改下。</p><h3 id="外接2k显示器设置"><a href="#外接2k显示器设置" class="headerlink" title="外接2k显示器设置"></a>外接2k显示器设置</h3><a id="more"></a><p><a href="https://www.raspberrypi.org/documentation/configuration/config-txt/video.md" target="_blank" rel="noopener">Raspbian 显示模式设置</a></p><p><img src="2.png" alt="video config"></p><p>在 <code>/boot/config.txt</code> 中添加2k分辨率的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">start_x=0</span><br><span class="line">hdmi_drive=1</span><br><span class="line">hdmi_group=2</span><br><span class="line">hdmi_mode=87</span><br><span class="line">hdmi_cvt=2560 1440 48</span><br><span class="line"></span><br><span class="line">// 下面可加不加</span><br><span class="line">framebuffer_width=2560</span><br><span class="line">framebuffer_height=1440</span><br><span class="line">max_framebuffer_width=2560</span><br><span class="line">max_framebuffer_height=1440</span><br></pre></td></tr></table></figure><blockquote><p> 最重要的就是hdmi_cvt的设置，其中48代表刷新频率，1440×2560的屏幕只支持48hz的如果设置其他的就不行 </p></blockquote><p><img src="1.png" alt="hdmi_cvt配置"></p><p>将卡插回到树莓派中，然后再启动树莓派，就可以显示在2k屏幕上了。</p><h3 id="树莓派开启ssh"><a href="#树莓派开启ssh" class="headerlink" title="树莓派开启ssh"></a>树莓派开启ssh</h3><p>在电脑上读取装有 <em>Raspbian</em> 系统的 <strong>tf</strong>卡后，在root盘目录下新建 <code>ssh</code>文件（<strong>不带后缀名</strong>）。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/configuration/config-txt/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网的Raspbian系统 config.txt 配置详解&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;烧录完系统，将tf卡插入到树莓派中，再启动设备。接入2k屏幕，显示的一直是黑屏，需要将系统的配置文件修改下。&lt;/p&gt;
&lt;h3 id=&quot;外接2k显示器设置&quot;&gt;&lt;a href=&quot;#外接2k显示器设置&quot; class=&quot;headerlink&quot; title=&quot;外接2k显示器设置&quot;&gt;&lt;/a&gt;外接2k显示器设置&lt;/h3&gt;
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="Raspbian" scheme="http://zhizhi.tangliangdong.me/tags/Raspbian/"/>
    
      <category term="ssh" scheme="http://zhizhi.tangliangdong.me/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>java8函数式编程</title>
    <link href="http://zhizhi.tangliangdong.me/2019/11/06/2019-11-6-jdk8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://zhizhi.tangliangdong.me/2019/11/06/2019-11-6-jdk8函数式编程/</id>
    <published>2019-11-06T02:12:06.000Z</published>
    <updated>2019-11-18T03:38:34.408Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> JDK中已有的一些接口本身就是函数式接口，如<code>Runnable</code>。 JDK 8中又增加了<code>java.util.function</code>包， 提供了常用的函数式接口。 </p></blockquote><a id="more"></a><h2 id="JDK-8之前已有的函数式接口"><a href="#JDK-8之前已有的函数式接口" class="headerlink" title="JDK 8之前已有的函数式接口"></a>JDK 8之前已有的函数式接口</h2><ul><li>java.lang.Runnable</li><li>java.util.concurrent.Callable</li><li>java.security.PrivilegedAction</li><li>java.util.Comparator</li><li>java.io.FileFilter</li><li>java.nio.file.PathMatcher</li><li>java.lang.reflect.InvocationHandler</li><li>java.beans.PropertyChangeListener</li><li>java.awt.event.ActionListener</li><li>javax.swing.event.ChangeListener</li></ul><h2 id="新定义的函数式接口"><a href="#新定义的函数式接口" class="headerlink" title="新定义的函数式接口"></a>新定义的函数式接口</h2><p> <code>java.util.function</code>中定义了几组类型的函数式接口以及针对基本数据类型的子接口。 </p><ul><li>Predicate – 传入一个参数，返回一个bool结果， 方法为<code>boolean test(T t)</code></li><li>Consumer – 传入一个参数，无返回值，纯消费。 方法为<code>void accept(T t)</code></li><li>Function – 传入一个参数，返回一个结果，方法为<code>R apply(T t)</code></li><li>Supplier – 无参数传入，返回一个结果，方法为<code>T get()</code></li><li>UnaryOperator – 一元操作符， 继承Function,传入参数的类型和返回类型相同。</li><li>BinaryOperator – 二元操作符， 传入的两个参数的类型和返回类型相同， 继承BiFunction</li></ul><hr><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只需注明传入参数的类型，返回值为Bool</span></span><br><span class="line">Predicate&lt;Integer&gt; fun1 = (x) -&gt; x &gt; <span class="number">1</span>; </span><br><span class="line">Boolean bool = fun1.test(<span class="number">2</span>);  <span class="comment">// bool = true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用大括号来包住一个代码块，不过需要使用return来确定最后的返回值</span></span><br><span class="line">Predicate&lt;Integer&gt; fun11 = (x) -&gt; &#123;</span><br><span class="line">    Integer sum = x * <span class="number">1000</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> sum &gt; <span class="number">2000</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Boolean bool1 = fun11.test(<span class="number">2</span>); <span class="comment">// bool1 = true</span></span><br></pre></td></tr></table></figure><p>Predicate 扩展的函数列表</p><table><thead><tr><th style="text-align:left">interface</th><th style="text-align:left">functional method</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Predicate<t></t></td><td style="text-align:left">boolean test(T t)</td><td style="text-align:left">接收一个泛型参数</td></tr><tr><td style="text-align:left">IntPredicate</td><td style="text-align:left">boolean test(int value)</td><td style="text-align:left">以下三个接口，接收指定类型的参数</td></tr><tr><td style="text-align:left">LongPredicate</td><td style="text-align:left">boolean test(long value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoublePredicate</td><td style="text-align:left">boolean test(double value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">BiPredicate&lt;T,U&gt;</td><td style="text-align:left">boolean test(T t, U u)</td><td style="text-align:left">接收两个泛型参数，分别为T，U</td></tr></tbody></table><hr><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需注明传入参数的类型，无返回值</span></span><br><span class="line">Consumer&lt;String&gt; fun2 = (x) -&gt; System.out.println(x);</span><br><span class="line">fun2.accept(<span class="string">"hello world"</span>); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>Consumer 扩展的函数列表</p><h4 id="接收一个参数"><a href="#接收一个参数" class="headerlink" title="接收一个参数"></a>接收一个参数</h4><table><thead><tr><th style="text-align:left"><strong>interface</strong></th><th style="text-align:left"><strong>functional method</strong></th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Consumer<t></t></td><td style="text-align:left">void accept(T t)</td><td style="text-align:left">接收一个泛型参数，无返回值</td></tr><tr><td style="text-align:left">IntConsumer</td><td style="text-align:left">void accept(int value)</td><td style="text-align:left">以下三个类，接收一个指定类型的参数</td></tr><tr><td style="text-align:left">LongConsumer</td><td style="text-align:left">void accept(long value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoubleConsumer</td><td style="text-align:left">void accept(double value)</td></tr></tbody></table><h4 id="接收两个参数"><a href="#接收两个参数" class="headerlink" title="接收两个参数"></a>接收两个参数</h4><table><thead><tr><th style="text-align:left">interface</th><th style="text-align:left">functional method</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">BiConsumer&lt;T, U&gt;</td><td style="text-align:left">void accept(T t, U u)</td><td style="text-align:left">接收两个泛型参数</td></tr><tr><td style="text-align:left">ObjIntConsumer<t></t></td><td style="text-align:left">void accept(T t, int value)</td><td style="text-align:left">以下三个类，接收一个泛型参数，一个指定类型的参数</td></tr><tr><td style="text-align:left">ObjLongConsumer<t></t></td><td style="text-align:left">void accept(T t, long value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ObjDoubleConsumer<t></t></td><td style="text-align:left">void accept(T t, double value)</td></tr></tbody></table><hr><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; fun3 = (x) -&gt; Integer.valueOf(x);</span><br><span class="line">Integer num = fun3.apply(<span class="string">"1024"</span>); <span class="comment">// num = 1024</span></span><br></pre></td></tr></table></figure><h4 id="接收单个参数"><a href="#接收单个参数" class="headerlink" title="接收单个参数"></a>接收单个参数</h4><table><thead><tr><th style="text-align:left">Interface</th><th style="text-align:left">functional method</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Function&lt;T,R&gt;</td><td style="text-align:left">R apply(T t)</td><td style="text-align:left">接收参数类型为T，返回参数类型为R</td></tr><tr><td style="text-align:left">IntFunction<r></r></td><td style="text-align:left">R apply(int value)</td><td style="text-align:left">以下三个接口，指定了接收参数类型，返回参数类型为泛型R</td></tr><tr><td style="text-align:left">LongFunction<r></r></td><td style="text-align:left">R apply(long value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Double<r></r></td><td style="text-align:left">R apply(double value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ToIntFunction<t></t></td><td style="text-align:left">int applyAsInt(T value)</td><td style="text-align:left">以下三个接口，指定了返回参数类型，接收参数类型为泛型T</td></tr><tr><td style="text-align:left">ToLongFunction<t></t></td><td style="text-align:left">long applyAsLong(T value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ToDoubleFunction<t></t></td><td style="text-align:left">double applyAsDouble(T value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">IntToLongFunction</td><td style="text-align:left">long applyAsLong(int value)</td><td style="text-align:left">以下六个接口，既指定了接收参数类型，也指定了返回参数类型</td></tr><tr><td style="text-align:left">IntToDoubleFunction</td><td style="text-align:left">double applyAsLong(int value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">LongToIntFunction</td><td style="text-align:left">int applyAsLong(long value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">LongToDoubleFunction</td><td style="text-align:left">double applyAsLong(long value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoubleToIntFunction</td><td style="text-align:left">int applyAsLong(double value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoubleToLongFunction</td><td style="text-align:left">long applyAsLong(double value)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">UnaryOperator<t></t></td><td style="text-align:left">T apply(T t)</td><td style="text-align:left">特殊的Function，接收参数类型和返回参数类型一样</td></tr><tr><td style="text-align:left">IntUnaryOperator</td><td style="text-align:left">int applyAsInt(int left, int right)</td><td style="text-align:left">以下三个接口，制定了接收参数和返回参数类型，并且都一样</td></tr><tr><td style="text-align:left">LongUnaryOperator</td><td style="text-align:left">long applyAsInt(long left, long right)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoubleUnaryOperator</td><td style="text-align:left">double applyAsInt(double left, double right)</td></tr></tbody></table><h3 id="接收两个参数-1"><a href="#接收两个参数-1" class="headerlink" title="接收两个参数"></a>接收两个参数</h3><table><thead><tr><th style="text-align:left">interface</th><th style="text-align:left">functional method</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">BiFunction&lt;T, U, R&gt;</td><td style="text-align:left">R apply(T t, U u)</td><td style="text-align:left">接收两个参数的Function</td></tr><tr><td style="text-align:left">ToIntBiFunction&lt;T, U&gt;</td><td style="text-align:left">int applyAsInt(T t, U u)</td><td style="text-align:left">以下三个接口，指定了返回参数类型，接收参数类型分别为泛型T, U</td></tr><tr><td style="text-align:left">ToLongBiFunction&lt;T, U&gt;</td><td style="text-align:left">long applyAsLong(T t, U u)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ToDoubleBiFunction&lt;T,U&gt;</td><td style="text-align:left">double appleyAsDouble(T t, U u)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">BinaryOperator<t></t></td><td style="text-align:left">T apply(T t, T u)</td><td style="text-align:left">特殊的BiFunction, 接收参数和返回参数类型一样</td></tr><tr><td style="text-align:left">IntBinaryOperator</td><td style="text-align:left">int applyAsInt(int left, int right)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">LongBinaryOperator</td><td style="text-align:left">long applyAsInt(long left, long right)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoubleBinaryOperator</td><td style="text-align:left">double applyAsInt(double left, double right)</td></tr></tbody></table><hr><h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参数传入，需注明返回的参数类型</span></span><br><span class="line">Supplier&lt;String&gt; fun4 = () -&gt; <span class="string">"hello world"</span>;</span><br><span class="line">String word = fun4.get(); <span class="comment">// word = "hello world"</span></span><br></pre></td></tr></table></figure><p>Supplier  扩展函数列表</p><table><thead><tr><th style="text-align:left">interface</th><th style="text-align:left">functional method</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Supplier<t></t></td><td style="text-align:left">T get()</td><td style="text-align:left">返回类型为泛型T</td></tr><tr><td style="text-align:left">BooleanSupplier</td><td style="text-align:left">boolean getAsBoolean()</td><td style="text-align:left">以下三个接口，返回指定类型</td></tr><tr><td style="text-align:left">IntSupplier</td><td style="text-align:left">int getAsInt()</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">LongSupplier</td><td style="text-align:left">long getAsLong()</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DoubleSupplier</td><td style="text-align:left">double getAsDouble()</td></tr></tbody></table><hr><h3 id="UnaryOperator"><a href="#UnaryOperator" class="headerlink" title="UnaryOperator"></a>UnaryOperator</h3><p>一元操作符， 继承Function,传入参数的类型和返回类型相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注明参数的类型</span></span><br><span class="line">UnaryOperator&lt;String&gt; fun5 = (x) -&gt; <span class="string">"你好，欢迎"</span> + x;</span><br><span class="line">String word = fun5.apply(<span class="string">"张三"</span>); <span class="comment">// word = "你好，欢迎张三"</span></span><br></pre></td></tr></table></figure><hr><h3 id="BinaryOperator"><a href="#BinaryOperator" class="headerlink" title="BinaryOperator"></a>BinaryOperator</h3><p> 二元操作符， 传入的两个参数的类型和返回类型相同， 继承 BiFunction </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为传入的两个参数和返回类型均一致，则只需注明一个类型就行了</span></span><br><span class="line">BinaryOperator&lt;String&gt; fun6 = (x, y) -&gt; x + y;</span><br><span class="line">String word = fun6.apply(<span class="string">"hello "</span>, <span class="string">"java"</span>); <span class="comment">// word = "hello java"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; JDK中已有的一些接口本身就是函数式接口，如&lt;code&gt;Runnable&lt;/code&gt;。 JDK 8中又增加了&lt;code&gt;java.util.function&lt;/code&gt;包， 提供了常用的函数式接口。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="jdk8" scheme="http://zhizhi.tangliangdong.me/tags/jdk8/"/>
    
  </entry>
  
  <entry>
    <title>IDEA的查询引用、调用关系图的功能</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/30/2019-10-30-IDEA%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%BC%95%E7%94%A8%E3%80%81%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB%E5%9B%BE%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/30/2019-10-30-IDEA的查询引用、调用关系图的功能/</id>
    <published>2019-10-30T06:01:10.000Z</published>
    <updated>2019-11-18T03:38:34.282Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="查看Java方法的调用树"><a href="#查看Java方法的调用树" class="headerlink" title="查看Java方法的调用树"></a>查看Java方法的调用树</h2><p> IntelliJ IDEA中可以在主菜单中选择Navigate | Call Hierarchy命令查看一个Java方法调用树（caller和callee两个方向） </p><p><img src="1.png" alt></p><p><img src="2.png" alt></p><p>上图中左上角的两个按钮是<strong>调用</strong>和<strong>被调用</strong>关系的显示。 </p><h2 id="查看表达式、变量和方法参数的传递关系树"><a href="#查看表达式、变量和方法参数的传递关系树" class="headerlink" title="查看表达式、变量和方法参数的传递关系树"></a>查看表达式、变量和方法参数的传递关系树</h2><p>IntelliJ IDEA中可以在主菜单中选择 <strong>Analyze | Data flow from / to Here</strong> 两个命令查看表达式、变量和方法参数的传递关系树。</p><h3 id="Analyze-Data-Flow-from-Here"><a href="#Analyze-Data-Flow-from-Here" class="headerlink" title="Analyze | Data Flow from Here"></a>Analyze | Data Flow from Here</h3><p><img src="3.png" alt></p><p><img src="4.png" alt></p><h3 id="Analyze-Data-Flow-to-Here"><a href="#Analyze-Data-Flow-to-Here" class="headerlink" title="Analyze | Data Flow to Here"></a>Analyze | Data Flow to Here</h3><p><img src="5.png" alt></p><p>查询调用目标方法的地方可以用 <em>Analyze Data flow from Here</em></p><h2 id="查看Java类、方法或变量的直接使用情况"><a href="#查看Java类、方法或变量的直接使用情况" class="headerlink" title="查看Java类、方法或变量的直接使用情况"></a>查看Java类、方法或变量的直接使用情况</h2><p>IntelliJ IDEA的 <em>Find Usage</em> 可以查看一个Java类、方法或变量的直接使用情况。 </p><p>或者直接点击目标对象，使用键盘快捷键：<em>Ctrl+G</em></p><p><img src="6.png" alt></p><h2 id="查看类关系图"><a href="#查看类关系图" class="headerlink" title="查看类关系图"></a>查看类关系图</h2><p> 在包或类上右键点击Diagram或者用快捷键Ctrl+Alt+U。 </p><p><img src="7.png" alt></p><p><img src="8.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;查看Java方法的调用树&quot;&gt;&lt;a href=&quot;#查看Java方法的调用树&quot; class=&quot;headerlink&quot; title=&quot;查看Java方法的调用树&quot;&gt;&lt;/a&gt;查看Java方法的调用树&lt;/h2&gt;&lt;p&gt; IntelliJ ID
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="IDEA" scheme="http://zhizhi.tangliangdong.me/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>python3 使用xpath</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/30/2019-10-30-python-xpath/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/30/2019-10-30-python-xpath/</id>
    <published>2019-10-30T01:19:29.000Z</published>
    <updated>2019-11-18T03:38:34.319Z</updated>
    
    <content type="html"><![CDATA[<p>python爬网页数据可以用xpath 进行标签定位</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://book.douban.com/'</span> <span class="comment">#需要爬数据的网址</span></span><br><span class="line">page = requests.Session().get(url)</span><br><span class="line">tree = html.fromstring(page.text)</span><br></pre></td></tr></table></figure><blockquote><p>使用 lxml 中的 xpath 高效提取文本与标签属性值</p></blockquote><p>先安装 lxml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><h2 id="定位html元素"><a href="#定位html元素" class="headerlink" title="定位html元素"></a>定位html元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">divs1 = tree.xpath(<span class="string">'//div'</span>) <span class="comment">#查找所有div标签</span></span><br><span class="line"></span><br><span class="line">divs2 = tree.xpath(<span class="string">'//div[@id="header"]'</span>) <span class="comment"># 查找id为header的标签</span></span><br><span class="line"></span><br><span class="line">divs3 = tree.xpath(<span class="string">'//div[@class="foot"]'</span>) <span class="comment"># 获取class为foot的div标签</span></span><br><span class="line"></span><br><span class="line">divs4 = tree.xpath(<span class="string">'//div[@class="foot"]//a'</span>) <span class="comment"># 获取class为foot下的a标签</span></span><br></pre></td></tr></table></figure><blockquote><p>属性名称后面的一定要加引号 <code>@class=&quot;foot&quot;</code></p></blockquote><h3 id="定位多属性标签"><a href="#定位多属性标签" class="headerlink" title="定位多属性标签"></a>定位多属性标签</h3><p>原贴链接：<a href="http://stackoverflow.com/questions/1604471/how-can-i-find-an-element-by-css-class-with-xpath" target="_blank" rel="noopener"><a href="https://stackoverflow.com/questions/1604471/how-can-i-find-an-element-by-css-class-with-xpath" target="_blank" rel="noopener">How can I find an element by CSS class with XPath?</a></a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//*[contains(@class, 'Test')]</span><br></pre></td></tr></table></figure><p> 但是这个表达式会把类似 class=”Testvalue” 或者 class=”newTest”也匹配出来。 可以使用如下版本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//*[contains(concat(' ', @class, ' '), ' Test ')]</span><br></pre></td></tr></table></figure><p> 如果你希望匹配的结果尽量精确，你还可以使用 normalize-space 功能来清除class名称周围的空格 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//*[contains(concat(' ', normalize-space(@class), ' '), ' Test ')]</span><br></pre></td></tr></table></figure><p>需要定位具有 <em>menu</em> 属性的<code>ul</code>标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"banner menu"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div5 = tree.xpath(<span class="string">'//div[@class="header"]//ul[contains(@class, "menu")]'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>建议把class换成更好识别的标识执行效率会更高 </p></blockquote><h2 id="取元素属性或文本"><a href="#取元素属性或文本" class="headerlink" title="取元素属性或文本"></a>取元素属性或文本</h2><p>获取 <em>div</em> 标签下的 <em>span</em> 标签中的文本信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content = tree.xpath(<span class="string">'//div//span/text()'</span>)</span><br></pre></td></tr></table></figure><p>获取标签中的属性信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">href = tree.xpath(<span class="string">'//div//a/@href'</span>) <span class="comment">#获取a标签的href图片地址</span></span><br><span class="line"></span><br><span class="line">src = tree.xpath(<span class="string">'//div//a/@alt'</span>) <span class="comment">#获取a标签的alt值</span></span><br></pre></td></tr></table></figure><p>如果获取的是标签，则返回的对象可以继续使用xpath方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">result = tree.xpath(<span class="string">'//ul[contains(@class, "pic-list2")]//li//a'</span>)  <span class="comment"># 获取需要的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">    src = item.xpath(<span class="string">'@src'</span>)[<span class="number">0</span>] <span class="comment"># 获取的是list</span></span><br><span class="line">    alt = item.xpath(<span class="string">'@alt'</span>)[<span class="number">0</span>] <span class="comment"># 获取的是list</span></span><br><span class="line">    print(src, alt)</span><br></pre></td></tr></table></figure><hr><h2 id="爬取豆瓣读书的图片"><a href="#爬取豆瓣读书的图片" class="headerlink" title="爬取豆瓣读书的图片"></a>爬取豆瓣读书的图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 豆瓣读书</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">captureDouBan</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://book.douban.com/'</span> <span class="comment">#需要爬数据的网址</span></span><br><span class="line">    page = requests.Session().get(url)</span><br><span class="line">    tree = html.fromstring(page.text)</span><br><span class="line">    result = tree.xpath(<span class="string">'//div[@class="cover"]//a//img'</span>) <span class="comment">#获取需要的数据</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">        src = item.xpath(<span class="string">'@src'</span>)[<span class="number">0</span>]</span><br><span class="line">        alt = item.xpath(<span class="string">'@alt'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(src, alt)</span><br><span class="line">        request.urlretrieve(src, <span class="string">"E://xiaotang//python3//img//"</span>+alt+<span class="string">".jpg"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python爬网页数据可以用xpath 进行标签定位&lt;/p&gt;
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="python3" scheme="http://zhizhi.tangliangdong.me/tags/python3/"/>
    
      <category term="xpath" scheme="http://zhizhi.tangliangdong.me/tags/xpath/"/>
    
  </entry>
  
  <entry>
    <title>2019-10-29-美国的宪政历程</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/29/2019-10-29-%E7%BE%8E%E5%9B%BD%E7%9A%84%E5%AE%AA%E6%94%BF%E5%8E%86%E7%A8%8B/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/29/2019-10-29-美国的宪政历程/</id>
    <published>2019-10-29T14:27:40.000Z</published>
    <updated>2019-11-18T03:38:34.282Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="阅读" scheme="http://zhizhi.tangliangdong.me/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="美国" scheme="http://zhizhi.tangliangdong.me/tags/%E7%BE%8E%E5%9B%BD/"/>
    
      <category term="法律" scheme="http://zhizhi.tangliangdong.me/tags/%E6%B3%95%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>python3 的一些实用方法</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/29/2019-10-29-python3-%E6%96%B9%E6%B3%95/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/29/2019-10-29-python3-方法/</id>
    <published>2019-10-29T09:33:07.000Z</published>
    <updated>2019-11-18T03:38:34.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python实现list去重"><a href="#python实现list去重" class="headerlink" title="python实现list去重"></a>python实现list去重</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先将列表转化为set，再转化为list就可以实现去重操作</span></span><br><span class="line">list(set(list))  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 用sort即可实现排序</span></span><br><span class="line">list.sort()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quote(item.xpath(<span class="string">'@src'</span>)[<span class="number">0</span>], safe=string.printable)</span><br></pre></td></tr></table></figure><h3 id="python转换编码"><a href="#python转换编码" class="headerlink" title="python转换编码"></a>python转换编码</h3><blockquote><p> 按照标准， URL 只允许一部分 ASCII 字符（数字字母和部分符号），其他的字符（如汉字）是不符合 URL 标准的。<br>所以 URL 中使用其他字符就需要进行 URL 编码。 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># safe表示可以忽略的字符</span></span><br><span class="line"><span class="comment"># string.printable 表示可打印的字符，见下方 string模块</span></span><br><span class="line">quote(<span class="string">'http://www.obzhi.com/wp-content/themes/Loostrive/timthumb.php?src=http://www.obzhi.com/wp-content/uploads/2019/10/eveoline.jpg&amp;h=200&amp;w=300&amp;zc=1'</span>), safe=string.printable)</span><br></pre></td></tr></table></figure><h4 id="String模块中的常量："><a href="#String模块中的常量：" class="headerlink" title="String模块中的常量："></a>String模块中的常量：</h4><blockquote><p>string.digits：数字0~9</p><p>string.letters：所有字母（大小写）</p><p>string.lowercase：所有小写字母</p><p>string.printable：可打印字符的字符串</p><p>string.punctuation：所有标点</p><p>string.uppercase：所有大写字母</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.digits  </span><br><span class="line"><span class="string">'0123456789'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.letters  </span><br><span class="line"><span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_lowercase  </span><br><span class="line"><span class="string">'abcdefghijklmnopqrstuvwxyz'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.printable  </span><br><span class="line"><span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ \t\n\r\x0b\x0c'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.punctuation  </span><br><span class="line"><span class="string">'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_uppercase  </span><br><span class="line"><span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br></pre></td></tr></table></figure><h3 id="python-网页获取的中文乱码"><a href="#python-网页获取的中文乱码" class="headerlink" title="python 网页获取的中文乱码"></a>python 网页获取的中文乱码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取天气的json</span></span><br><span class="line">r = requests.get(<span class="string">'http://www.weather.com.cn/data/sk/101210101.html'</span>)</span><br><span class="line">print(r.content) </span><br><span class="line"><span class="comment">#&#123;'weatherinfo': &#123;'city': 'æ\x9d\xadå·\x9e', 'cityid': '101210101', 'temp': '24.8', 'WD': 'ä¸\x9cå\x8c\x97é£\x8e', 'WS': 'å°\x8fäº\x8e3çº§', 'SD': '81%', 'AP': '1000.3hPa', 'njd': 'æ\x9a\x82æ\x97\xa0å®\x9eå\x86µ', 'WSE': '&lt;3', 'time': '17:50', 'sm': '2.1', 'isRadar': '1', 'Radar': 'JC_RADAR_AZ9571_JB'&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将编码格式改成 utf-8</span></span><br><span class="line">r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(r.json())</span><br><span class="line"><span class="comment">#&#123;'weatherinfo': &#123;'city': '杭州', 'cityid': '101210101', 'temp': '24.8', 'WD': '东北风', 'WS': '小于3级', 'SD': '81%', 'AP': '1000.3hPa', 'njd': '暂无实况', 'WSE': '&lt;3', 'time': '17:50', 'sm': '2.1', 'isRadar': '1', 'Radar': 'JC_RADAR_AZ9571_JB'&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="python-定时器"><a href="#python-定时器" class="headerlink" title="python 定时器"></a>python 定时器</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python实现list去重&quot;&gt;&lt;a href=&quot;#python实现list去重&quot; class=&quot;headerlink&quot; title=&quot;python实现list去重&quot;&gt;&lt;/a&gt;python实现list去重&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="python3" scheme="http://zhizhi.tangliangdong.me/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>记录《电车难题》</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/27/2019-10-27-%E7%94%B5%E8%BD%A6%E9%9A%BE%E9%A2%98/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/27/2019-10-27-电车难题/</id>
    <published>2019-10-27T06:46:33.000Z</published>
    <updated>2019-11-18T03:38:34.281Z</updated>
    
    <content type="html"><![CDATA[<p>杰里米·边沁的“功利主义”：一个行为的正确与否，完全取决于其造成的后果；而我们的行为准则，应当是以“最多数人之最大幸福”为目的。——判断好坏的标准：是否造成幸福的最大化。</p><a id="more"></a><h1 id="全民民意法庭"><a href="#全民民意法庭" class="headerlink" title="全民民意法庭"></a>全民民意法庭</h1><h2 id="检方"><a href="#检方" class="headerlink" title="检方"></a>检方</h2><p>案例一：琼斯女士扳动道岔，将一辆失控的电车引入岔道，挽救了5人的性命，却也因此造成事发当时站在岔道上的法利先生的身亡。</p><p>案例二：创伤外科医生罗德尼·梅普斯接到通知赶往手术室，共有六名伤员被送往该医院，其中两名伤员需要肾移植；另一人需要心脏移植；还有一人需要肝移植；第五人需要肺移植。当梅普斯正为器官来源发愁时，发现第六位伤员没有明显的伤情，梅普斯随即将这名年轻人送入手术室，摘取了他所有的器官，并移植给上述五名病人，因此挽救了他们的生命。他在法庭上说了一句著名的话：“我觉得一名病人死亡，比五名病人死亡的结果要好。”  ——陪审团一致判定梅普斯犯有一级谋杀罪。</p><p>当时检方在审理琼斯女士扳动道闸案时，将此案与梅普斯摘取器官案做类比，请求判处琼斯女士犯有杀人罪。</p><hr><h2 id="辩方："><a href="#辩方：" class="headerlink" title="辩方："></a>辩方：</h2><p>案例三：一名叫克拉拉·墨菲的女子，在乘坐电车时，司机突然昏迷，克拉拉为了挽救前方轨道上5个人的性命而将电车转至侧线，但却撞死了另一个人。—— 多达89%的陪审员认为，卡拉拉将电车转至侧线的行为是可取的。</p><p>案例四： 弗兰克·特里梅因站在横跨电车轨道的人行天桥上。一辆失去控制的电车正沿着轨道，朝站在轨道上的五个人疾驰而去。当时只有一个轨道，没有侧线可供电车转向。弗兰克很快认定，只有在轨道上投以重物才能阻止电车。但是天桥上只有一名体型肥硕的胖子站在旁边。弗兰克发现，要么将这名男子推下桥，拯救那5人；要么任凭那5人被电车撞死。最终他选择了将那人推下桥。 —— 只有仅仅11%的陪审员认为弗兰克此举是可取的。</p><blockquote><p>为什么几乎所有人都认为，将电车转至侧线，撞死一人挽救五人可以接受。但几乎所有人都认为，将一个胖子推下桥挽救五人则不能接受。</p></blockquote><p>其中只有极少数人以道德原因作为决定的基础，只有极少数人在对克拉拉和弗兰克两案作出不同判决时，以道德原因作为决定的基础。只有少数人指出，他们认为两案确实存在差异，并因此按照不同的道德原因，作出了不同的判决。</p><h3 id="1、有些人指出，克拉拉“预见”到如果她扳动道岔，侧线上的那个人将会身亡；而弗兰克则对胖子的死存在主观的“故意”。换句话说，克拉拉并没有“利用”岔道上那个男人的死来挽救另五人，而弗兰克则确实如此利用了那个胖子。"><a href="#1、有些人指出，克拉拉“预见”到如果她扳动道岔，侧线上的那个人将会身亡；而弗兰克则对胖子的死存在主观的“故意”。换句话说，克拉拉并没有“利用”岔道上那个男人的死来挽救另五人，而弗兰克则确实如此利用了那个胖子。" class="headerlink" title="1、有些人指出，克拉拉“预见”到如果她扳动道岔，侧线上的那个人将会身亡；而弗兰克则对胖子的死存在主观的“故意”。换句话说，克拉拉并没有“利用”岔道上那个男人的死来挽救另五人，而弗兰克则确实如此利用了那个胖子。"></a>1、有些人指出，克拉拉“预见”到如果她扳动道岔，侧线上的那个人将会身亡；而弗兰克则对胖子的死存在主观的“故意”。换句话说，克拉拉并没有“利用”岔道上那个男人的死来挽救另五人，而弗兰克则确实如此利用了那个胖子。</h3><blockquote><p>这一区分即 <em>圣·托马斯</em>阿奎那提出的“双效原则”的一部分：一个本来符合伦理的行为，也许存在不良的副作用，但是绝不能以坏的手段来达成好的结果。</p></blockquote><h3 id="2、也有人将区分点放在了这样一个事实上：也即克拉拉的行为并非直接作用于死者，而弗兰克的行为则是直接的。（可以理解为，克拉拉并没有直接接触到岔道上的那个男人，而弗兰克的双手则确实接触到了那个胖子。）"><a href="#2、也有人将区分点放在了这样一个事实上：也即克拉拉的行为并非直接作用于死者，而弗兰克的行为则是直接的。（可以理解为，克拉拉并没有直接接触到岔道上的那个男人，而弗兰克的双手则确实接触到了那个胖子。）" class="headerlink" title="2、也有人将区分点放在了这样一个事实上：也即克拉拉的行为并非直接作用于死者，而弗兰克的行为则是直接的。（可以理解为，克拉拉并没有直接接触到岔道上的那个男人，而弗兰克的双手则确实接触到了那个胖子。）"></a>2、也有人将区分点放在了这样一个事实上：也即克拉拉的行为并非直接作用于死者，而弗兰克的行为则是直接的。（可以理解为，克拉拉并没有直接接触到岔道上的那个男人，而弗兰克的双手则确实接触到了那个胖子。）</h3><h3 id="3、克拉拉的行为是转移了一个既有的危险，而弗兰克则创造了一个新的危险。"><a href="#3、克拉拉的行为是转移了一个既有的危险，而弗兰克则创造了一个新的危险。" class="headerlink" title="3、克拉拉的行为是转移了一个既有的危险，而弗兰克则创造了一个新的危险。"></a>3、克拉拉的行为是转移了一个既有的危险，而弗兰克则创造了一个新的危险。</h3><blockquote><p>我是比较赞成第一种观点的。</p></blockquote><h2 id="双效原则"><a href="#双效原则" class="headerlink" title="双效原则"></a>双效原则</h2><p>圣·托马斯指出，同一行为通常兼有善恶两种效果。而在某种特定条件下，一个善的行为，虽然兼有恶的结果，也是可以允许的，哪怕这恶的结果，在通常情况下是必须避免的。</p><p>四个条件：</p><ol><li><p>该行动本身，在道德上必须是善的，或至少是中性的。</p></li><li><p>行为人不能主观希望恶果的发生，但可以允许其发生。如果能够避免恶果而同样达成善的效果，他应当这样做。</p></li><li><p>善果和行为本身的关系，其直接程度，必须等同或高于善果与恶果之间的关系。换句话说，善的结果必须是由这行为直接造成的，而不是通过恶果间接造成的。否则，行为人就是以恶果为工具来达成善果，这是永远不能为允许的。</p></li><li><p>善果之可取，必须足以弥补恶果之恶。</p></li></ol><blockquote><p>设置条件三是为了避免过度细分的诡辩术，体现了天才的智慧。例如梅普斯案中将摘除必要器官和杀人行文区分开。</p></blockquote><h3 id="将这些标准运用与达芙妮·琼斯一案："><a href="#将这些标准运用与达芙妮·琼斯一案：" class="headerlink" title="将这些标准运用与达芙妮·琼斯一案："></a>将这些标准运用与达芙妮·琼斯一案：</h3><ol><li>如果我们将行为与其结果剥离，改变电车路径的行为在道德上是中性的，所以符合第一个条件。</li><li>据我们所知，琼斯女士并不“希望”造成法利先生死亡。她为了拯救另外五人，仅仅“预见”并“允许”了这一副作用的发生。我们也可以认定，如果琼斯女士有办法不造成法利先生的死亡而同样挽救那五人的生命，她一定会那么做。</li><li>琼斯女士在扳动道岔时，并不是先杀死法利先生，然后利用他的身体去制止电车。她的行为，其直接、立刻的效果是拯救了五人的生命。只是后来，电车造成了法利先生的死亡。条件三符合。</li><li>拯救五人的善超过了失去一人的恶。条件四符合。</li></ol><h3 id="但梅普斯医生的行为不符合双效原则中的四个条件："><a href="#但梅普斯医生的行为不符合双效原则中的四个条件：" class="headerlink" title="但梅普斯医生的行为不符合双效原则中的四个条件："></a>但梅普斯医生的行为不符合双效原则中的四个条件：</h3><ol><li>杀死一个无辜者的行为，本身不是善的，因此不符合条件一。</li><li>从表面上看，梅普斯医生似乎一定有造成六号病人鲍勃·蒂瑟林顿先生死亡的主观故意，因为医生知道，摘除蒂瑟林顿的必要器官无异于夺走他的生命。因此，条件二也不符合。</li><li>梅普斯医生实际上是用一个恶的手段（摘取蒂瑟林顿先生的器官，并立即造成其死亡）来达成一个善的目的，这是永远不能被允许的。</li><li>我们愿意接受，梅普斯医生的情况也许符合条件四。善果似乎的确胜过恶果。</li></ol><blockquote><p>陪审员南希：我们的道德抉择最终还是出自情感的本能，因此一切分析都只不过是为我们的道德直觉寻找理由罢了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;杰里米·边沁的“功利主义”：一个行为的正确与否，完全取决于其造成的后果；而我们的行为准则，应当是以“最多数人之最大幸福”为目的。——判断好坏的标准：是否造成幸福的最大化。&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://zhizhi.tangliangdong.me/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="电车难题" scheme="http://zhizhi.tangliangdong.me/tags/%E7%94%B5%E8%BD%A6%E9%9A%BE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>bash快捷键</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/25/2019-10-25-bash%E5%91%BD%E4%BB%A4/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/25/2019-10-25-bash命令/</id>
    <published>2019-10-25T07:37:06.000Z</published>
    <updated>2019-11-18T03:38:34.280Z</updated>
    
    <content type="html"><![CDATA[<p>生活在 Bash shell 中，熟记以下快捷键，将极大的提高你的命令行操作效率。</p><a id="more"></a><h3 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h3><ul><li>Ctrl + a ：移到命令行首</li><li>Ctrl + e ：移到命令行尾</li><li>Ctrl + f ：按字符前移（右向）</li><li>Ctrl + b ：按字符后移（左向）</li><li>Alt + f ：按单词前移（右向）</li><li>Alt + b ：按单词后移（左向）</li><li>Ctrl + xx：在命令行首和光标之间移动</li><li>Ctrl + u ：从光标处删除至命令行首</li><li>Ctrl + k ：从光标处删除至命令行尾</li><li>Ctrl + w ：从光标处删除至字首</li><li>Alt + d ：从光标处删除至字尾</li><li>Ctrl + d ：删除光标处的字符</li><li>Ctrl + h ：删除光标前的字符</li><li>Ctrl + y ：粘贴至光标后</li><li>Alt + c ：从光标处更改为首字母大写的单词</li><li>Alt + u ：从光标处更改为全部大写的单词</li><li>Alt + l ：从光标处更改为全部小写的单词</li><li>Ctrl + t ：交换光标处和之前的字符</li><li>Alt + t ：交换光标处和之前的单词</li><li>Alt + Backspace：与 Ctrl + w <del>相同</del>类似，分隔符有些差别 [感谢 rezilla 指正]</li></ul><h3 id="重新执行命令"><a href="#重新执行命令" class="headerlink" title="重新执行命令"></a>重新执行命令</h3><ul><li>Ctrl + r：逆向搜索命令历史</li><li>Ctrl + g：从历史搜索模式退出</li><li>Ctrl + p：历史中的上一条命令</li><li>Ctrl + n：历史中的下一条命令</li><li>Alt + .：使用上一条命令的最后一个参数</li></ul><h3 id="控制命令"><a href="#控制命令" class="headerlink" title="控制命令"></a>控制命令</h3><ul><li>Ctrl + l：清屏</li><li>Ctrl + o：执行当前命令，并选择上一条命令</li><li>Ctrl + s：阻止屏幕输出</li><li>Ctrl + q：允许屏幕输出</li><li>Ctrl + c：终止命令</li><li>Ctrl + z：挂起命令</li></ul><h3 id="Bang-命令"><a href="#Bang-命令" class="headerlink" title="Bang (!) 命令"></a>Bang (!) 命令</h3><ul><li>!!：执行上一条命令</li><li>!blah：执行最近的以 blah 开头的命令，如 !ls</li><li>!blah:p：仅打印输出，而不执行</li><li>!$：上一条命令的最后一个参数，与 Alt + . 相同</li><li>!$:p：打印输出 !$ 的内容</li><li>!*：上一条命令的所有参数</li><li>!<em>:p：打印输出 !</em> 的内容</li><li>^blah：删除上一条命令中的 blah</li><li>^blah^foo：将上一条命令中的 blah 替换为 foo</li><li>^blah^foo^：将上一条命令中所有的 blah 都替换为 foo</li></ul><p><em>友情提示</em>：</p><ol><li>以上介绍的大多数 Bash 快捷键仅当在 emacs 编辑模式时有效，若你将 Bash 配置为 vi 编辑模式，那将遵循 vi 的按键绑定。Bash 默认为 emacs 编辑模式。如果你的 Bash 不在 emacs 编辑模式，可通过 <code>set -o emacs</code> 设置。</li><li>^S、^Q、^C、^Z 是由终端设备处理的，可用 <code>stty</code> 命令设置。</li></ol><p>转载至 <a href="https://linuxtoy.org/archives/bash-shortcuts.html" target="_blank" rel="noopener">让你提升命令行效率的 Bash 快捷键 [完整版]</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生活在 Bash shell 中，熟记以下快捷键，将极大的提高你的命令行操作效率。&lt;/p&gt;
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="快捷键" scheme="http://zhizhi.tangliangdong.me/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
      <category term="bash" scheme="http://zhizhi.tangliangdong.me/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>docker命令</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/23/2019-10-23-docker%E5%91%BD%E4%BB%A4/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/23/2019-10-23-docker命令/</id>
    <published>2019-10-23T14:42:20.000Z</published>
    <updated>2019-12-10T03:59:45.320Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker通过Dockerfile构建镜像"><a href="#docker通过Dockerfile构建镜像" class="headerlink" title="docker通过Dockerfile构建镜像"></a>docker通过Dockerfile构建镜像</h3><p>在Dockerfile同级目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t tangliangdong/nginx .</span><br></pre></td></tr></table></figure><h3 id="docker-开机自动启动"><a href="#docker-开机自动启动" class="headerlink" title="docker 开机自动启动"></a>docker 开机自动启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker.service</span><br></pre></td></tr></table></figure><h3 id="docker-容器开机自启动"><a href="#docker-容器开机自启动" class="headerlink" title="docker 容器开机自启动"></a>docker 容器开机自启动</h3><p>在运行docker容器时可以加如下参数来保证每次docker服务重启后容器也自动重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><p>如果已经启动了则可以使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=always &lt;IMAGE ID&gt;</span><br></pre></td></tr></table></figure><p>查看容器的重启设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f "&#123;&#123; .State.StartedAt &#125;&#125;" &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><h3 id="docker-进入已经运行的容器"><a href="#docker-进入已经运行的容器" class="headerlink" title="docker 进入已经运行的容器"></a>docker 进入已经运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker attach &lt;CONTAINER ID&gt;</span><br><span class="line"></span><br><span class="line">docker exec -it &lt;CONTAINER ID&gt; /bin/bash</span><br></pre></td></tr></table></figure><h3 id="docker查看网络"><a href="#docker查看网络" class="headerlink" title="docker查看网络"></a>docker查看网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p>查看使用该网络的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect app</span><br></pre></td></tr></table></figure><p>容器连接网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect app &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><h3 id="docker-使用挂载"><a href="#docker-使用挂载" class="headerlink" title="docker 使用挂载"></a>docker 使用挂载</h3><p>docker可以再创建容器时将宿主机的目录挂载到容器中，这样更新宿主机的目录，即可更新docker容器中的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -v &lt;宿主机绝对目录&gt;:&lt;容器绝对路径&gt;</span><br><span class="line"></span><br><span class="line">docker run -d -p 80 --name website -v $PWD/website:/var/www/html/website xiaotang/nginx nginx</span><br></pre></td></tr></table></figure><h3 id="docker-启动所有的容器"><a href="#docker-启动所有的容器" class="headerlink" title="docker 启动所有的容器"></a>docker 启动所有的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start $(docker ps -aq)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;docker通过Dockerfile构建镜像&quot;&gt;&lt;a href=&quot;#docker通过Dockerfile构建镜像&quot; class=&quot;headerlink&quot; title=&quot;docker通过Dockerfile构建镜像&quot;&gt;&lt;/a&gt;docker通过Dockerfile构建
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="docker" scheme="http://zhizhi.tangliangdong.me/tags/docker/"/>
    
      <category term="mysql" scheme="http://zhizhi.tangliangdong.me/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>树莓派切换openjdk版本</title>
    <link href="http://zhizhi.tangliangdong.me/2019/10/23/2019-10-23-%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%87%E6%8D%A2openjdk%E7%89%88%E6%9C%AC/"/>
    <id>http://zhizhi.tangliangdong.me/2019/10/23/2019-10-23-树莓派切换openjdk版本/</id>
    <published>2019-10-23T05:44:33.000Z</published>
    <updated>2019-11-18T03:38:34.201Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树莓派安装openjdk"><a href="#树莓派安装openjdk" class="headerlink" title="树莓派安装openjdk"></a>树莓派安装openjdk</h3><p>将tf卡烧制好官方推荐的操作系统 <a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">Raspbian</a></p><p><img src="1.png" alt="Raspbian"></p><p><img src="2.png" alt="Raspbian"></p><p>再将树莓派插上电源启动，</p><p><img src="3.png" alt></p><p><img src="4.png" alt></p><p>Raspbian系统自带的是jdk是openjdk11的，但我还需要使用jdk8的，因此需要下载openjdk8</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure><blockquote><p>这里安装的不能是openjdk-8-jre，不然在jenkins配置jdk时，openjdk-8的安装目录是不能使用的，因为装的是openjdk-8-jre，而安装openjdk-8-jre会将open-8-jre一起安装</p></blockquote><p><img src="7.png" alt="sudo apt-get install openjdk-8-jdk"></p><p>安装成功后，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>显示的仍旧是openjdk11，因此需要进行切换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure><p><img src="5.png" alt></p><p>同时该命令将安装的各个jdk地址也显示出来了。</p><p><code>/usr/lib/jvm</code></p><blockquote><p>如果操作的时候出错，提示权限不足，则使用sudo命令已管理员身份执行，就可以通过了。</p><p>如果update-alternatives没有，则通过 <code>apt-get install update-alternatives</code> 先下载安装命令</p></blockquote><hr><h3 id="树莓派4B-4G内存版"><a href="#树莓派4B-4G内存版" class="headerlink" title="树莓派4B 4G内存版"></a>树莓派4B 4G内存版</h3><p><img src="6.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;树莓派安装openjdk&quot;&gt;&lt;a href=&quot;#树莓派安装openjdk&quot; class=&quot;headerlink&quot; title=&quot;树莓派安装openjdk&quot;&gt;&lt;/a&gt;树莓派安装openjdk&lt;/h3&gt;&lt;p&gt;将tf卡烧制好官方推荐的操作系统 &lt;a href=&quot;http
      
    
    </summary>
    
      <category term="learn" scheme="http://zhizhi.tangliangdong.me/categories/learn/"/>
    
    
      <category term="树莓派" scheme="http://zhizhi.tangliangdong.me/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="openjdk" scheme="http://zhizhi.tangliangdong.me/tags/openjdk/"/>
    
  </entry>
  
</feed>
